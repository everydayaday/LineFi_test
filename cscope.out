cscope 15 $HOME/work/libergon_rnd_linefi               0000225476
	@eals_signal/src/main.c

5 
	~<°dlib.h
>

6 
	~"N76E003.h
"

7 
	~"SFR_Ma¸o.h
"

8 
	~"Fun˘i⁄_deföe.h
"

9 
	~"Comm⁄.h
"

10 
	~"Dñay.h
"

11 
	~"ws2812b.h
"

12 
	~"u¨t.h
"

13 
	~"ì¥om_üp.h
"

15 
	#TIMER0_VAL
 (133*1)

16 

	)

17 
	#TH0_INIT
 (((65536-
TIMER0_VAL
)>>8)&0xFF)

	)

18 
	#TL0_INIT
 ((65536-
TIMER0_VAL
)&0xFF)

	)

19 
	#REF_MOTOR_L_DUR
 100

	)

20 
	#REF_MOTOR_R_DUR
 100

	)

22 
	#STEP_DLT
 10

	)

23 
	#DIR_CW
 (1)

	)

24 
	#DIR_CCW
 (-1)

	)

26 
	#STEP_SHORT
 (1)

	)

27 
	#STEP_LONG
 (10)

	)

29 #i‚de‡
TOGGLE


30 
	#TOGGLE
(
X
ËX=((X==1)?0:1);

	)

33 
	#BASE_ADDRESS
 0x3700

	)

34 
	#TIME_OUT_MY_ADDR
 100

	)

35 
	#TIME_OUT_SETTING_ADDR
 100

	)

36 
	#TIME_OUT_FACTORY_RESET
 200

	)

37 
	#COUNT_OUT_FACTORY_RESET
 10

	)

38 
	#COUNT_OUT_FACTORY_RESET_ALL
 10

	)

40 
	#MSK_ADDR
 0xF0

	)

41 
	#MSK_CMD
 0x0F

	)

42 
	#LINEFI_CMD_ADDRESSING
 0x00

	)

43 
	#LINEFI_CMD_UARTSPEED
 0x01

	)

45 
__code
 
	$__©
 (
BASE_ADDRESS
Ë
gpcEEPROM
[128] = "";

48 
	#BIG_STEP
 8

	)

50 
STATE_CW_SHORT
,

51 
STATE_CW_LONG
,

52 
STATE_CCW_SHORT
,

53 
STATE_CCW_LONG
,

55 
STATE_CW_SHORT_ROT
,

56 
STATE_CW_LONG_ROT
,

57 
STATE_CCW_SHORT_ROT
,

58 
STATE_CCW_LONG_ROT
,

61 
STATE_SHORT_STOP_WAIT
,

62 
STATE_CW_SHORT_STOP_WAIT
,

63 
STATE_CCW_SHORT_STOP_WAIT
,

64 
STATE_LONG_STOP_WAIT
,

65 
STATE_CW_LONG_STOP_WAIT
,

66 
STATE_CCW_LONG_STOP_WAIT
,

67 
STATE_WAIT
,

68 
STATE_GO
,

69 
STATE_GO1
,

70 
STATE_GO2
,

71 
STATE_GO3
,

72 
STATE_GO4
,

73 
STATE_GO5
,

74 
STATE_GO6
,

75 
STATE_GO7
,

76 
STATE_INIT


80 
STATE_ADDR_MINE
,

81 
STATE_ADDR_OTHER
,

82 
STATE_ADDR_END


86 
	#MŸ‹L_M
 
P01


87 
	#MŸ‹L_P
 
P00


88 
	#MŸ‹L_ZP
 
P15


89 
	#MŸ‹L_£ns‹1
 
P10


90 
	#MŸ‹L_£ns‹2
 
P11


91 
	#MŸ‹R_M
 
P04


92 
	#MŸ‹R_P
 
P03


93 
	#MŸ‹R_ZP
 
P12


94 
	#MŸ‹R_£ns‹1
 
P13


95 
	#MŸ‹R_£ns‹2
 
P14


96 
	#powî_˘æ
 
P05


97 
	#£l_out1
 
P13


98 
	#£l_out2
 
P10


99 

	)

104 
	#BUFFER_SIZE
 256

	)

105 
	#LOCAL_PWR_ON
 (0)

	)

106 
	#LOCAL_PWR_OFF
 (1)

	)

110 
UINT8
 
gu8STL_Pau£C¡
;

111 
UINT8
 
gu8STR_Pau£C¡
;

112 
UINT16
 
gu16St›L
 = 0;

113 
UINT16
 
gu16St›R
 = 0;

114 
UINT8
 
gucR
=0;

115 
UINT8
 
gucG
=0;

116 
UINT8
 
gucB
=0;

117 
UINT8
 
gucW
=0;

118 
UINT8
 
gucPos
=0;

120 
gc16STL_C¡
 = 0;

121 
gc16STR_C¡
 = 0;

122 
UINT8
 
gucSãpTimeL_Sh‹t
 = 30;

123 
UINT8
 
gucSãpTimeL_L⁄g
 = 100;

124 
UINT8
 
gucSãpTimeR_Sh‹t
 = 30;

125 
UINT8
 
gucSãpTimeR_L⁄g
 = 100;

127 
UINT8
 
gucWaôTimeL_Sh‹t
 = 200;

128 
UINT8
 
gucWaôTimeL_L⁄g
 = 25;

129 
UINT8
 
gucWaôTimeR_Sh‹t
 = 200;

130 
UINT8
 
gucWaôTimeR_L⁄g
 = 25;

132 
UINT8
 
guSèã
 = 
STATE_INIT
;

133 
UINT8
 
guSèãL
 = 
STATE_INIT
;

134 
UINT8
 
guSèãR
 = 
STATE_INIT
;

136 
UINT8
 
gu8SãpTimeL_CW2
 = 100;

137 
UINT8
 
gu8SãpTimeL_CCW2
 = 100;

138 
UINT8
 
gu8SãpTimeR_CW2
 = 100;

139 
UINT8
 
gu8SãpTimeR_CCW2
 = 100;

140 
UINT8
 
__xd©a
 
gu8Tmp
;

142 
UINT16
 
gu16MŸ‹L_Dur
 = 10;

143 
UINT16
 
gu16MŸ‹R_Dur
 = 10;

145 
__xd©a
 
g16TrgtSãpC¡L2
 = 0;

146 
__xd©a
 
g16TrgtSãpC¡R2
 = 0;

147 
__xd©a
 
g16TrgtSãpC¡L
 = 0;

148 
__xd©a
 
g16TrgtSãpC¡R
 = 0;

149 
__xd©a
 
g16CuºSãpC¡L
 = 0;

150 
__xd©a
 
g16CuºSãpC¡R
 = 0;

151 
__xd©a
 
gu16C¡0
 = 0;

153 
gucMyAddr
;

155 
UINT8
 
__xd©a
 
UART_BUFFER
[
BUFFER_SIZE
];

157 
UINT32
 
__xd©a
 
gpu32U¨tS≥ed
[] = {

172 
	}
};

174 
	$£t_gpio
()

176 
Së_AŒ_GPIO_Quasi_Mode
;

179 
P05_PushPuŒ_Mode
;

180 
MŸ‹L_M
 = 0;

181 
P00_PushPuŒ_Mode
;

182 
MŸ‹L_P
 = 0;

183 
P04_PushPuŒ_Mode
;

184 
MŸ‹R_M
 = 0;

185 
P03_PushPuŒ_Mode
;

186 
MŸ‹R_P
 = 0;

187 
P05_PushPuŒ_Mode
;

188 
powî_˘æ
 = 
LOCAL_PWR_OFF
;

191 
P10_I≈ut_Mode
;

192 
P11_I≈ut_Mode
;

193 
P13_I≈ut_Mode
;

194 
P14_I≈ut_Mode
;

195 
P12_I≈ut_Mode
;

196 
P15_I≈ut_Mode
;

199 
£t_P0S_3
;

200 
£t_P0S_4
;

201 
£t_P0S_1
;

202 
£t_P0S_0
;

203 
£t_P1S_4
;

204 
£t_P3S_0
;

217 
PWM3_P00_OUTPUT_DISABLE
;

218 
PWM4_P01_OUTPUT_DISABLE
;

219 
PWM5_P03_OUTPUT_DISABLE
;

220 
PWM3_P04_OUTPUT_DISABLE
;

226 
PWM_CLOCK_DIV_128
;

227 
PWMPH
 = 0x00;

228 
PWMPL
 = 0x3F;

233 
PWM2H
 = 0x00;

234 
£t_SFRPAGE
;

235 
PWM5H
 = 0x00;

236 
˛r_SFRPAGE
;

237 
PWM0H
 = 0x00;

238 
PWM1H
 = 0x00;

240 
£t_LOAD
;

241 
£t_PWMRUN
;

243 
	}
}

245 
	$Timî0_ISR
 (Ë
__öãºu±
 1

247 
i
;

248 
k
,
l
;

249 
TH0
 = 
TH0_INIT
;

250 
TL0
 = 
TL0_INIT
;

252 i‡(
gu16MŸ‹R_Dur
 < 30000) {

253 
gu16MŸ‹R_Dur
++;

255 
gu16C¡0
++;

257 
guSèã
) {

258 
STATE_GO1
 :

259 
i
=0;i<
gu8Tmp
;i++) {

260 
	`LED_SídCﬁ‹RGBW
(
gucR
,
gucG
,
gucB
,
gucW
);

262 
guSèã
 = 
STATE_GO
;

264 
STATE_GO2
 :

265 
i
=0;i<5*20;i++) {

266 
	`LED_SídCﬁ‹RGBW
(
gucW
,gucW,gucW,gucW);

268 
guSèã
 = 
STATE_GO
;

270 
STATE_GO3
 :

271 
i
=0;i<5*20;i++) {

272 i‡(
i
==
gucPos
) {

273 
	`LED_SídCﬁ‹RGBW
(
gucW
,gucW,gucW,gucW);

276 
	`LED_SídCﬁ‹RGBW
(0,0,0,0);

279 
guSèã
 = 
STATE_GO
;

281 
STATE_GO4
 :

282 
k
=0;k<1000;k++) {

283 
i
=0;i<15;i++) {

284 i‡(
i
 =(
k
>>0)) {

285 
	`LED_SídCﬁ‹RGBW
(
gucR
,
gucG
,
gucB
,
gucW
);

288 
	`LED_SídCﬁ‹RGBW
(0,0,0,0);

293 
l
=0;l<10000;l++) {

294 
n›
;Çop;Çop;Çop;Çop;

295 
n›
;Çop;Çop;Çop;Çop;

296 
n›
;Çop;Çop;Çop;Çop;

297 
n›
;Çop;Çop;Çop;Çop;

298 
n›
;Çop;Çop;Çop;Çop;

299 
n›
;Çop;Çop;Çop;Çop;

300 
n›
;Çop;Çop;Çop;Çop;

301 
n›
;Çop;Çop;Çop;Çop;

304 i‡(
k
 == 20) {

308 
guSèã
 = 
STATE_GO
;

310 
STATE_GO5
 :

311 
k
=0;k<1000;k++) {

312 
i
=0;i<50;i++) {

313 i‡((50 - 
i
Ë=(
k
>>0)) {

314 
	`LED_SídCﬁ‹RGBW
(
gucR
,
gucG
,
gucB
,
gucW
);

317 
	`LED_SídCﬁ‹RGBW
(0,0,0,0);

320 
l
=0;l<70;l++) {

321 
n›
;

323 i‡(
k
>>2 == 51) {

327 
guSèã
 = 
STATE_GO
;

330 
STATE_GO6
 :

331 
k
=0;k<1000;k++) {

332 
P03
 = 1;

333 
P02
 = 0;

334 
n›
;Çop;Çop;Çop;Çop;

335 
n›
;Çop;Çop;Çop;Çop;

336 
P03
 = 0;

337 
P02
 = 1;

338 
n›
;Çop;Çop;Çop;Çop;

339 
n›
;Çop;Çop;Çop;Çop;

341 
guSèã
 = 
STATE_GO
;

351 
guSèãL
) {

352 
STATE_CW_LONG
 : 
STATE_CW_SHORT
 :

353 
MŸ‹L_M
 = 1;

354 
MŸ‹L_P
 = 0;

356 
STATE_CCW_LONG
 : 
STATE_CCW_SHORT
 :

357 
MŸ‹L_M
 = 0;

358 
MŸ‹L_P
 = 1;

368 
guSèãR
) {

369 
STATE_CW_LONG
 : 
STATE_CW_SHORT
 :

370 
MŸ‹R_M
 = 1;

371 
MŸ‹R_P
 = 0;

373 
STATE_CCW_LONG
 : 
STATE_CCW_SHORT
 :

374 
MŸ‹R_M
 = 0;

375 
MŸ‹R_P
 = 1;

381 
	}
}

384 
	$putch¨
 (
c
)

386 
TI
 = 0;

387 
SBUF
 = 
c
;

388 
TI
==0);

389 
	}
}

391 
	$gëch¨
()

393 
c
;

394 !
RI
);

395 
c
 = 
SBUF
;

396 
RI
 = 0;

397  (
c
);

398 
	}
}

400 
	$gëch¨_nb
(* 
pcResu…
)

405 i‡(
RI
) {

406 *
pcResu…
 = 
SBUF
;

407 
RI
 = 0;

413 
	}
}

415 
	$gënumbî_ch¨
()

417 
c8Tmp
 = 0;

418 
c
;

420 
c
 = 
	`gëch¨
();

421 i‡(
c
 == '\r') {

425 
c8Tmp
 *= 10;

426 
c8Tmp
 +
c
 - '0';

429  
c8Tmp
;

430 
	}
}

433 
	$gënumbî
()

435 
i32Num
 = 0;

436 
cSign
 = 1;

437 
c
;

439 
c
 = 
	`gëch¨
();

440 i‡(
c
 == '-') {

441 
cSign
 = -1;

442 
c
 = 
	`gëch¨
();

444 i‡(
c
 == '+') {

445 
c
 = 
	`gëch¨
();

448 i‡–
c
 <= '9' && c >= '0' ) {

449 
i32Num
 *= 10;

450 
i32Num
 +
c
 - '0';

455 
c
 = 
	`gëch¨
();

457  
i32Num
*
cSign
;

458 
	}
}

461 
	$gë°rög
(* 
pcBuf
, 
aucSize
)

463 
c
;

465 
c
 = 
	`gëch¨
();

466 
	`putch¨
(
c
);

467 i‡(
c
 == '\r') {

470 *
pcBuf
 = 
c
;

471 
pcBuf
++;

472 
aucSize
--;

473 i‡(
aucSize
 == 1) {

477 *
pcBuf
 = '\0';

479 
	}
}

481 
	$chk_cw
(
UINT8
 
aucPªvSís‹
, UINT8 
aucCuºSís‹
)

483 i‡(((
aucPªvSís‹
 >> 1)&1Ë!((
aucCuºSís‹
 >> 1)&1)) {

485 i‡((
aucCuºSís‹
 >> 1)&1) {

486 i‡(
aucCuºSís‹
&1) {

494 i‡(
aucCuºSís‹
&1) {

502 i‡((
aucPªvSís‹
&1Ë!(
aucCuºSís‹
&1)) {

504 i‡(
aucCuºSís‹
&1) {

505 i‡((
aucCuºSís‹
>>1)&1) {

513 i‡((
aucCuºSís‹
>>1)&1) {

525 
	}
}

526 
	$°ï_möus
(* 
≠ucVÆ
, 
UINT16
 
auiC¡
)

529 i‡((*
≠ucVÆ
) > 0) {

530 i‡(
auiC¡
 < 10000) {

531 i‡(*
≠ucVÆ
 > 
BIG_STEP
+1) {

532 (*
≠ucVÆ
Ë-
BIG_STEP
;

535 (*
≠ucVÆ
) --;

539 (*
≠ucVÆ
) --;

542 
	}
}

544 
	$°ï_∂us
(* 
≠ucVÆ
, 
UINT16
 
auiC¡
)

547 i‡((*
≠ucVÆ
) < 255) {

548 i‡(
auiC¡
 < 10000) {

549 i‡((*
≠ucVÆ
Ë< 255 - 
BIG_STEP
 + 1) {

550 (*
≠ucVÆ
Ë+
BIG_STEP
;

553 (*
≠ucVÆ
) ++;

557 (*
≠ucVÆ
) ++;

560 
	}
}

562 
	$maö
 ()

564 
UINT8
 
u8RxUART
;

565 
UINT8
 
u8RxUARTS≥edSëtög
 = 0;

566 
bô
 
bA
 = 1;

567 
UINT16
 
u16C¡0
 = 0;

568 
i
;

569 
Së_AŒ_GPIO_Quasi_Mode
;

570 
TIMER0_MODE1_ENABLE
;

572 
	`InôülUART0_Timî3
(2400);

573 
	#ALS_OUT
 
P11


574 
P11_PushPuŒ_Mode
;

575 
	#SEL_ALS_OUT
 
P12


576 
P12_PushPuŒ_Mode
;

577 
	#UART_RXD
 
P07


578 
P07_I≈ut_Mode
;

579 
	#SEL_UART_RXD_POL
 
P04


580 
P04_PushPuŒ_Mode
;

581 
SEL_UART_RXD_POL
 = 0;

	)

583 
P03_PushPuŒ_Mode
;

585 
£t_T0M
;

587 
TH0
 = 
TH0_INIT
;

588 
TL0
 = 
TL0_INIT
;

590 
£t_ET0
;

591 
£t_EA
;

593 
£t_TR0
;

595 
P02
 = 0;

596 
P03
 = 1;

599 
i
=0;i<100;i++) {

600 
n›
;Çop;Çop;Çop;Çop;

601 
n›
;Çop;Çop;Çop;Çop;

602 
n›
;Çop;Çop;Çop;Çop;

603 
n›
;Çop;Çop;Çop;Çop;

606 i‡(
UART_RXD
 == 0) {

607 
SEL_UART_RXD_POL
 = 1;

609 
SEL_ALS_OUT
 = 0;

613 i‡(
gu16C¡0
 == 10000) {

614 
	`¥ötf_Á°_f
("timî0:%d£c\n\r",
u16C¡0
++);

615 
gu16C¡0
 = 0;

619 
iSèã
 = 
STATE_ADDR_OTHER
;

620 
iSèã_sub
 = 0;

621 
iC¡
 = 0;

622 
gucMyAddr
 = 
gpcEEPROM
[0];

624 
gucR
 = 10;

625 
gucG
 = 0;

626 
gucB
 = 0;

627 
gucW
 = 0;

628 
guSèã
 = 
STATE_GO4
;

630 
P03
 = 0;

632 i‡(
	`Re˚ive_D©a_From_UART0_nb
(&
u8RxUART
)) {

633 i‡(
u8RxUARTS≥edSëtög
) {

634 i‡((
gucMyAddr
 =0x00Ë&& ((
u8RxUART
 & 
MSK_CMD
Ë=
LINEFI_CMD_ADDRESSING
)) {

637 
gucR
 = 10;

638 
gucG
 = 0;

639 
gucB
 = 0;

640 
gucW
 = 0;

641 
guSèã
 = 
STATE_GO4
;

643 
gucMyAddr
 = 
u8RxUART
 & 
MSK_ADDR
;

644 
	`Eø£_APROM_Page
(
BASE_ADDRESS
);

645 
	`Wrôe_APROM_BYTE
(
BASE_ADDRESS
+0, 
gucMyAddr
);

647 i‡((
u8RxUART
 & 
MSK_ADDR
Ë=
gucMyAddr
) {

650 
u8RxUART
 &
MSK_CMD
;

651 
u8RxUART
) {

653 
P03
 = 1;

654 
gucR
 = 100;

655 
gucG
 = 0;

656 
gucB
 = 0;

657 
gucW
 = 0;

658 
guSèã
 = 
STATE_GO4
;

661 
P03
 = 0;

662 
gucR
 = 0;

663 
gucG
 = 100;

664 
gucB
 = 0;

665 
gucW
 = 0;

666 
guSèã
 = 
STATE_GO4
;

669 
P03
 = 1;

670 
gucR
 = 0;

671 
gucG
 = 0;

672 
gucB
 = 100;

673 
gucW
 = 0;

674 
guSèã
 = 
STATE_GO4
;

677 
P03
 = 0;

678 
gucR
 = 0;

679 
gucG
 = 0;

680 
gucB
 = 0;

681 
gucW
 = 100;

682 
guSèã
 = 
STATE_GO4
;

685 
gu8Tmp
 = 10;

686 
gucR
 = 100;

687 
gucG
 = 0;

688 
gucB
 = 0;

689 
gucW
 = 0;

690 
guSèã
 = 
STATE_GO1
;

693 
gu8Tmp
 = 5;

694 
gucR
 = 0;

695 
gucG
 = 100;

696 
gucB
 = 0;

697 
gucW
 = 0;

698 
guSèã
 = 
STATE_GO1
;

701 
gu8Tmp
 = 4;

702 
gucR
 = 0;

703 
gucG
 = 0;

704 
gucB
 = 100;

705 
gucW
 = 0;

706 
guSèã
 = 
STATE_GO1
;

709 
gu8Tmp
 = 2;

710 
gucR
 = 0;

711 
gucG
 = 0;

712 
gucB
 = 0;

713 
gucW
 = 100;

714 
guSèã
 = 
STATE_GO1
;

718 
gu8Tmp
 = 10;

719 
gucR
 = 0;

720 
gucG
 = 0;

721 
gucB
 = 0;

722 
gucW
 = 0;

723 
guSèã
 = 
STATE_GO1
;

727 i‡(((
u8RxUART
 & 
MSK_CMD
Ë=
LINEFI_CMD_ADDRESSING
Ë&& ((u8RxUART & 
MSK_ADDR
Ë=
gucMyAddr
)) {

729 
gucR
 = 0;

730 
gucG
 = 0;

731 
gucB
 = 0;

732 
gucW
 = 10;

733 
guSèã
 = 
STATE_GO4
;

743 i‡((
u8RxUART
 & 
MSK_CMD
Ë=
LINEFI_CMD_UARTSPEED
) {

744 
	`InôülUART0_Timî3
(
gpu32U¨tS≥ed
[(
u8RxUART
&
MSK_ADDR
)>>4]);

745 
u8RxUARTS≥edSëtög
 = 1;

746 
gucR
 = 20;

747 
gucG
 = 20;

748 
gucB
 = 0;

749 
gucW
 = 0;

750 
guSèã
 = 
STATE_GO4
;

757 
	}
}

	@eals_signal/src/ws2812b.c

1 
	~"ws2812b.h
"

2 
	~"Fun˘i⁄_deföe.h
"

3 
	~"N76E003.h
"

5 
	#LED_D©a
 
P11


	)

10 
	$LED__SídZîo_
()

12 
LED_D©a
 = 1;

13 
n›
;Çop;Çop;

14 
LED_D©a
 = 0;

15 
n›
;Çop;Çop;Çop;Çop;Çop;Çop;Çop;

16 
n›
;Çop;Çop;Çop;Çop;Çop;Çop;Çop;

17 
	}
}

19 
	$LED__SídO√_
()

21 
LED_D©a
 = 1;

22 
n›
;Çop;Çop;Çop;Çop;Çop;Çop;Çop;

23 
n›
;Çop;Çop;Çop;Çop;Çop;Çop;Çop;

24 
LED_D©a
 = 0;

25 
n›
;Çop;Çop;Çop;Çop;Çop;Çop;Çop;

26 
n›
;Çop;Çop;Çop;Çop;Çop;Çop;Çop;

27 
	}
}

29 
	$LED_L©ch
()

31 
a
 = 10000;

32 
LED_D©a
 = 0;

35 
a
--);

36 
	}
}

38 
	$LED__SídByã_
(
d©
)

40 if(
d©
 & 0x80Ë
	`LED__SídO√_
(); 
	`LED__SídZîo_
();

41 if(
d©
 & 0x40Ë
	`LED__SídO√_
(); 
	`LED__SídZîo_
();

42 if(
d©
 & 0x20Ë
	`LED__SídO√_
(); 
	`LED__SídZîo_
();

43 if(
d©
 & 0x10Ë
	`LED__SídO√_
(); 
	`LED__SídZîo_
();

44 if(
d©
 & 0x08Ë
	`LED__SídO√_
(); 
	`LED__SídZîo_
();

45 if(
d©
 & 0x04Ë
	`LED__SídO√_
(); 
	`LED__SídZîo_
();

46 if(
d©
 & 0x02Ë
	`LED__SídO√_
(); 
	`LED__SídZîo_
();

47 if(
d©
 & 0x01Ë
	`LED__SídO√_
(); 
	`LED__SídZîo_
();

48 
	}
}

50 
	$LED_SídRGBCﬁ‹
(
rgb_cﬁ‹_t
 *
cﬁ‹
)

52 
	`LED__SídByã_
((*
cﬁ‹
).
R
);

53 
	`LED__SídByã_
((*
cﬁ‹
).
G
);

54 
	`LED__SídByã_
((*
cﬁ‹
).
B
);

55 
	}
}

57 
	$LED_SídRGBWCﬁ‹
(
rgbw_cﬁ‹_t
 *
cﬁ‹
)

59 
	`LED__SídByã_
((*
cﬁ‹
).
R
);

60 
	`LED__SídByã_
((*
cﬁ‹
).
G
);

61 
	`LED__SídByã_
((*
cﬁ‹
).
B
);

62 
	`LED__SídByã_
((*
cﬁ‹
).
W
);

63 
	}
}

65 
	$LED_SídCﬁ‹
(
R
, 
G
, 
B
)

67 
	`LED__SídByã_
(
R
);

68 
	`LED__SídByã_
(
G
);

69 
	`LED__SídByã_
(
B
);

70 
	}
}

72 
	$LED_SídCﬁ‹RGBW
(
R
, 
G
, 
B
, 
W
)

74 
	`LED__SídByã_
(
R
);

75 
	`LED__SídByã_
(
G
);

76 
	`LED__SídByã_
(
B
);

77 
	`LED__SídByã_
(
W
);

78 
	}
}

80 
	$LED_SídRGBD©a
(
rgb_cﬁ‹_t
 *
cﬁ‹s
, 
cou¡
)

82 
cou¡
--) {

83 
	`LED_SídRGBCﬁ‹
(
cﬁ‹s
++);

85 
	`LED_L©ch
();

86 
	}
}

88 
	$LED_SídRGBWD©a
(
rgbw_cﬁ‹_t
 *
cﬁ‹s
, 
cou¡
)

90 
cou¡
--) {

91 
	`LED_SídRGBWCﬁ‹
(
cﬁ‹s
++);

93 
	`LED_L©ch
();

94 
	}
}

	@eals_signal/src/ws2812b.h

1 #i‚de‡
__WS2812B_H__


2 
	#__WS2812B_H__


	)

7 
	s_RGBCﬁ‹
 {

8 
	mR
;

9 
	mG
;

10 
	mB
;

11 } 
	trgb_cﬁ‹_t
;

14 
	mR
;

15 
	mG
;

16 
	mB
;

17 
	mW
;

18 } 
	trgbw_cﬁ‹_t
;

20 
LED__SídZîo__
();

21 
LED__SídO√__
();

22 
LED__SídByã__
();

23 
LED_L©ch
();

25 
LED_SídRGBCﬁ‹
(
rgb_cﬁ‹_t
*);

26 
LED_SídRGBWCﬁ‹
(
rgbw_cﬁ‹_t
 *
cﬁ‹
);

27 
LED_SídCﬁ‹
(, , );

28 
LED_SídCﬁ‹RGBW
(
R
, 
G
, 
B
, 
W
);

29 
LED_SídRGBD©a
(
rgb_cﬁ‹_t
*, );

30 
LED_SídRGBWD©a
(
rgbw_cﬁ‹_t
 *
cﬁ‹s
, 
cou¡
);

	@inc/Common.h

1 #i‚de‡
__COMMON__


2 
	#__COMMON__


	)

3 
__bô
 
	tBIT
;

4 
__bô
 
	tbô
;

5 
	tUINT8
;

6 
	tuöt8
;

7 
	tUINT16
;

8 
	tuöt16
;

9 
	tUINT32
;

10 
	tuöt32
;

12 
	tuöt8_t
;

13 
	tuöt16_t
;

14 
	tuöt32_t
;

17 
	#CID_READ
 0x0B

	)

18 
	#DID_READ
 0x0C

	)

20 
	#ERASE_APROM
 0x22

	)

21 
	#READ_APROM
 0x00

	)

22 
	#PROGRAM_APROM
 0x21

	)

23 
	#ERASE_LDROM


	)

24 
	#READ_LDROM


	)

25 
	#PROGRAM_LDROM


	)

26 
	#READ_CFG
 0xC0

	)

27 
	#PROGRAM_CFG
 0xE1

	)

28 
	#READ_UID
 0x04

	)

30 #i‚de‡
TOGGLE


31 
	#TOGGLE
(
X
ËX=((X==1)?0:1);

	)

34 #i‚de‡
MAX


35 
	#MAX
(
a
, 
b
Ë(◊ < bË? b :á)

	)

37 #i‚de‡
MIN


38 
	#MIN
(
a
, 
b
Ë(◊ > bË? b :á)

	)

41 
__bô
 
BIT_TMP
;

	@inc/Delay.h

1 #i‚de‡
__DELAY_FUNC__


2 
	#__DELAY_FUNC__


	)

4 
Timî0_Dñay100us
(
UINT32
 
u32CNT
);

5 
Timî0_Dñay1ms
(
UINT32
 
u32CNT
);

6 
Timî1_Dñay10ms
(
UINT32
 
u32CNT
);

7 
Timî2_Dñay500us
(
UINT32
 
u32CNT
);

8 
Timî3_Dñay100ms
(
UINT32
 
u32CNT
);

10 
Timî0_Dñay40ms
(
UINT32
 
u32CNT
);

11 
Timî3_Dñay10us
(
UINT32
 
u32CNT
);

	@inc/Function_define.h

1 #i‚de‡
__FUNC_DEFINE__


2 
	#__FUNC_DEFINE__


	)

9 
	~<°dio.h
>

11 
	#n›
 
	`__asm__
 ("NOP");

	)

14 
	#HIBYTE
(
v1
Ë((
UINT8
)((v1)>>8))

15 
	#LOBYTE
(
v1
Ë((
UINT8
)((v1)&0xFF))

	)

17 
	#MAKEWORD
(
v1
,
v2
Ë((((
UINT16
)(v1))<<8)+(UINT16)(v2))

19 
	#MAKELONG
(
v1
,
v2
,
v3
,
v4
Ë(
UINT32
)((v1<<32)+(v2<<16)+(v3<<8)+v4)

21 
	#YBYTE1
(
v1
Ë((
UINT16
)((v1)>>16))

22 
	#YBYTE0
(
v1
Ë((
UINT16
)((v1)&0xFFFF))

	)

24 
	#TBYTE3
(
v1
Ë((
UINT8
)((v1)>>24))

25 
	#TBYTE2
(
v1
Ë((
UINT8
)((v1)>>16))

	)

26 
	#TBYTE1
(
v1
Ë((
UINT8
)((v1)>>8))

	)

27 
	#TBYTE0
(
v1
Ë((
UINT8
)((v1)&0xFF))

	)

29 
	#SET_BIT0
 0x01

	)

30 
	#SET_BIT1
 0x02

	)

31 
	#SET_BIT2
 0x04

	)

32 
	#SET_BIT3
 0x08

	)

33 
	#SET_BIT4
 0x10

	)

34 
	#SET_BIT5
 0x20

	)

35 
	#SET_BIT6
 0x40

	)

36 
	#SET_BIT7
 0x80

	)

37 
	#SET_BIT8
 0x0100

	)

38 
	#SET_BIT9
 0x0200

	)

39 
	#SET_BIT10
 0x0400

	)

40 
	#SET_BIT11
 0x0800

	)

41 
	#SET_BIT12
 0x1000

	)

42 
	#SET_BIT13
 0x2000

	)

43 
	#SET_BIT14
 0x4000

	)

44 
	#SET_BIT15
 0x8000

	)

46 
	#CLR_BIT0
 0xFE

	)

47 
	#CLR_BIT1
 0xFD

	)

48 
	#CLR_BIT2
 0xFB

	)

49 
	#CLR_BIT3
 0xF7

	)

50 
	#CLR_BIT4
 0xEF

	)

51 
	#CLR_BIT5
 0xDF

	)

52 
	#CLR_BIT6
 0xBF

	)

53 
	#CLR_BIT7
 0x7F

	)

55 
	#CLR_BIT8
 0xFEFF

	)

56 
	#CLR_BIT9
 0xFDFF

	)

57 
	#CLR_BIT10
 0xFBFF

	)

58 
	#CLR_BIT11
 0xF7FF

	)

59 
	#CLR_BIT12
 0xEFFF

	)

60 
	#CLR_BIT13
 0xDFFF

	)

61 
	#CLR_BIT14
 0xBFFF

	)

62 
	#CLR_BIT15
 0x7FFF

	)

64 
	#FAIL
 1

	)

65 
	#PASS
 0

	)

71 
	#P00_Quasi_Mode
 
P0M1
&=~
SET_BIT0
;
P0M2
&=~
	)
SET_BIT0

72 
	#P01_Quasi_Mode
 
P0M1
&=~
SET_BIT1
;
P0M2
&=~
	)
SET_BIT1

73 
	#P02_Quasi_Mode
 
P0M1
&=~
SET_BIT2
;
P0M2
&=~
	)
SET_BIT2

74 
	#P03_Quasi_Mode
 
P0M1
&=~
SET_BIT3
;
P0M2
&=~
	)
SET_BIT3

75 
	#P04_Quasi_Mode
 
P0M1
&=~
SET_BIT4
;
P0M2
&=~
	)
SET_BIT4

76 
	#P05_Quasi_Mode
 
P0M1
&=~
SET_BIT5
;
P0M2
&=~
	)
SET_BIT5

77 
	#P06_Quasi_Mode
 
P0M1
&=~
SET_BIT6
;
P0M2
&=~
	)
SET_BIT6

78 
	#P07_Quasi_Mode
 
P0M1
&=~
SET_BIT7
;
P0M2
&=~
	)
SET_BIT7

79 
	#P10_Quasi_Mode
 
P1M1
&=~
SET_BIT0
;
P1M2
&=~
	)
SET_BIT0

80 
	#P11_Quasi_Mode
 
P1M1
&=~
SET_BIT1
;
P1M2
&=~
	)
SET_BIT1

81 
	#P12_Quasi_Mode
 
P1M1
&=~
SET_BIT2
;
P1M2
&=~
	)
SET_BIT2

82 
	#P13_Quasi_Mode
 
P1M1
&=~
SET_BIT3
;
P1M2
&=~
	)
SET_BIT3

83 
	#P14_Quasi_Mode
 
P1M1
&=~
SET_BIT4
;
P1M2
&=~
	)
SET_BIT4

84 
	#P15_Quasi_Mode
 
P1M1
&=~
SET_BIT5
;
P1M2
&=~
	)
SET_BIT5

85 
	#P16_Quasi_Mode
 
P1M1
&=~
SET_BIT6
;
P1M2
&=~
	)
SET_BIT6

86 
	#P17_Quasi_Mode
 
P1M1
&=~
SET_BIT7
;
P1M2
&=~
	)
SET_BIT7

87 
	#P30_Quasi_Mode
 
P3M1
&=~
SET_BIT0
;
P3M2
&=~
	)
SET_BIT0

89 
	#P00_PushPuŒ_Mode
 
P0M1
&=~
SET_BIT0
;
P0M2
|=
	)
SET_BIT0

90 
	#P01_PushPuŒ_Mode
 
P0M1
&=~
SET_BIT1
;
P0M2
|=
	)
SET_BIT1

91 
	#P02_PushPuŒ_Mode
 
P0M1
&=~
SET_BIT2
;
P0M2
|=
	)
SET_BIT2

92 
	#P03_PushPuŒ_Mode
 
P0M1
&=~
SET_BIT3
;
P0M2
|=
	)
SET_BIT3

93 
	#P04_PushPuŒ_Mode
 
P0M1
&=~
SET_BIT4
;
P0M2
|=
	)
SET_BIT4

94 
	#P05_PushPuŒ_Mode
 
P0M1
&=~
SET_BIT5
;
P0M2
|=
	)
SET_BIT5

95 
	#P06_PushPuŒ_Mode
 
P0M1
&=~
SET_BIT6
;
P0M2
|=
	)
SET_BIT6

96 
	#P07_PushPuŒ_Mode
 
P0M1
&=~
SET_BIT7
;
P0M2
|=
	)
SET_BIT7

97 
	#P10_PushPuŒ_Mode
 
P1M1
&=~
SET_BIT0
;
P1M2
|=
	)
SET_BIT0

98 
	#P11_PushPuŒ_Mode
 
P1M1
&=~
SET_BIT1
;
P1M2
|=
	)
SET_BIT1

99 
	#P12_PushPuŒ_Mode
 
P1M1
&=~
SET_BIT2
;
P1M2
|=
	)
SET_BIT2

100 
	#P13_PushPuŒ_Mode
 
P1M1
&=~
SET_BIT3
;
P1M2
|=
	)
SET_BIT3

101 
	#P14_PushPuŒ_Mode
 
P1M1
&=~
SET_BIT4
;
P1M2
|=
	)
SET_BIT4

102 
	#P15_PushPuŒ_Mode
 
P1M1
&=~
SET_BIT5
;
P1M2
|=
	)
SET_BIT5

103 
	#P16_PushPuŒ_Mode
 
P1M1
&=~
SET_BIT6
;
P1M2
|=
	)
SET_BIT6

104 
	#P17_PushPuŒ_Mode
 
P1M1
&=~
SET_BIT7
;
P1M2
|=
	)
SET_BIT7

105 
	#P30_PushPuŒ_Mode
 
P3M1
&=~
SET_BIT0
;
P3M2
|=
	)
SET_BIT0

106 
	#GPIO1_PushPuŒ_Mode
 
P1M1
&=~
SET_BIT0
;
P1M2
|=
	)
SET_BIT0

108 
	#P00_I≈ut_Mode
 
P0M1
|=
SET_BIT0
;
P0M2
&=~
	)
SET_BIT0

109 
	#P01_I≈ut_Mode
 
P0M1
|=
SET_BIT1
;
P0M2
&=~
	)
SET_BIT1

110 
	#P02_I≈ut_Mode
 
P0M1
|=
SET_BIT2
;
P0M2
&=~
	)
SET_BIT2

111 
	#P03_I≈ut_Mode
 
P0M1
|=
SET_BIT3
;
P0M2
&=~
	)
SET_BIT3

112 
	#P04_I≈ut_Mode
 
P0M1
|=
SET_BIT4
;
P0M2
&=~
	)
SET_BIT4

113 
	#P05_I≈ut_Mode
 
P0M1
|=
SET_BIT5
;
P0M2
&=~
	)
SET_BIT5

114 
	#P06_I≈ut_Mode
 
P0M1
|=
SET_BIT6
;
P0M2
&=~
	)
SET_BIT6

115 
	#P07_I≈ut_Mode
 
P0M1
|=
SET_BIT7
;
P0M2
&=~
	)
SET_BIT7

116 
	#P10_I≈ut_Mode
 
P1M1
|=
SET_BIT0
;
P1M2
&=~
	)
SET_BIT0

117 
	#P11_I≈ut_Mode
 
P1M1
|=
SET_BIT1
;
P1M2
&=~
	)
SET_BIT1

118 
	#P12_I≈ut_Mode
 
P1M1
|=
SET_BIT2
;
P1M2
&=~
	)
SET_BIT2

119 
	#P13_I≈ut_Mode
 
P1M1
|=
SET_BIT3
;
P1M2
&=~
	)
SET_BIT3

120 
	#P14_I≈ut_Mode
 
P1M1
|=
SET_BIT4
;
P1M2
&=~
	)
SET_BIT4

121 
	#P15_I≈ut_Mode
 
P1M1
|=
SET_BIT5
;
P1M2
&=~
	)
SET_BIT5

122 
	#P16_I≈ut_Mode
 
P1M1
|=
SET_BIT6
;
P1M2
&=~
	)
SET_BIT6

123 
	#P17_I≈ut_Mode
 
P1M1
|=
SET_BIT7
;
P1M2
&=~
	)
SET_BIT7

124 
	#P30_I≈ut_Mode
 
P3M1
|=
SET_BIT0
;
P3M2
&=~
	)
SET_BIT0

126 
	#P00_O≥nDøö_Mode
 
P0M1
|=
SET_BIT0
;
P0M2
|=
	)
SET_BIT0

127 
	#P01_O≥nDøö_Mode
 
P0M1
|=
SET_BIT1
;
P0M2
|=
	)
SET_BIT1

128 
	#P02_O≥nDøö_Mode
 
P0M1
|=
SET_BIT2
;
P0M2
|=
	)
SET_BIT2

129 
	#P03_O≥nDøö_Mode
 
P0M1
|=
SET_BIT3
;
P0M2
|=
	)
SET_BIT3

130 
	#P04_O≥nDøö_Mode
 
P0M1
|=
SET_BIT4
;
P0M2
|=
	)
SET_BIT4

131 
	#P05_O≥nDøö_Mode
 
P0M1
|=
SET_BIT5
;
P0M2
|=
	)
SET_BIT5

132 
	#P06_O≥nDøö_Mode
 
P0M1
|=
SET_BIT6
;
P0M2
|=
	)
SET_BIT6

133 
	#P07_O≥nDøö_Mode
 
P0M1
|=
SET_BIT7
;
P0M2
|=
	)
SET_BIT7

134 
	#P10_O≥nDøö_Mode
 
P1M1
|=
SET_BIT0
;
P1M2
|=
	)
SET_BIT0

135 
	#P11_O≥nDøö_Mode
 
P1M1
|=
SET_BIT1
;
P1M2
|=
	)
SET_BIT1

136 
	#P12_O≥nDøö_Mode
 
P1M1
|=
SET_BIT2
;
P1M2
|=
	)
SET_BIT2

137 
	#P13_O≥nDøö_Mode
 
P1M1
|=
SET_BIT3
;
P1M2
|=
	)
SET_BIT3

138 
	#P14_O≥nDøö_Mode
 
P1M1
|=
SET_BIT4
;
P1M2
|=
	)
SET_BIT4

139 
	#P15_O≥nDøö_Mode
 
P1M1
|=
SET_BIT5
;
P1M2
|=
	)
SET_BIT5

140 
	#P16_O≥nDøö_Mode
 
P1M1
|=
SET_BIT6
;
P1M2
|=
	)
SET_BIT6

141 
	#P17_O≥nDøö_Mode
 
P1M1
|=
SET_BIT7
;
P1M2
|=
	)
SET_BIT7

142 
	#P30_O≥nDøö_Mode
 
P3M1
|=
SET_BIT0
;
P3M2
|=
	)
SET_BIT0

144 
	#Së_AŒ_GPIO_Quasi_Mode
 
P0M1
=0;
P0M2
=0;
P1M1
=0;
P1M2
=0;
P3M1
=0;
P3M2
=0

	)

146 
	#£t_GPIO1
 
P12
=1

	)

147 
	#˛r_GPIO1
 
P12
=0

	)

152 
	#E«bÀ_INT_P‹t0
 
PICON
 &0xFB;

	)

153 
	#E«bÀ_INT_P‹t1
 
PICON
 |0x01;

	)

154 
	#E«bÀ_INT_P‹t2
 
PICON
 |0x02;

	)

155 
	#E«bÀ_INT_P‹t3
 
PICON
 |0x03;

	)

159 
	#E«bÀ_BIT7_LowLevñ_Trig
 
PICON
&=0x7F;
PINEN
|=0x80;
PIPEN
&=0x7F

	)

160 
	#E«bÀ_BIT6_LowLevñ_Trig
 
PICON
&=0x7F;
PINEN
|=0x40;
PIPEN
&=0xBF

	)

161 
	#E«bÀ_BIT5_LowLevñ_Trig
 
PICON
&=0xBF;
PINEN
|=0x20;
PIPEN
&=0xDF

	)

162 
	#E«bÀ_BIT4_LowLevñ_Trig
 
PICON
&=0xBF;
PINEN
|=0x10;
PIPEN
&=0xEF

	)

163 
	#E«bÀ_BIT3_LowLevñ_Trig
 
PICON
&=0xDF;
PINEN
|=0x08;
PIPEN
&=0xF7

	)

164 
	#E«bÀ_BIT2_LowLevñ_Trig
 
PICON
&=0xEF;
PINEN
|=0x04;
PIPEN
&=0xFB

	)

165 
	#E«bÀ_BIT1_LowLevñ_Trig
 
PICON
&=0xF7;
PINEN
|=0x02;
PIPEN
&=0xFD

	)

166 
	#E«bÀ_BIT0_LowLevñ_Trig
 
PICON
&=0xFD;
PINEN
|=0x01;
PIPEN
&=0xFE

	)

170 
	#E«bÀ_BIT7_HighLevñ_Trig
 
PICON
&=0x7F;
PINEN
&=0x7F;
PIPEN
|=0x80

	)

171 
	#E«bÀ_BIT6_HighLevñ_Trig
 
PICON
&=0x7F;
PINEN
&=0xBF;
PIPEN
|=0x40

	)

172 
	#E«bÀ_BIT5_HighLevñ_Trig
 
PICON
&=0xBF;
PINEN
&=0xDF;
PIPEN
|=0x20

	)

173 
	#E«bÀ_BIT4_HighLevñ_Trig
 
PICON
&=0xBF;
PINEN
&=0xEF;
PIPEN
|=0x10

	)

174 
	#E«bÀ_BIT3_HighLevñ_Trig
 
PICON
&=0xDF;
PINEN
&=0xF7;
PIPEN
|=0x08

	)

175 
	#E«bÀ_BIT2_HighLevñ_Trig
 
PICON
&=0xEF;
PINEN
&=0xFB;
PIPEN
|=0x04

	)

176 
	#E«bÀ_BIT1_HighLevñ_Trig
 
PICON
&=0xF7;
PINEN
&=0xFD;
PIPEN
|=0x02

	)

177 
	#E«bÀ_BIT0_HighLevñ_Trig
 
PICON
&=0xFD;
PINEN
&=0xFE;
PIPEN
|=0x01

	)

181 
	#E«bÀ_BIT7_FÆlEdge_Trig
 
PICON
|=0x80;
PINEN
|=0x80;
PIPEN
&=0x7F

	)

182 
	#E«bÀ_BIT6_FÆlEdge_Trig
 
PICON
|=0x80;
PINEN
|=0x40;
PIPEN
&=0xBF

	)

183 
	#E«bÀ_BIT5_FÆlEdge_Trig
 
PICON
|=0x40;
PINEN
|=0x20;
PIPEN
&=0xDF

	)

184 
	#E«bÀ_BIT4_FÆlEdge_Trig
 
PICON
|=0x40;
PINEN
|=0x10;
PIPEN
&=0xEF

	)

185 
	#E«bÀ_BIT3_FÆlEdge_Trig
 
PICON
|=0x20;
PINEN
|=0x08;
PIPEN
&=0xF7

	)

186 
	#E«bÀ_BIT2_FÆlEdge_Trig
 
PICON
|=0x10;
PINEN
|=0x04;
PIPEN
&=0xFB

	)

187 
	#E«bÀ_BIT1_FÆlEdge_Trig
 
PICON
|=0x08;
PINEN
|=0x02;
PIPEN
&=0xFD

	)

188 
	#E«bÀ_BIT0_FÆlEdge_Trig
 
PICON
|=0x04;
PINEN
|=0x01;
PIPEN
&=0xFE

	)

192 
	#E«bÀ_BIT7_RisögEdge_Trig
 
PICON
|=0x80;
PINEN
&=0x7F;
PIPEN
|=0x80

	)

193 
	#E«bÀ_BIT6_RisögEdge_Trig
 
PICON
|=0x80;
PINEN
&=0xBF;
PIPEN
|=0x40

	)

194 
	#E«bÀ_BIT5_RisögEdge_Trig
 
PICON
|=0x40;
PINEN
&=0xDF;
PIPEN
|=0x20

	)

195 
	#E«bÀ_BIT4_RisögEdge_Trig
 
PICON
|=0x40;
PINEN
&=0xEF;
PIPEN
|=0x10

	)

196 
	#E«bÀ_BIT3_RisögEdge_Trig
 
PICON
|=0x20;
PINEN
&=0xF7;
PIPEN
|=0x08

	)

197 
	#E«bÀ_BIT2_RisögEdge_Trig
 
PICON
|=0x10;
PINEN
&=0xFB;
PIPEN
|=0x04

	)

198 
	#E«bÀ_BIT1_RisögEdge_Trig
 
PICON
|=0x08;
PINEN
&=0xFD;
PIPEN
|=0x02

	)

199 
	#E«bÀ_BIT0_RisögEdge_Trig
 
PICON
|=0x04;
PINEN
&=0xFE;
PIPEN
|=0x01

	)

204 
	#E«bÀ_BIT7_BŸhEdge_Trig
 
PICON
|=0x80;
PINEN
|=0x80;
PIPEN
|=0x80

	)

205 
	#E«bÀ_BIT6_BŸhEdge_Trig
 
PICON
|=0x80;
PINEN
|=0x40;
PIPEN
|=0x40

	)

206 
	#E«bÀ_BIT5_BŸhEdge_Trig
 
PICON
|=0x40;
PINEN
|=0x20;
PIPEN
|=0x20

	)

207 
	#E«bÀ_BIT4_BŸhEdge_Trig
 
PICON
|=0x40;
PINEN
|=0x10;
PIPEN
|=0x10

	)

208 
	#E«bÀ_BIT3_BŸhEdge_Trig
 
PICON
|=0x20;
PINEN
|=0x08;
PIPEN
|=0x08

	)

209 
	#E«bÀ_BIT2_BŸhEdge_Trig
 
PICON
|=0x10;
PINEN
|=0x04;
PIPEN
|=0x04

	)

210 
	#E«bÀ_BIT1_BŸhEdge_Trig
 
PICON
|=0x08;
PINEN
|=0x02;
PIPEN
|=0x02

	)

211 
	#E«bÀ_BIT0_BŸhEdge_Trig
 
PICON
|=0x04;
PINEN
|=0x01;
PIPEN
|=0x01

	)

219 #ifde‡
FOSC_110592


220 
	#TIMER_DIV12_VALUE_10us
 65536-9

221 
	#TIMER_DIV12_VALUE_1ms
 65536-923

222 
	#TIMER_DIV12_VALUE_10ms
 65536-9216

223 
	#TIMER_DIV4_VALUE_10us
 65536-28

224 
	#TIMER_DIV4_VALUE_1ms
 65536-2765

225 
	#TIMER_DIV4_VALUE_100us
 65536-277

226 
	#TIMER_DIV4_VALUE_200us
 65536-553

227 
	#TIMER_DIV4_VALUE_500us
 65536-1383

228 
	#TIMER_DIV16_VALUE_10ms
 65536-6912

229 
	#TIMER_DIV64_VALUE_30ms
 65536-5184

230 
	#TIMER_DIV128_VALUE_100ms
 65536-8640

231 
	#TIMER_DIV128_VALUE_200ms
 65536-17280

232 
	#TIMER_DIV256_VALUE_500ms
 65536-21600

233 
	#TIMER_DIV512_VALUE_1s
 65536-21600

235 #ifde‡
FOSC_160000


236 
	#TIMER_DIV12_VALUE_10us
 65536-13

237 
	#TIMER_DIV12_VALUE_100us
 65536-130

238 
	#TIMER_DIV12_VALUE_1ms
 65536-1334

239 
	#TIMER_DIV12_VALUE_10ms
 65536-13334

240 
	#TIMER_DIV12_VALUE_40ms
 65536-53336

241 
	#TIMER_DIV4_VALUE_10us
 65536-40

242 
	#TIMER_DIV4_VALUE_100us
 65536-400

243 
	#TIMER_DIV4_VALUE_200us
 65536-800

244 
	#TIMER_DIV4_VALUE_500us
 65536-2000

245 
	#TIMER_DIV4_VALUE_1ms
 65536-4000

246 
	#TIMER_DIV16_VALUE_10ms
 65536-10000

247 
	#TIMER_DIV64_VALUE_30ms
 65536-7500

248 
	#TIMER_DIV128_VALUE_100ms
 65536-12500

249 
	#TIMER_DIV128_VALUE_200ms
 65536-25000

250 
	#TIMER_DIV256_VALUE_500ms
 65536-31250

251 
	#TIMER_DIV512_VALUE_1s
 65536-31250

253 #ifde‡
FOSC_166000


254 
	#TIMER_DIV12_VALUE_10us
 65536-13

255 
	#TIMER_DIV12_VALUE_100us
 65536-138

256 
	#TIMER_DIV12_VALUE_1ms
 65536-1384

257 
	#TIMER_DIV12_VALUE_10ms
 65536-13834

258 
	#TIMER_DIV12_VALUE_40ms
 65536-55334

259 
	#TIMER_DIV4_VALUE_10us
 65536-41

260 
	#TIMER_DIV4_VALUE_100us
 65536-415

261 
	#TIMER_DIV4_VALUE_200us
 65536-830

262 
	#TIMER_DIV4_VALUE_500us
 65536-2075

263 
	#TIMER_DIV4_VALUE_1ms
 65536-4150

264 
	#TIMER_DIV16_VALUE_10ms
 65536-10375

265 
	#TIMER_DIV64_VALUE_30ms
 65536-7781

266 
	#TIMER_DIV128_VALUE_100ms
 65536-12969

267 
	#TIMER_DIV128_VALUE_200ms
 65536-25938

268 
	#TIMER_DIV256_VALUE_500ms
 65536-32422

269 
	#TIMER_DIV512_VALUE_1s
 65536-32422

271 #ifde‡
FOSC_184320


272 
	#TIMER_DIV12_VALUE_10us
 65536-15

273 
	#TIMER_DIV12_VALUE_1ms
 65536-1536

274 
	#TIMER_DIV4_VALUE_10us
 65536-46

275 
	#TIMER_DIV4_VALUE_1ms
 65536-4608

277 #ifde‡
FOSC_200000


278 
	#TIMER_DIV12_VALUE_10us
 65536-17

279 
	#TIMER_DIV12_VALUE_1ms
 65536-1667

280 
	#TIMER_DIV4_VALUE_10us
 65536-50

281 
	#TIMER_DIV4_VALUE_1ms
 65536-5000

283 #ifde‡
FOSC_221184


284 
	#TIMER_DIV12_VALUE_10us
 65536-18

285 
	#TIMER_DIV12_VALUE_1ms
 65536-1843

286 
	#TIMER_DIV12_VALUE_10ms
 65536-18432

287 
	#TIMER_DIV4_VALUE_10us
 65536-56

288 
	#TIMER_DIV4_VALUE_1ms
 65536-5530

289 
	#TIMER_DIV4_VALUE_100us
 65536-553

290 
	#TIMER_DIV4_VALUE_200us
 65536-1106

291 
	#TIMER_DIV4_VALUE_500us
 65536-2765

292 
	#TIMER_DIV16_VALUE_10ms
 65536-13824

293 
	#TIMER_DIV64_VALUE_30ms
 65536-10368

294 
	#TIMER_DIV128_VALUE_100ms
 65536-17280

295 
	#TIMER_DIV128_VALUE_200ms
 65536-34560

296 
	#TIMER_DIV256_VALUE_500ms
 65536-43200

297 
	#TIMER_DIV512_VALUE_1s
 65536-43200

299 #ifde‡
FOSC_240000


300 
	#TIMER_DIV12_VALUE_10us
 65536-20

301 
	#TIMER_DIV12_VALUE_1ms
 65536-2000

302 
	#TIMER_DIV12_VALUE_10ms
 65536-20000

303 
	#TIMER_DIV4_VALUE_10us
 65536-60

304 
	#TIMER_DIV4_VALUE_100us
 65536-600

305 
	#TIMER_DIV4_VALUE_200us
 65536-1200

306 
	#TIMER_DIV4_VALUE_500us
 65536-3000

307 
	#TIMER_DIV4_VALUE_1ms
 65536-6000

308 
	#TIMER_DIV16_VALUE_10ms
 65536-15000

309 
	#TIMER_DIV64_VALUE_30ms
 65536-11250

310 
	#TIMER_DIV128_VALUE_100ms
 65536-18750

311 
	#TIMER_DIV128_VALUE_200ms
 65536-37500

312 
	#TIMER_DIV256_VALUE_500ms
 65536-46875

313 
	#TIMER_DIV512_VALUE_1s
 65536-46875

316 
	#TIMER1_MODE0_ENABLE
 
TMOD
&=0x0F

	)

317 
	#TIMER1_MODE1_ENABLE
 
TMOD
&=0x0F;TMOD|=0x10

	)

318 
	#TIMER1_MODE2_ENABLE
 
TMOD
&=0x0F;TMOD|=0x20

	)

319 
	#TIMER1_MODE3_ENABLE
 
TMOD
&=0x0F;TMOD|=0x30

	)

321 
	#TIMER0_MODE0_ENABLE
 
TMOD
&=0xF0

	)

322 
	#TIMER0_MODE1_ENABLE
 
TMOD
&=0xF0;TMOD|=0x01

	)

323 
	#TIMER0_MODE2_ENABLE
 
TMOD
&=0xF0;TMOD|=0x02

	)

324 
	#TIMER0_MODE3_ENABLE
 
TMOD
&=0xF0;TMOD|=0x03

	)

326 
	#TIMER2_DIV_4
 
T2MOD
|=0x10;T2MOD&=0x9F

	)

327 
	#TIMER2_DIV_16
 
T2MOD
|=0x20;T2MOD&=0xAF

	)

328 
	#TIMER2_DIV_32
 
T2MOD
|=0x30;T2MOD&=0xBF

	)

329 
	#TIMER2_DIV_64
 
T2MOD
|=0x40;T2MOD&=0xCF

	)

330 
	#TIMER2_DIV_128
 
T2MOD
|=0x50;T2MOD&=0xDF

	)

331 
	#TIMER2_DIV_256
 
T2MOD
|=0x60;T2MOD&=0xEF

	)

332 
	#TIMER2_DIV_512
 
T2MOD
|=0x70

	)

333 
	#TIMER2_Auto_Rñﬂd_Dñay_Mode
 
T2CON
&=~
SET_BIT0
;
T2MOD
|=
SET_BIT7
;T2MOD|=
SET_BIT3


	)

334 
	#TIMER2_Com∑ª_C≠tuª_Mode
 
T2CON
|=
SET_BIT0
;
T2MOD
&=~
SET_BIT7
;T2MOD|=
SET_BIT2


	)

336 
	#TIMER2_CAP0_C≠tuª_Mode
 
T2CON
&=~
SET_BIT0
;
T2MOD
=0x89

	)

337 
	#TIMER2_CAP1_C≠tuª_Mode
 
T2CON
&=~
SET_BIT0
;
T2MOD
=0x8A

	)

338 
	#TIMER2_CAP2_C≠tuª_Mode
 
T2CON
&=~
SET_BIT0
;
T2MOD
=0x8B

	)

342 
	#IC0_P12_CAP0_FÆlögEdge_C≠tuª
 
CAPCON1
&=0xFC;
CAPCON3
&=0xF0;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=
	)
SET_BIT4

343 
	#IC1_P11_CAP0_FÆlögEdge_C≠tuª
 
CAPCON1
&=0xFC;
CAPCON3
&=0xF0;CAPCON3|=0x01;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=
	)
SET_BIT4

344 
	#IC2_P10_CAP0_FÆlögEdge_C≠tuª
 
CAPCON1
&=0xFC;
CAPCON3
&=0xF0;CAPCON3|=0x02;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=
	)
SET_BIT4

345 
	#IC3_P00_CAP0_FÆlögEdge_C≠tuª
 
CAPCON1
&=0xFC;
CAPCON3
&=0xF0;CAPCON3|=0x03;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=
	)
SET_BIT4

346 
	#IC3_P04_CAP0_FÆlögEdge_C≠tuª
 
CAPCON1
&=0xFC;
CAPCON3
&=0xF0;CAPCON3|=0x04;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=
	)
SET_BIT4

347 
	#IC4_P01_CAP0_FÆlögEdge_C≠tuª
 
CAPCON1
&=0xFC;
CAPCON3
&=0xF0;CAPCON3|=0x05;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=
	)
SET_BIT4

348 
	#IC5_P03_CAP0_FÆlögEdge_C≠tuª
 
CAPCON1
&=0xFC;
CAPCON3
&=0xF0;CAPCON3|=0x06;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=
	)
SET_BIT4

349 
	#IC6_P05_CAP0_FÆlögEdge_C≠tuª
 
CAPCON1
&=0xFC;
CAPCON3
&=0xF0;CAPCON3|=0x07;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=
	)
SET_BIT4

350 
	#IC7_P15_CAP0_FÆlögEdge_C≠tuª
 
CAPCON1
&=0xFC;
CAPCON3
&=0xF0;CAPCON3|=0x08;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=
	)
SET_BIT4

352 
	#IC0_P12_CAP1_FÆlögEdge_C≠tuª
 
CAPCON1
&=0xF3;
CAPCON3
&=0x0F;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=
	)
SET_BIT5

353 
	#IC1_P11_CAP1_FÆlögEdge_C≠tuª
 
CAPCON1
&=0xF3;
CAPCON3
&=0x0F;CAPCON3|=0x10;
CAPCON0
|=
SET_BIT5
;CAPCON0|=
	)
SET_BIT5

354 
	#IC2_P10_CAP1_FÆlögEdge_C≠tuª
 
CAPCON1
&=0xF3;
CAPCON3
&=0x0F;CAPCON3|=0x20;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=
	)
SET_BIT5

355 
	#IC3_P00_CAP1_FÆlögEdge_C≠tuª
 
CAPCON1
&=0xF3;
CAPCON3
&=0x0F;CAPCON3|=0x30;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=
	)
SET_BIT5

356 
	#IC3_P04_CAP1_FÆlögEdge_C≠tuª
 
CAPCON1
&=0xF3;
CAPCON3
&=0x0F;CAPCON3|=0x40;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=
	)
SET_BIT5

357 
	#IC4_P01_CAP1_FÆlögEdge_C≠tuª
 
CAPCON1
&=0xF3;
CAPCON3
&=0x0F;CAPCON3|=0x50;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=
	)
SET_BIT5

358 
	#IC5_P03_CAP1_FÆlögEdge_C≠tuª
 
CAPCON1
&=0xF3;
CAPCON3
&=0x0F;CAPCON3|=0x60;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=
	)
SET_BIT5

359 
	#IC6_P05_CAP1_FÆlögEdge_C≠tuª
 
CAPCON1
&=0xF3;
CAPCON3
&=0x0F;CAPCON3|=0x70;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=
	)
SET_BIT5

360 
	#IC7_P15_CAP1_FÆlögEdge_C≠tuª
 
CAPCON1
&=0xF3;
CAPCON3
&=0x0F;CAPCON3|=0x80;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=
	)
SET_BIT5

362 
	#IC0_P12_CAP2_FÆlögEdge_C≠tuª
 
CAPCON1
&=0x0F;
CAPCON4
&=0xF0;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=
	)
SET_BIT6

363 
	#IC1_P11_CAP2_FÆlögEdge_C≠tuª
 
CAPCON1
&=0x0F;
CAPCON4
&=0xF0;CAPCON4|=0x10;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=
	)
SET_BIT6

364 
	#IC2_P10_CAP2_FÆlögEdge_C≠tuª
 
CAPCON1
&=0x0F;
CAPCON4
&=0xF0;CAPCON4|=0x20;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=
	)
SET_BIT6

365 
	#IC3_P00_CAP2_FÆlögEdge_C≠tuª
 
CAPCON1
&=0x0F;
CAPCON4
&=0xF0;CAPCON4|=0x30;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=
	)
SET_BIT6

366 
	#IC3_P04_CAP2_FÆlögEdge_C≠tuª
 
CAPCON1
&=0x0F;
CAPCON4
&=0xF0;CAPCON4|=0x40;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=
	)
SET_BIT6

367 
	#IC4_P01_CAP2_FÆlögEdge_C≠tuª
 
CAPCON1
&=0x0F;
CAPCON4
&=0xF0;CAPCON4|=0x50;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=
	)
SET_BIT6

368 
	#IC5_P03_CAP2_FÆlögEdge_C≠tuª
 
CAPCON1
&=0x0F;
CAPCON4
&=0xF0;CAPCON4|=0x60;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=
	)
SET_BIT6

369 
	#IC6_P05_CAP2_FÆlögEdge_C≠tuª
 
CAPCON1
&=0x0F;
CAPCON4
&=0xF0;CAPCON4|=0x70;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=
	)
SET_BIT6

370 
	#IC7_P15_CAP2_FÆlögEdge_C≠tuª
 
CAPCON1
&=0x0F;
CAPCON4
&=0xF0;CAPCON4|=0x80;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=
	)
SET_BIT6

373 
	#IC0_P12_CAP0_RisögEdge_C≠tuª
 
CAPCON1
&=0xFC;CAPCON1|=0x01;
CAPCON3
&=0xF0CA
PCON0
|=
SET_BIT4
;
CAPCON2
|=SET_BIT4;

	)

374 
	#IC1_P11_CAP0_RisögEdge_C≠tuª
 
CAPCON1
&=0xFC;CAPCON1|=0x01;
CAPCON3
&=0xF0;CAPCON3|=0x01;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=SET_BIT4;

	)

375 
	#IC2_P10_CAP0_RisögEdge_C≠tuª
 
CAPCON1
&=0xFC;CAPCON1|=0x01;
CAPCON3
&=0xF0;CAPCON3|=0x02;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=SET_BIT4;

	)

376 
	#IC3_P00_CAP0_RisögEdge_C≠tuª
 
CAPCON1
&=0xFC;CAPCON1|=0x01;
CAPCON3
&=0xF0;CAPCON3|=0x03;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=SET_BIT4;

	)

377 
	#IC3_P04_CAP0_RisögEdge_C≠tuª
 
CAPCON1
&=0xFC;CAPCON1|=0x01;
CAPCON3
&=0xF0;CAPCON3|=0x04;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=SET_BIT4;

	)

378 
	#IC4_P01_CAP0_RisögEdge_C≠tuª
 
CAPCON1
&=0xFC;CAPCON1|=0x01;
CAPCON3
&=0xF0;CAPCON3|=0x05;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=SET_BIT4;

	)

379 
	#IC5_P03_CAP0_RisögEdge_C≠tuª
 
CAPCON1
&=0xFC;CAPCON1|=0x01;
CAPCON3
&=0xF0;CAPCON3|=0x06;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=SET_BIT4;

	)

380 
	#IC6_P05_CAP0_RisögEdge_C≠tuª
 
CAPCON1
&=0xFC;CAPCON1|=0x01;
CAPCON3
&=0xF0;CAPCON3|=0x07;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=SET_BIT4;

	)

381 
	#IC7_P15_CAP0_RisögEdge_C≠tuª
 
CAPCON1
&=0xFC;CAPCON1|=0x01;
CAPCON3
&=0xF0;CAPCON3|=0x08;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=SET_BIT4;

	)

383 
	#IC0_P12_CAP1_RisögEdge_C≠tuª
 
CAPCON1
&=0xF3;CAPCON1|=0x04;
CAPCON3
&=0x0FCA
PCON0
|=
SET_BIT5
;
CAPCON2
|=SET_BIT5;

	)

384 
	#IC1_P11_CAP1_RisögEdge_C≠tuª
 
CAPCON1
&=0xF3;CAPCON1|=0x04;
CAPCON3
&=0x0F;CAPCON3|=0x10;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=SET_BIT5;

	)

385 
	#IC2_P10_CAP1_RisögEdge_C≠tuª
 
CAPCON1
&=0xF3;CAPCON1|=0x04;
CAPCON3
&=0x0F;CAPCON3|=0x20;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=SET_BIT5;

	)

386 
	#IC3_P00_CAP1_RisögEdge_C≠tuª
 
CAPCON1
&=0xF3;CAPCON1|=0x04;
CAPCON3
&=0x0F;CAPCON3|=0x30;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=SET_BIT5;

	)

387 
	#IC3_P04_CAP1_RisögEdge_C≠tuª
 
CAPCON1
&=0xF3;CAPCON1|=0x04;
CAPCON3
&=0x0F;CAPCON3|=0x40;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=SET_BIT5;

	)

388 
	#IC4_P01_CAP1_RisögEdge_C≠tuª
 
CAPCON1
&=0xF3;CAPCON1|=0x04;
CAPCON3
&=0x0F;CAPCON3|=0x50;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=SET_BIT5;

	)

389 
	#IC5_P03_CAP1_RisögEdge_C≠tuª
 
CAPCON1
&=0xF3;CAPCON1|=0x04;
CAPCON3
&=0x0F;CAPCON3|=0x60;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=SET_BIT5;

	)

390 
	#IC6_P05_CAP1_RisögEdge_C≠tuª
 
CAPCON1
&=0xF3;CAPCON1|=0x04;
CAPCON3
&=0x0F;CAPCON3|=0x70;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=SET_BIT5;

	)

391 
	#IC7_P15_CAP1_RisögEdge_C≠tuª
 
CAPCON1
&=0xF3;CAPCON1|=0x04;
CAPCON3
&=0x0F;CAPCON3|=0x80;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=SET_BIT5;

	)

393 
	#IC0_P12_CAP3_RisögEdge_C≠tuª
 
CAPCON1
&=0x0F;CAPCON1|=0x10;
CAPCON4
&=0xF0;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=SET_BIT6;

	)

394 
	#IC1_P11_CAP3_RisögEdge_C≠tuª
 
CAPCON1
&=0x0F;CAPCON1|=0x10;
CAPCON4
&=0xF0;CAPCON4|=0x01;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=SET_BIT6;

	)

395 
	#IC2_P10_CAP3_RisögEdge_C≠tuª
 
CAPCON1
&=0x0F;CAPCON1|=0x10;
CAPCON4
&=0xF0;CAPCON4|=0x02;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=SET_BIT6;

	)

396 
	#IC3_P00_CAP3_RisögEdge_C≠tuª
 
CAPCON1
&=0x0F;CAPCON1|=0x10;
CAPCON4
&=0xF0;CAPCON4|=0x03;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=SET_BIT6;

	)

397 
	#IC3_P04_CAP3_RisögEdge_C≠tuª
 
CAPCON1
&=0x0F;CAPCON1|=0x10;
CAPCON4
&=0xF0;CAPCON4|=0x04;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=SET_BIT6;

	)

398 
	#IC4_P01_CAP3_RisögEdge_C≠tuª
 
CAPCON1
&=0x0F;CAPCON1|=0x10;
CAPCON4
&=0xF0;CAPCON4|=0x05;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=SET_BIT6;

	)

399 
	#IC5_P03_CAP3_RisögEdge_C≠tuª
 
CAPCON1
&=0x0F;CAPCON1|=0x10;
CAPCON4
&=0xF0;CAPCON4|=0x06;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=SET_BIT6;

	)

400 
	#IC6_P05_CAP3_RisögEdge_C≠tuª
 
CAPCON1
&=0x0F;CAPCON1|=0x10;
CAPCON4
&=0xF0;CAPCON4|=0x07;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=SET_BIT6;

	)

401 
	#IC7_P15_CAP3_RisögEdge_C≠tuª
 
CAPCON1
&=0x0F;CAPCON1|=0x10;
CAPCON4
&=0xF0;CAPCON4|=0x08;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=SET_BIT6;

	)

404 
	#IC0_P12_CAP0_BŸhEdge_C≠tuª
 
CAPCON1
&=0xFC;CAPCON1|=0x02;
CAPCON3
&=0xF0;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=
	)
SET_BIT4

405 
	#IC1_P11_CAP0_BŸhEdge_C≠tuª
 
CAPCON1
&=0xFC;CAPCON1|=0x02;
CAPCON3
&=0xF0;CAPCON3|=0x01;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=
	)
SET_BIT4

406 
	#IC2_P10_CAP0_BŸhEdge_C≠tuª
 
CAPCON1
&=0xFC;CAPCON1|=0x02;
CAPCON3
&=0xF0;CAPCON3|=0x02;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=
	)
SET_BIT4

407 
	#IC3_P00_CAP0_BŸhEdge_C≠tuª
 
CAPCON1
&=0xFC;CAPCON1|=0x02;
CAPCON3
&=0xF0;CAPCON3|=0x03;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=
	)
SET_BIT4

408 
	#IC3_P04_CAP0_BŸhEdge_C≠tuª
 
CAPCON1
&=0xFC;CAPCON1|=0x02;
CAPCON3
&=0xF0;CAPCON3|=0x04;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=
	)
SET_BIT4

409 
	#IC4_P01_CAP0_BŸhEdge_C≠tuª
 
CAPCON1
&=0xFC;CAPCON1|=0x02;
CAPCON3
&=0xF0;CAPCON3|=0x05;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=
	)
SET_BIT4

410 
	#IC5_P03_CAP0_BŸhEdge_C≠tuª
 
CAPCON1
&=0xFC;CAPCON1|=0x02;
CAPCON3
&=0xF0;CAPCON3|=0x06;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=
	)
SET_BIT4

411 
	#IC6_P05_CAP0_BŸhEdge_C≠tuª
 
CAPCON1
&=0xFC;CAPCON1|=0x02;
CAPCON3
&=0xF0;CAPCON3|=0x07;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=
	)
SET_BIT4

412 
	#IC7_P15_CAP0_BŸhEdge_C≠tuª
 
CAPCON1
&=0xFC;CAPCON1|=0x02;
CAPCON3
&=0xF0;CAPCON3|=0x08;
CAPCON0
|=
SET_BIT4
;
CAPCON2
|=
	)
SET_BIT4

414 
	#IC0_P12_CAP1_BŸhEdge_C≠tuª
 
CAPCON1
&=0xF3;CAPCON1|=0x08;
CAPCON3
&=0x0F;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=
	)
SET_BIT5

415 
	#IC1_P11_CAP1_BŸhEdge_C≠tuª
 
CAPCON1
&=0xF3;CAPCON1|=0x08;
CAPCON3
&=0x0F;CAPCON3|=0x10;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=SET_BIT5;

	)

416 
	#IC2_P10_CAP1_BŸhEdge_C≠tuª
 
CAPCON1
&=0xF3;CAPCON1|=0x08;
CAPCON3
&=0x0F;CAPCON3|=0x20;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=SET_BIT5;

	)

417 
	#IC3_P00_CAP1_BŸhEdge_C≠tuª
 
CAPCON1
&=0xF3;CAPCON1|=0x08;
CAPCON3
&=0x0F;CAPCON3|=0x30;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=SET_BIT5;

	)

418 
	#IC3_P04_CAP1_BŸhEdge_C≠tuª
 
CAPCON1
&=0xF3;CAPCON1|=0x08;
CAPCON3
&=0x0F;CAPCON3|=0x40;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=SET_BIT5;

	)

419 
	#IC4_P01_CAP1_BŸhEdge_C≠tuª
 
CAPCON1
&=0xF3;CAPCON1|=0x08;
CAPCON3
&=0x0F;CAPCON3|=0x50;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=SET_BIT5;

	)

420 
	#IC5_P03_CAP1_BŸhEdge_C≠tuª
 
CAPCON1
&=0xF3;CAPCON1|=0x08;
CAPCON3
&=0x0F;CAPCON3|=0x60;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=SET_BIT5;

	)

421 
	#IC6_P05_CAP1_BŸhEdge_C≠tuª
 
CAPCON1
&=0xF3;CAPCON1|=0x08;
CAPCON3
&=0x0F;CAPCON3|=0x70;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=SET_BIT5;

	)

422 
	#IC7_P15_CAP1_BŸhEdge_C≠tuª
 
CAPCON1
&=0xF3;CAPCON1|=0x08;
CAPCON3
&=0x0F;CAPCON3|=0x80;
CAPCON0
|=
SET_BIT5
;
CAPCON2
|=SET_BIT5;

	)

424 
	#IC0_P12_CAP3_BŸhEdge_C≠tuª
 
CAPCON1
&=0x0F;CAPCON1|=0x20;
CAPCON4
&=0xF0;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=SET_BIT6;

	)

425 
	#IC1_P11_CAP3_BŸhEdge_C≠tuª
 
CAPCON1
&=0x0F;CAPCON1|=0x20;
CAPCON4
&=0xF0;CAPCON4|=0x01;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=SET_BIT6;

	)

426 
	#IC2_P10_CAP3_BŸhEdge_C≠tuª
 
CAPCON1
&=0x0F;CAPCON1|=0x20;
CAPCON4
&=0xF0;CAPCON4|=0x02;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=SET_BIT6;

	)

427 
	#IC3_P00_CAP3_BŸhEdge_C≠tuª
 
CAPCON1
&=0x0F;CAPCON1|=0x20;
CAPCON4
&=0xF0;CAPCON4|=0x03;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=SET_BIT6;

	)

428 
	#IC3_P04_CAP3_BŸhEdge_C≠tuª
 
CAPCON1
&=0x0F;CAPCON1|=0x20;
CAPCON4
&=0xF0;CAPCON4|=0x04;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=SET_BIT6;

	)

429 
	#IC4_P01_CAP3_BŸhEdge_C≠tuª
 
CAPCON1
&=0x0F;CAPCON1|=0x20;
CAPCON4
&=0xF0;CAPCON4|=0x05;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=SET_BIT6;

	)

430 
	#IC5_P03_CAP3_BŸhEdge_C≠tuª
 
CAPCON1
&=0x0F;CAPCON1|=0x20;
CAPCON4
&=0xF0;CAPCON4|=0x06;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=SET_BIT6;

	)

431 
	#IC6_P05_CAP3_BŸhEdge_C≠tuª
 
CAPCON1
&=0x0F;CAPCON1|=0x20;
CAPCON4
&=0xF0;CAPCON4|=0x07;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=SET_BIT6;

	)

432 
	#IC7_P15_CAP3_BŸhEdge_C≠tuª
 
CAPCON1
&=0x0F;CAPCON1|=0x20;
CAPCON4
&=0xF0;CAPCON4|=0x08;
CAPCON0
|=
SET_BIT6
;
CAPCON2
|=SET_BIT6;

	)

434 
	#TIMER2_IC2_DISABLE
 
CAPCON0
&=~
SET_BIT6


	)

435 
	#TIMER2_IC1_DISABLE
 
CAPCON0
&=~
SET_BIT5


	)

436 
	#TIMER2_IC0_DISABLE
 
CAPCON0
&=~
SET_BIT4


	)

442 
	#PWM_CLOCK_FSYS
 
CKCON
&=0xBF

	)

443 
	#PWM_CLOCK_TIMER1
 
CKCON
|=0x40

	)

445 
	#PWM_CLOCK_DIV_2
 
PWMCON1
|=0x01;PWMCON1&=0xF9

	)

446 
	#PWM_CLOCK_DIV_4
 
PWMCON1
|=0x02;PWMCON1&=0xFA

	)

447 
	#PWM_CLOCK_DIV_8
 
PWMCON1
|=0x03;PWMCON1&=0xFB

	)

448 
	#PWM_CLOCK_DIV_16
 
PWMCON1
|=0x04;PWMCON1&=0xFC

	)

449 
	#PWM_CLOCK_DIV_32
 
PWMCON1
|=0x05;PWMCON1&=0xFD

	)

450 
	#PWM_CLOCK_DIV_64
 
PWMCON1
|=0x06;PWMCON1&=0xFE

	)

451 
	#PWM_CLOCK_DIV_128
 
PWMCON1
|=0x07

	)

453 
	#PWM5_P15_OUTPUT_ENABLE
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
SFRS
|=0x01;
PIOCON1
|=0x20;TA=0xAA;TA=0x55;SFRS&=0xFE;EA=BIT_TMP

454 
	#PWM5_P03_OUTPUT_ENABLE
 
PIOCON0
|=0x20

455 
	#PWM4_P01_OUTPUT_ENABLE
 
PIOCON0
|=0x10

456 
	#PWM3_P04_OUTPUT_ENABLE
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
SFRS
|=0x01;
PIOCON1
|=0x08;TA=0xAA;TA=0x55;SFRS&=0xFE;EA=BIT_TMP

457 
	#PWM3_P00_OUTPUT_ENABLE
 
PIOCON0
|=0x08

458 
	#PWM2_P05_OUTPUT_ENABLE
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
SFRS
|=0x01;
PIOCON1
|=0x04;TA=0xAA;TA=0x55;SFRS&=0xFE;EA=BIT_TMP

459 
	#PWM2_P10_OUTPUT_ENABLE
 
PIOCON0
|=0x04

460 
	#PWM1_P14_OUTPUT_ENABLE
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
SFRS
|=0x01;
PIOCON1
|=0x02;TA=0xAA;TA=0x55;SFRS&=0xFE;EA=BIT_TMP

461 
	#PWM1_P11_OUTPUT_ENABLE
 
PIOCON0
|=0x02

462 
	#PWM0_P12_OUTPUT_ENABLE
 
PIOCON0
|=0x01

463 
	#ALL_PWM_OUTPUT_ENABLE
 
PIOCON0
=0xFF;
PIOCON1
=0xFF

	)

464 
	#PWM5_P15_OUTPUT_DISABLE
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
SFRS
|=0x01;
PIOCON1
&=0xDF;TA=0xAA;TA=0x55;SFRS&=0xFE;EA=BIT_TMP

465 
	#PWM5_P03_OUTPUT_DISABLE
 
PIOCON0
&=0xDF

466 
	#PWM4_P01_OUTPUT_DISABLE
 
PIOCON0
&=0xEF

467 
	#PWM3_P04_OUTPUT_DISABLE
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
SFRS
|=0x01;
PIOCON1
&=0xF7;TA=0xAA;TA=0x55;SFRS&=0xFE;EA=BIT_TMP

468 
	#PWM3_P00_OUTPUT_DISABLE
 
PIOCON0
&=0xF7

469 
	#PWM2_P05_OUTPUT_DISABLE
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
SFRS
|=0x01;
PIOCON1
&=0xFB;TA=0xAA;TA=0x55;SFRS&=0xFE;EA=BIT_TMP

470 
	#PWM2_P10_OUTPUT_DISABLE
 
PIOCON0
&=0xFB

471 
	#PWM1_P14_OUTPUT_DISABLE
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
SFRS
|=0x01;
PIOCON1
&=0xFD;TA=0xAA;TA=0x55;SFRS&=0xFE;EA=BIT_TMP

472 
	#PWM1_P11_OUTPUT_DISABLE
 
PIOCON0
&=0xFD

473 
	#PWM0_P12_OUTPUT_DISABLE
 
PIOCON0
&=0xFE

474 
	#ALL_PWM_OUTPUT_DISABLE
 
PIOCON0
=0x00;
PIOCON1
=0x00

	)

476 
	#PWM5_OUTPUT_INVERSE
 
PNP
|=0x20

	)

477 
	#PWM4_OUTPUT_INVERSE
 
PNP
|=0x10

	)

478 
	#PWM3_OUTPUT_INVERSE
 
PNP
|=0x08

	)

479 
	#PWM2_OUTPUT_INVERSE
 
PNP
|=0x04

	)

480 
	#PWM1_OUTPUT_INVERSE
 
PNP
|=0x02

	)

481 
	#PWM0_OUTPUT_INVERSE
 
PNP
|=0x01

	)

482 
	#PWM_OUTPUT_ALL_INVERSE
 
PNP
=0xFF

	)

483 
	#PWM5_OUTPUT_NORMAL
 
PNP
&=0xDF

	)

484 
	#PWM4_OUTPUT_NORMAL
 
PNP
&=0xEF

	)

485 
	#PWM3_OUTPUT_NORMAL
 
PNP
&=0xF7

	)

486 
	#PWM2_OUTPUT_NORMAL
 
PNP
&=0xFB

	)

487 
	#PWM1_OUTPUT_NORMAL
 
PNP
&=0xFD

	)

488 
	#PWM0_OUTPUT_NORMAL
 
PNP
&=0xFE

	)

489 
	#PWM_OUTPUT_ALL_NORMAL
 
PNP
=0x00

	)

491 
	#PWM_EDGE_TYPE
 
PWMCON1
&=~
SET_BIT4


	)

492 
	#PWM_CENTER_TYPE
 
PWMCON1
|=
SET_BIT4


	)

494 
	#PWM_IMDEPENDENT_MODE
 
PWMCON1
&=0x3F

	)

495 
	#PWM_COMPLEMENTARY_MODE
 
PWMCON1
|=0x40;PWMCON1&=0x7F

	)

496 
	#PWM_SYNCHRONIZED_MODE
 
PWMCON1
|=0x80;PWMCON1&=0xBF

	)

497 
	#PWM_GP_MODE_ENABLE
 
PWMCON1
|=0x20

	)

498 
	#PWM_GP_MODE_DISABLE
 
PWMCON1
&=0xDF

	)

500 
	#PWM_FALLING_INT
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PWMINTC
&=0xCF;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

501 
	#PWM_RISING_INT
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PWMINTC
|=0x10;
PWMCON0
&=0xDF;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

502 
	#PWM_CENTRAL_POINT_INT
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PWMINTC
|=0x20;
PWMCON0
&=0xEF;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

503 
	#PWM_PERIOD_END_INT
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PWMINTC
|=0x30;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

505 
	#PWM_INT_PWM0
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PWMINTC
&=0xF8;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

506 
	#PWM_INT_PWM1
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PWMINTC
&=0xF8;PWMINTC|=0x01;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

507 
	#PWM_INT_PWM2
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PWMINTC
&=0xF8;PWMINTC|=0x02;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

508 
	#PWM_INT_PWM3
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PWMINTC
&=0xF8;PWMINTC|=0x03;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

509 
	#PWM_INT_PWM4
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PWMINTC
&=0xF8;PWMINTC|=0x04;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

510 
	#PWM_INT_PWM5
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PWMINTC
&=0xF8;PWMINTC|=0x05;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

512 
	#PWM45_DEADTIME_ENABLE
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
PDTEN
|=0x04;EA=
	)
BIT_TMP

513 
	#PWM34_DEADTIME_ENABLE
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
PDTEN
|=0x02;EA=
	)
BIT_TMP

514 
	#PWM01_DEADTIME_ENABLE
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
PDTEN
|=0x01;EA=
	)
BIT_TMP

519 
	#E«bÀ_ADC_AIN0
 
ADCCON0
&=0xF0;
P17_I≈ut_Mode
;
AINDIDS
=0x00;AINDIDS|=
SET_BIT0
;
ADCCON1
|=SET_BIT0

520 
	#E«bÀ_ADC_AIN1
 
ADCCON0
&=0xF0;ADCCON0|=0x01;
P30_I≈ut_Mode
;
AINDIDS
=0x00;AINDIDS|=
SET_BIT1
;
ADCCON1
|=
SET_BIT0


521 
	#E«bÀ_ADC_AIN2
 
ADCCON0
&=0xF0;ADCCON0|=0x02;
P07_I≈ut_Mode
;
AINDIDS
=0x00;AINDIDS|=
SET_BIT2
;
ADCCON1
|=
SET_BIT0


522 
	#E«bÀ_ADC_AIN3
 
ADCCON0
&=0xF0;ADCCON0|=0x03;
P06_I≈ut_Mode
;
AINDIDS
=0x00;AINDIDS|=
SET_BIT3
;
ADCCON1
|=
SET_BIT0


523 
	#E«bÀ_ADC_AIN4
 
ADCCON0
&=0xF0;ADCCON0|=0x04;
P05_I≈ut_Mode
;
AINDIDS
=0x00;AINDIDS|=
SET_BIT4
;
ADCCON1
|=
SET_BIT0


524 
	#E«bÀ_ADC_AIN5
 
ADCCON0
&=0xF0;ADCCON0|=0x05;
P04_I≈ut_Mode
;
AINDIDS
=0x00;AINDIDS|=
SET_BIT5
;
ADCCON1
|=
SET_BIT0


525 
	#E«bÀ_ADC_AIN6
 
ADCCON0
&=0xF0;ADCCON0|=0x06;
P03_I≈ut_Mode
;
AINDIDS
=0x00;AINDIDS|=
SET_BIT6
;
ADCCON1
|=
SET_BIT0


526 
	#E«bÀ_ADC_AIN7
 
ADCCON0
&=0xF0;ADCCON0|=0x07;
P11_I≈ut_Mode
;
AINDIDS
=0x00;AINDIDS|=
SET_BIT7
;
ADCCON1
|=
SET_BIT0


527 
	#E«bÀ_ADC_B™dG≠
 
ADCCON0
|=
SET_BIT3
;ADCCON0&=0xF8;
ADCCON1
|=
SET_BIT0


528 
	#DißbÀ_ADC
 
ADCCON1
&=0xFE;

	)

530 
	#PWM0_FALLINGEDGE_TRIG_ADC
 
ADCCON0
&=~
SET_BIT5
;ADCCON0&=~
SET_BIT4
;
ADCCON1
&=~
SET_BIT3
;ADCCON1&=~
SET_BIT2
;ADCCON1|=
SET_BIT1


	)

531 
	#PWM2_FALLINGEDGE_TRIG_ADC
 
ADCCON0
&=~
SET_BIT5
;ADCCON0|=
SET_BIT4
;
ADCCON1
&=~
SET_BIT3
;ADCCON1&=~
SET_BIT2
;ADCCON1|=
SET_BIT1


	)

532 
	#PWM4_FALLINGEDGE_TRIG_ADC
 
ADCCON0
|=
SET_BIT5
;ADCCON0&=~
SET_BIT4
;
ADCCON1
&=~
SET_BIT3
;ADCCON1&=~
SET_BIT2
;ADCCON1|=
SET_BIT1


	)

533 
	#PWM0_RISINGEDGE_TRIG_ADC
 
ADCCON0
&=~
SET_BIT5
;ADCCON0&=~
SET_BIT4
;
ADCCON1
&=~
SET_BIT3
;ADCCON1|=
SET_BIT2
;ADCCON1|=
SET_BIT1


	)

534 
	#PWM2_RISINGEDGE_TRIG_ADC
 
ADCCON0
&=~
SET_BIT5
;ADCCON0|=
SET_BIT4
;
ADCCON1
&=~
SET_BIT3
;ADCCON1|=
SET_BIT2
;ADCCON1|=
SET_BIT1


	)

535 
	#PWM4_RISINGEDGE_TRIG_ADC
 
ADCCON0
|=
SET_BIT5
;ADCCON0&=~
SET_BIT4
;
ADCCON1
&=~
SET_BIT3
;ADCCON1|=
SET_BIT2
;ADCCON1|=
SET_BIT1


	)

536 
	#PWM0_CENTRAL_TRIG_ADC
 
ADCCON0
&=~
SET_BIT5
;ADCCON0&=~
SET_BIT4
;
ADCCON1
|=
SET_BIT3
;ADCCON1&=~
SET_BIT2
;ADCCON1|=
SET_BIT1


	)

537 
	#PWM2_CENTRAL_TRIG_ADC
 
ADCCON0
&=~
SET_BIT5
;ADCCON0|=
SET_BIT4
;
ADCCON1
|=
SET_BIT3
;ADCCON1&=~
SET_BIT2
;ADCCON1|=
SET_BIT1


	)

538 
	#PWM4_CENTRAL_TRIG_ADC
 
ADCCON0
|=
SET_BIT5
;ADCCON0&=~
SET_BIT4
;
ADCCON1
|=
SET_BIT3
;ADCCON1&=~
SET_BIT2
;ADCCON1|=
SET_BIT1


	)

539 
	#PWM0_END_TRIG_ADC
 
ADCCON0
&=~
SET_BIT5
;ADCCON0&=~
SET_BIT4
;
ADCCON1
|=
SET_BIT3
;ADCCON1|=
SET_BIT2
;ADCCON1|=
SET_BIT1


	)

540 
	#PWM2_END_TRIG_ADC
 
ADCCON0
&=~
SET_BIT5
;ADCCON0|=
SET_BIT4
;
ADCCON1
|=
SET_BIT3
;ADCCON1|=
SET_BIT2
;ADCCON1|=
SET_BIT1


	)

541 
	#PWM4_END_TRIG_ADC
 
ADCCON0
|=
SET_BIT5
;ADCCON0&=~
SET_BIT4
;
ADCCON1
|=
SET_BIT3
;ADCCON1|=
SET_BIT2
;ADCCON1|=
SET_BIT1


	)

543 
	#P04_FALLINGEDGE_TRIG_ADC
 
ADCCON0
|=0x30;
ADCCON1
&=0xF3;ADCCON1|=
SET_BIT1
;ADCCON1&=~
SET_BIT6


	)

544 
	#P13_FALLINGEDGE_TRIG_ADC
 
ADCCON0
|=0x30;
ADCCON1
&=0xF3;ADCCON1|=
SET_BIT1
;ADCCON1|=
SET_BIT6


	)

545 
	#P04_RISINGEDGE_TRIG_ADC
 
ADCCON0
|=0x30;
ADCCON1
&=~
SET_BIT3
;ADCCON1|=
SET_BIT2
;ADCCON1|=
SET_BIT1
;ADCCON1&=~
SET_BIT6


	)

546 
	#P13_RISINGEDGE_TRIG_ADC
 
ADCCON0
|=0x30;
ADCCON1
&=~
SET_BIT3
;ADCCON1|=
SET_BIT2
;ADCCON1|=
SET_BIT1
;ADCCON1|=
SET_BIT6


	)

551 
	#SPICLK_DIV2
 
˛r_SPR0
;
˛r_SPR1


	)

552 
	#SPICLK_DIV4
 
£t_SPR0
;
˛r_SPR1


	)

553 
	#SPICLK_DIV8
 
˛r_SPR0
;
£t_SPR1


	)

554 
	#SPICLK_DIV16
 
£t_SPR0
;
£t_SPR1


	)

555 
	#E«bÀ_SPI_I¡îru±
 
£t_ESPI
;
£t_EA


	)

556 
	#SS
 
P15


	)

	@inc/N76E003.h

6 #i‚de‡
N76E003_H


7 
	#N76E003_H


	)

9 #ifde‡
__VSCODE__


10 
	#__VSCODE__


	)

11 
	#SFR
(
a
, 
b
Ëvﬁ©ûê
	)
b

12 
	#SBIT
(
a
, 
b
Ëvﬁ©ûê
	)
b

13 
	#öãºu±
(
NUM
)

	)

14 
	#boﬁ
 

	)

16 
	#SFR
(
a
, 
b
Ë
__s‰
 
	`__©
 (aË
	)
b

17 
	#SBIT
(
a
, 
b
Ë
__sbô
 
	`__©
 (aË
	)
b

18 
	#öãºu±
(
NUM
Ë
__öãºu±
 NUM 
__usög
 1

	)

19 
	#boﬁ
 
__bô


	)

22 
SFR
(0x80, 
P0
);

23 
SFR
(0x81, 
SP
);

24 
SFR
(0x82, 
DPL
);

25 
SFR
(0x83, 
DPH
);

26 
SFR
(0x84, 
RCTRIM0
);

27 
SFR
(0x85, 
RCTRIM1
);

28 
SFR
(0x86, 
RWK
);

29 
SFR
(0x87, 
PCON
);

31 
SFR
(0x88, 
TCON
);

32 
SFR
(0x89, 
TMOD
);

33 
SFR
(0x8A, 
TL0
);

34 
SFR
(0x8B, 
TL1
);

35 
SFR
(0x8C, 
TH0
);

36 
SFR
(0x8D, 
TH1
);

37 
SFR
(0x8E, 
CKCON
);

38 
SFR
(0x8F, 
WKCON
);

40 
SFR
(0x90, 
P1
);

41 
SFR
(0x91, 
SFRS
);

42 
SFR
(0x92, 
CAPCON0
);

43 
SFR
(0x93, 
CAPCON1
);

44 
SFR
(0x94, 
CAPCON2
);

45 
SFR
(0x95, 
CKDIV
);

46 
SFR
(0x96, 
CKSWT
);

47 
SFR
(0x97, 
CKEN
);

49 
SFR
(0x98, 
SCON
);

50 
SFR
(0x99, 
SBUF
);

51 
SFR
(0x9A, 
SBUF_1
);

52 
SFR
(0x9B, 
EIE
);

53 
SFR
(0x9C, 
EIE1
);

54 
SFR
(0x9F, 
CHPCON
);

56 
SFR
(0xA0, 
P2
);

57 
SFR
(0xA2, 
AUXR1
);

58 
SFR
(0xA3, 
BODCON0
);

59 
SFR
(0xA4, 
IAPTRG
);

60 
SFR
(0xA5, 
IAPUEN
);

61 
SFR
(0xA6, 
IAPAL
);

62 
SFR
(0xA7, 
IAPAH
);

64 
SFR
(0xA8, 
IE
);

65 
SFR
(0xA9, 
SADDR
);

66 
SFR
(0xAA, 
WDCON
);

67 
SFR
(0xAB, 
BODCON1
);

68 
SFR
(0xAC, 
P3M1
);

69 
SFR
(0xAC, 
P3S
);

70 
SFR
(0xAD, 
P3M2
);

71 
SFR
(0xAD, 
P3SR
);

72 
SFR
(0xAE, 
IAPFD
);

73 
SFR
(0xAF, 
IAPCN
);

75 
SFR
(0xB0, 
P3
);

76 
SFR
(0xB1, 
P0M1
);

77 
SFR
(0xB1, 
P0S
);

78 
SFR
(0xB2, 
P0M2
);

79 
SFR
(0xB2, 
P0SR
);

80 
SFR
(0xB3, 
P1M1
);

81 
SFR
(0xB3, 
P1S
);

82 
SFR
(0xB4, 
P1M2
);

83 
SFR
(0xB4, 
P1SR
);

84 
SFR
(0xB5, 
P2S
);

85 
SFR
(0xB7, 
IPH
);

86 
SFR
(0xB7, 
PWMINTC
);

88 
SFR
(0xB8, 
IP
);

89 
SFR
(0xB9, 
SADEN
);

90 
SFR
(0xBA, 
SADEN_1
);

91 
SFR
(0xBB, 
SADDR_1
);

92 
SFR
(0xBC, 
I2DAT
);

93 
SFR
(0xBD, 
I2STAT
);

94 
SFR
(0xBE, 
I2CLK
);

95 
SFR
(0xBF, 
I2TOC
);

97 
SFR
(0xC0, 
I2CON
);

98 
SFR
(0xC1, 
I2ADDR
);

99 
SFR
(0xC2, 
ADCRL
);

100 
SFR
(0xC3, 
ADCRH
);

101 
SFR
(0xC4, 
T3CON
);

102 
SFR
(0xC4, 
PWM4H
);

103 
SFR
(0xC5, 
RL3
);

104 
SFR
(0xC5, 
PWM5H
);

105 
SFR
(0xC6, 
RH3
);

106 
SFR
(0xC6, 
PIOCON1
);

107 
SFR
(0xC7, 
TA
);

109 
SFR
(0xC8, 
T2CON
);

110 
SFR
(0xC9, 
T2MOD
);

111 
SFR
(0xCA, 
RCMP2L
);

112 
SFR
(0xCB, 
RCMP2H
);

113 
SFR
(0xCC, 
TL2
);

114 
SFR
(0xCC, 
PWM4L
);

115 
SFR
(0xCD, 
TH2
);

116 
SFR
(0xCD, 
PWM5L
);

117 
SFR
(0xCE, 
ADCMPL
);

118 
SFR
(0xCF, 
ADCMPH
);

120 
SFR
(0xD0, 
PSW
);

121 
SFR
(0xD1, 
PWMPH
);

122 
SFR
(0xD2, 
PWM0H
);

123 
SFR
(0xD3, 
PWM1H
);

124 
SFR
(0xD4, 
PWM2H
);

125 
SFR
(0xD5, 
PWM3H
);

126 
SFR
(0xD6, 
PNP
);

127 
SFR
(0xD7, 
FBD
);

129 
SFR
(0xD8, 
PWMCON0
);

130 
SFR
(0xD9, 
PWMPL
);

131 
SFR
(0xDA, 
PWM0L
);

132 
SFR
(0xDB, 
PWM1L
);

133 
SFR
(0xDC, 
PWM2L
);

134 
SFR
(0xDD, 
PWM3L
);

135 
SFR
(0xDE, 
PIOCON0
);

136 
SFR
(0xDF, 
PWMCON1
);

138 
SFR
(0xE0, 
ACC
);

139 
SFR
(0xE1, 
ADCCON1
);

140 
SFR
(0xE2, 
ADCCON2
);

141 
SFR
(0xE3, 
ADCDLY
);

142 
SFR
(0xE4, 
C0L
);

143 
SFR
(0xE5, 
C0H
);

144 
SFR
(0xE6, 
C1L
);

145 
SFR
(0xE7, 
C1H
);

147 
SFR
(0xE8, 
ADCCON0
);

148 
SFR
(0xE9, 
PICON
);

149 
SFR
(0xEA, 
PINEN
);

150 
SFR
(0xEB, 
PIPEN
);

151 
SFR
(0xEC, 
PIF
);

152 
SFR
(0xED, 
C2L
);

153 
SFR
(0xEE, 
C2H
);

154 
SFR
(0xEF, 
EIP
);

156 
SFR
(0xF0, 
B
);

157 
SFR
(0xF1, 
CAPCON3
);

158 
SFR
(0xF2, 
CAPCON4
);

159 
SFR
(0xF3, 
SPCR
);

160 
SFR
(0xF3, 
SPCR2
);

161 
SFR
(0xF4, 
SPSR
);

162 
SFR
(0xF5, 
SPDR
);

163 
SFR
(0xF6, 
AINDIDS
);

164 
SFR
(0xF7, 
EIPH
);

166 
SFR
(0xF8, 
SCON_1
);

167 
SFR
(0xF9, 
PDTEN
);

168 
SFR
(0xFA, 
PDTCNT
);

169 
SFR
(0xFB, 
PMEN
);

170 
SFR
(0xFC, 
PMD
);

171 
SFR
(0xFE, 
EIP1
);

172 
SFR
(0xFF, 
EIPH1
);

176 
SBIT
(0xFF, 
SM0_1
);

177 
SBIT
(0xFF, 
FE_1
);

178 
SBIT
(0xFE, 
SM1_1
);

179 
SBIT
(0xFD, 
SM2_1
);

180 
SBIT
(0xFC, 
REN_1
);

181 
SBIT
(0xFB, 
TB8_1
);

182 
SBIT
(0xFA, 
RB8_1
);

183 
SBIT
(0xF9, 
TI_1
);

184 
SBIT
(0xF8, 
RI_1
);

187 
SBIT
(0xEF, 
ADCF
);

188 
SBIT
(0xEE, 
ADCS
);

189 
SBIT
(0xED, 
ETGSEL1
);

190 
SBIT
(0xEC, 
ETGSEL0
);

191 
SBIT
(0xEB, 
ADCHS3
);

192 
SBIT
(0xEA, 
ADCHS2
);

193 
SBIT
(0xE9, 
ADCHS1
);

194 
SBIT
(0xE8, 
ADCHS0
);

197 
SBIT
(0xDF, 
PWMRUN
);

198 
SBIT
(0xDE, 
LOAD
);

199 
SBIT
(0xDD, 
PWMF
);

200 
SBIT
(0xDC, 
CLRPWM
);

203 
SBIT
(0xD7, 
CY
);

204 
SBIT
(0xD6, 
AC
);

205 
SBIT
(0xD5, 
F0
);

206 
SBIT
(0xD4, 
RS1
);

207 
SBIT
(0xD3, 
RS0
);

208 
SBIT
(0xD2, 
OV
);

209 
SBIT
(0xD0, 
P
);

212 
SBIT
(0xCF, 
TF2
);

213 
SBIT
(0xCA, 
TR2
);

214 
SBIT
(0xC8, 
CM_RL2
);

217 
SBIT
(0xC6, 
I2CEN
);

218 
SBIT
(0xC5, 
STA
);

219 
SBIT
(0xC4, 
STO
);

220 
SBIT
(0xC3, 
SI
);

221 
SBIT
(0xC2, 
AA
);

222 
SBIT
(0xC0, 
I2CPX
);

225 
SBIT
(0xBE, 
PADC
);

226 
SBIT
(0xBD, 
PBOD
);

227 
SBIT
(0xBC, 
PS
);

228 
SBIT
(0xBB, 
PT1
);

229 
SBIT
(0xBA, 
PX1
);

230 
SBIT
(0xB9, 
PT0
);

231 
SBIT
(0xB8, 
PX0
);

234 
SBIT
(0xB0, 
P30
);

237 
SBIT
(0xAF, 
EA
);

238 
SBIT
(0xAE, 
EADC
);

239 
SBIT
(0xAD, 
EBOD
);

240 
SBIT
(0xAC, 
ES
);

241 
SBIT
(0xAB, 
ET1
);

242 
SBIT
(0xAA, 
EX1
);

243 
SBIT
(0xA9, 
ET0
);

244 
SBIT
(0xA8, 
EX0
);

247 
SBIT
(0xA0, 
P20
);

250 
SBIT
(0x9F, 
SM0
);

251 
SBIT
(0x9F, 
FE
);

252 
SBIT
(0x9E, 
SM1
);

253 
SBIT
(0x9D, 
SM2
);

254 
SBIT
(0x9C, 
REN
);

255 
SBIT
(0x9B, 
TB8
);

256 
SBIT
(0x9A, 
RB8
);

257 
SBIT
(0x99, 
TI
);

258 
SBIT
(0x98, 
RI
);

261 
SBIT
(0x97, 
P17
);

262 
SBIT
(0x96, 
P16
);

263 
SBIT
(0x96, 
TXD_1
);

264 
SBIT
(0x95, 
P15
);

265 
SBIT
(0x94, 
P14
);

266 
SBIT
(0x94, 
SDA
);

267 
SBIT
(0x93, 
P13
);

268 
SBIT
(0x93, 
SCL
);

269 
SBIT
(0x92, 
P12
);

270 
SBIT
(0x91, 
P11
);

271 
SBIT
(0x90, 
P10
);

274 
SBIT
(0x8F, 
TF1
);

275 
SBIT
(0x8E, 
TR1
);

276 
SBIT
(0x8D, 
TF0
);

277 
SBIT
(0x8C, 
TR0
);

278 
SBIT
(0x8B, 
IE1
);

279 
SBIT
(0x8A, 
IT1
);

280 
SBIT
(0x89, 
IE0
);

281 
SBIT
(0x88, 
IT0
);

285 
SBIT
(0x87, 
P07
);

286 
SBIT
(0x87, 
RXD
);

287 
SBIT
(0x86, 
P06
);

288 
SBIT
(0x86, 
TXD
);

289 
SBIT
(0x85, 
P05
);

290 
SBIT
(0x84, 
P04
);

291 
SBIT
(0x84, 
STADC
);

292 
SBIT
(0x83, 
P03
);

293 
SBIT
(0x82, 
P02
);

294 
SBIT
(0x82, 
RXD_1
);

295 
SBIT
(0x81, 
P01
);

296 
SBIT
(0x81, 
MISO
);

297 
SBIT
(0x80, 
P00
);

298 
SBIT
(0x80, 
MOSI
);

	@inc/SFR_Macro.h

1 #i‚de‡
__SFR_MACRO__


2 
	#__SFR_MACRO__


	)

5 
	#£t_P00
 
P00
 = 1

	)

6 
	#£t_P01
 
P01
 = 1

	)

7 
	#£t_P02
 
P02
 = 1

	)

8 
	#£t_P03
 
P03
 = 1

	)

9 
	#£t_P04
 
P04
 = 1

	)

10 
	#£t_P05
 
P05
 = 1

	)

11 
	#£t_P06
 
P06
 = 1

	)

12 
	#£t_P07
 
P07
 = 1

	)

14 
	#˛r_P00
 
P00
 = 0

	)

15 
	#˛r_P01
 
P01
 = 0

	)

16 
	#˛r_P02
 
P02
 = 0

	)

17 
	#˛r_P03
 
P03
 = 0

	)

18 
	#˛r_P04
 
P04
 = 0

	)

19 
	#˛r_P05
 
P05
 = 0

	)

20 
	#˛r_P06
 
P06
 = 0

	)

21 
	#˛r_P07
 
P07
 = 0

	)

29 
	#£t_SMOD
 
PCON
 |
SET_BIT7


	)

30 
	#£t_SMOD0
 
PCON
 |
SET_BIT6


	)

31 
	#£t_POF
 
PCON
 |
SET_BIT4


	)

32 
	#£t_GF1
 
PCON
 |
SET_BIT3


	)

33 
	#£t_GF0
 
PCON
 |
SET_BIT2


	)

34 
	#£t_PD
 
PCON
 |
SET_BIT1


	)

35 
	#£t_IDL
 
PCON
 |
SET_BIT0


	)

37 
	#˛r_SMOD
 
PCON
 &~
SET_BIT7


	)

38 
	#˛r_SMOD0
 
PCON
 &~
SET_BIT6


	)

39 
	#˛r_POF
 
PCON
 &~
SET_BIT4


	)

40 
	#˛r_GF1
 
PCON
 &~
SET_BIT3


	)

41 
	#˛r_GF0
 
PCON
 &~
SET_BIT2


	)

42 
	#˛r_PD
 
PCON
 &~
SET_BIT1


	)

43 
	#˛r_IDL
 
PCON
 &~
SET_BIT0


	)

46 
	#£t_TF1
 
TF1
 = 1

	)

47 
	#£t_TR1
 
TR1
 = 1

	)

48 
	#£t_TF0
 
TF0
 = 1

	)

49 
	#£t_TR0
 
TR0
 = 1

	)

50 
	#£t_IE1
 
IE1
 = 1

	)

51 
	#£t_IT1
 
IT1
 = 1

	)

52 
	#£t_IE0
 
IE0
 = 1

	)

53 
	#£t_IT0
 
IT0
 = 1

	)

55 
	#˛r_TF1
 
TF1
 = 0

	)

56 
	#˛r_TR1
 
TR1
 = 0

	)

57 
	#˛r_TF0
 
TF0
 = 0

	)

58 
	#˛r_TR0
 
TR0
 = 0

	)

59 
	#˛r_IE1
 
IE1
 = 0

	)

60 
	#˛r_IT1
 
IT1
 = 0

	)

61 
	#˛r_IE0
 
IE0
 = 0

	)

62 
	#˛r_IT0
 
IT0
 = 0

	)

65 
	#£t_GATE_T1
 
TMOD
 |
SET_BIT7


	)

66 
	#£t_CT_T1
 
TMOD
 |
SET_BIT6


	)

67 
	#£t_M1_T1
 
TMOD
 |
SET_BIT5


	)

68 
	#£t_M0_T1
 
TMOD
 |
SET_BIT4


	)

69 
	#£t_GATE_T0
 
TMOD
 |
SET_BIT3


	)

70 
	#£t_CT_T0
 
TMOD
 |
SET_BIT2


	)

71 
	#£t_M1_T0
 
TMOD
 |
SET_BIT1


	)

72 
	#£t_M0_T0
 
TMOD
 |
SET_BIT0


	)

74 
	#˛r_GATE_T1
 
TMOD
 &~
SET_BIT7


	)

75 
	#˛r_CT_T1
 
TMOD
 &~
SET_BIT6


	)

76 
	#˛r_M1_T1
 
TMOD
 &~
SET_BIT5


	)

77 
	#˛r_M0_T1
 
TMOD
 &~
SET_BIT4


	)

78 
	#˛r_GATE_T0
 
TMOD
 &~
SET_BIT3


	)

79 
	#˛r_CT_T0
 
TMOD
 &~
SET_BIT2


	)

80 
	#˛r_M1_T0
 
TMOD
 &~
SET_BIT1


	)

81 
	#˛r_M0_T0
 
TMOD
 &~
SET_BIT0


	)

89 
	#£t_PWMCKS
 
CKCON
 |
SET_BIT6


	)

90 
	#£t_T1M
 
CKCON
 |
SET_BIT4


	)

91 
	#£t_T0M
 
CKCON
 |
SET_BIT3


	)

92 
	#£t_CLOEN
 
CKCON
 |
SET_BIT1


	)

94 
	#˛r_PWMCKS
 
CKCON
 &~
SET_BIT6


	)

95 
	#˛r_T1M
 
CKCON
 &~
SET_BIT4


	)

96 
	#˛r_T0M
 
CKCON
 &~
SET_BIT3


	)

97 
	#˛r_CLOEN
 
CKCON
 &~
SET_BIT1


	)

100 
	#£t_WKTCK
 
WKCON
 |
SET_BIT5


	)

101 
	#£t_WKTF
 
WKCON
 |
SET_BIT4


	)

102 
	#£t_WKTR
 
WKCON
 |
SET_BIT3


	)

103 
	#£t_WKPS2
 
WKCON
 |
SET_BIT2


	)

104 
	#£t_WKPS1
 
WKCON
 |
SET_BIT1


	)

105 
	#£t_WKPS0
 
WKCON
 |
SET_BIT0


	)

107 
	#˛r_WKTCK
 
WKCON
 &~
SET_BIT5


	)

108 
	#˛r_WKTF
 
WKCON
 &~
SET_BIT4


	)

109 
	#˛r_WKTR
 
WKCON
 &~
SET_BIT3


	)

110 
	#˛r_WKPS2
 
WKCON
 &~
SET_BIT2


	)

111 
	#˛r_WKPS1
 
WKCON
 &~
SET_BIT1


	)

112 
	#˛r_WKPS0
 
WKCON
 &~
SET_BIT0


	)

115 
	#£t_P10
 
P10
 = 1

	)

116 
	#£t_P11
 
P11
 = 1

	)

117 
	#£t_P12
 
P12
 = 1

	)

118 
	#£t_P13
 
P13
 = 1

	)

119 
	#£t_P14
 
P14
 = 1

	)

120 
	#£t_P15
 
P15
 = 1

	)

121 
	#£t_P16
 
P16
 = 1

	)

122 
	#£t_P17
 
P17
 = 1

	)

124 
	#˛r_P10
 
P10
 = 0

	)

125 
	#˛r_P11
 
P11
 = 0

	)

126 
	#˛r_P12
 
P12
 = 0

	)

127 
	#˛r_P13
 
P13
 = 0

	)

128 
	#˛r_P14
 
P14
 = 0

	)

129 
	#˛r_P15
 
P15
 = 0

	)

130 
	#˛r_P16
 
P16
 = 0

	)

131 
	#˛r_P17
 
P17
 = 0

	)

134 
	#£t_SFRPAGE
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
SFRS
|=
SET_BIT0
;EA=
	)
BIT_TMP

135 
	#˛r_SFRPAGE
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
SFRS
&=~
SET_BIT0
;EA=
	)
BIT_TMP

138 
	#£t_CAPEN2
 
CAPCON0
 |
SET_BIT6


	)

139 
	#£t_CAPEN1
 
CAPCON0
 |
SET_BIT5


	)

140 
	#£t_CAPEN0
 
CAPCON0
 |
SET_BIT4


	)

141 
	#£t_CAPF2
 
CAPCON0
 |
SET_BIT2


	)

142 
	#£t_CAPF1
 
CAPCON0
 |
SET_BIT1


	)

143 
	#£t_CAPF0
 
CAPCON0
 |
SET_BIT0


	)

145 
	#˛r_CAPEN2
 
CAPCON0
 &~
SET_BIT6


	)

146 
	#˛r_CAPEN1
 
CAPCON0
 &~
SET_BIT5


	)

147 
	#˛r_CAPEN0
 
CAPCON0
 &~
SET_BIT4


	)

148 
	#˛r_CAPF2
 
CAPCON0
 &~
SET_BIT2


	)

149 
	#˛r_CAPF1
 
CAPCON0
 &~
SET_BIT1


	)

150 
	#˛r_CAPF0
 
CAPCON0
 &~
SET_BIT0


	)

153 
	#£t_CAP2LS1
 
CAPCON1
 |
SET_BIT5


	)

154 
	#£t_CAP2LS0
 
CAPCON1
 |
SET_BIT4


	)

155 
	#£t_CAP1LS1
 
CAPCON1
 |
SET_BIT3


	)

156 
	#£t_CAP1LS0
 
CAPCON1
 |
SET_BIT2


	)

157 
	#£t_CAP0LS1
 
CAPCON1
 |
SET_BIT1


	)

158 
	#£t_CAP0LS0
 
CAPCON1
 |
SET_BIT0


	)

160 
	#˛r_CAP2LS1
 
CAPCON1
 &~
SET_BIT5


	)

161 
	#˛r_CAP2LS0
 
CAPCON1
 &~
SET_BIT4


	)

162 
	#˛r_CAP1LS1
 
CAPCON1
 &~
SET_BIT3


	)

163 
	#˛r_CAP1LS0
 
CAPCON1
 &~
SET_BIT2


	)

164 
	#˛r_CAP0LS1
 
CAPCON1
 &~
SET_BIT1


	)

165 
	#˛r_CAP0LS0
 
CAPCON1
 &~
SET_BIT0


	)

168 
	#£t_ENF2
 
CAPCON2
 |
SET_BIT6


	)

169 
	#£t_ENF1
 
CAPCON2
 |
SET_BIT5


	)

170 
	#£t_ENF0
 
CAPCON2
 |
SET_BIT4


	)

172 
	#˛r_ENF2
 
CAPCON2
 &~
SET_BIT6


	)

173 
	#˛r_ENF1
 
CAPCON2
 &~
SET_BIT5


	)

174 
	#˛r_ENF0
 
CAPCON2
 &~
SET_BIT4


	)

179 
	#£t_HIRCST
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CKSWT
|=
SET_BIT5
;EA=BIT_TMP;

	)

180 
	#£t_LIRCST
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CKSWT
|=
SET_BIT4
;EA=BIT_TMP;

	)

181 
	#£t_ECLKST
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CKSWT
|=
SET_BIT3
;EA=BIT_TMP;

	)

182 
	#£t_OSC1
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CKSWT
|=
SET_BIT2
;EA=BIT_TMP;

	)

183 
	#£t_OSC0
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CKSWT
|=
SET_BIT1
;EA=BIT_TMP;

	)

185 
	#˛r_HIRCST
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CKSWT
&=~
SET_BIT5
;EA=BIT_TMP;

	)

186 
	#˛r_LIRCST
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CKSWT
&=~
SET_BIT4
;EA=BIT_TMP;

	)

187 
	#˛r_ECLKST
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CKSWT
&=~
SET_BIT3
;EA=BIT_TMP;

	)

188 
	#˛r_OSC1
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CKSWT
&=~
SET_BIT2
;EA=BIT_TMP;

	)

189 
	#˛r_OSC0
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CKSWT
&=~
SET_BIT1
;EA=BIT_TMP;

	)

192 
	#£t_EXTEN1
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CKEN
|=
SET_BIT7
;EA=BIT_TMP;

	)

193 
	#£t_EXTEN0
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CKEN
|=
SET_BIT6
;EA=BIT_TMP;

	)

194 
	#£t_HIRCEN
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CKEN
|=
SET_BIT5
;EA=BIT_TMP;

	)

195 
	#£t_CKSWTF
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CKEN
|=
SET_BIT0
;EA=BIT_TMP;

	)

197 
	#˛r_EXTEN1
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CKEN
&=~
SET_BIT7
;EA=BIT_TMP;

	)

198 
	#˛r_EXTEN0
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CKEN
&=~
SET_BIT6
;EA=BIT_TMP;

	)

199 
	#˛r_HIRCEN
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CKEN
&=~
SET_BIT5
;EA=BIT_TMP;

	)

200 
	#˛r_CKSWTF
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CKEN
&=~
SET_BIT0
;EA=BIT_TMP;

	)

203 
	#£t_FE
 
FE
 = 1

	)

204 
	#£t_SM1
 
SM1
 = 1

	)

205 
	#£t_SM2
 
SM2
 = 1

	)

206 
	#£t_REN
 
REN
 = 1

	)

207 
	#£t_TB8
 
TB8
 = 1

	)

208 
	#£t_RB8
 
RB8
 = 1

	)

209 
	#£t_TI
 
TI
 = 1

	)

210 
	#£t_RI
 
RI
 = 1

	)

212 
	#˛r_FE
 
FE
 = 0

	)

213 
	#˛r_SM1
 
SM1
 = 0

	)

214 
	#˛r_SM2
 
SM2
 = 0

	)

215 
	#˛r_REN
 
REN
 = 0

	)

216 
	#˛r_TB8
 
TB8
 = 0

	)

217 
	#˛r_RB8
 
RB8
 = 0

	)

218 
	#˛r_TI
 
TI
 = 0

	)

219 
	#˛r_RI
 
RI
 = 0

	)

225 
	#£t_ET2
 
EIE
 |
SET_BIT7


	)

226 
	#£t_ESPI
 
EIE
 |
SET_BIT6


	)

227 
	#£t_EFB
 
EIE
 |
SET_BIT5


	)

228 
	#£t_EWDT
 
EIE
 |
SET_BIT4


	)

229 
	#£t_EPWM
 
EIE
 |
SET_BIT3


	)

230 
	#£t_ECAP
 
EIE
 |
SET_BIT2


	)

231 
	#£t_EPI
 
EIE
 |
SET_BIT1


	)

232 
	#£t_EI2C
 
EIE
 |
SET_BIT0


	)

234 
	#˛r_ET2
 
EIE
 &~
SET_BIT7


	)

235 
	#˛r_ESPI
 
EIE
 &~
SET_BIT6


	)

236 
	#˛r_EFB
 
EIE
 &~
SET_BIT5


	)

237 
	#˛r_EWDT
 
EIE
 &~
SET_BIT4


	)

238 
	#˛r_EPWM
 
EIE
 &~
SET_BIT3


	)

239 
	#˛r_ECAP
 
EIE
 &~
SET_BIT2


	)

240 
	#˛r_EPI
 
EIE
 &~
SET_BIT1


	)

241 
	#˛r_EI2C
 
EIE
 &~
SET_BIT0


	)

244 
	#£t_EWKT
 
EIE1
 |
SET_BIT2


	)

245 
	#£t_ET3
 
EIE1
 |
SET_BIT1


	)

246 
	#£t_ES_1
 
EIE1
 |
SET_BIT0


	)

248 
	#˛r_EWKT
 
EIE1
 &~
SET_BIT2


	)

249 
	#˛r_ET3
 
EIE1
 &~
SET_BIT1


	)

250 
	#˛r_ES_1
 
EIE1
 &~
SET_BIT0


	)

253 
	#£t_SWRST
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CHPCON
|=
SET_BIT7
 ;EA=
	)
BIT_TMP

254 
	#£t_IAPFF
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CHPCON
|=
SET_BIT6
 ;EA=
	)
BIT_TMP

255 
	#£t_BS
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CHPCON
|=
SET_BIT1
 ;EA=
	)
BIT_TMP

256 
	#£t_IAPEN
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CHPCON
|=
SET_BIT0
 ;EA=
	)
BIT_TMP

258 
	#˛r_SWRST
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CHPCON
&=~
SET_BIT7
;EA=
	)
BIT_TMP

259 
	#˛r_IAPFF
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CHPCON
&=~
SET_BIT6
;EA=
	)
BIT_TMP

260 
	#˛r_BS
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CHPCON
&=~
SET_BIT1
;EA=
	)
BIT_TMP

261 
	#˛r_IAPEN
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
CHPCON
&=~
SET_BIT0
;EA=
	)
BIT_TMP

266 
	#£t_SWRF
 
AUXR1
 |
SET_BIT7


	)

267 
	#£t_RSTPINF
 
AUXR1
 |
SET_BIT6


	)

268 
	#£t_HARDF
 
AUXR1
 |
SET_BIT5


	)

269 
	#£t_GF2
 
AUXR1
 |
SET_BIT3


	)

270 
	#£t_UART0PX
 
AUXR1
 |
SET_BIT2


	)

271 
	#£t_DPS
 
AUXR1
 |
SET_BIT0


	)

273 
	#˛r_SWRF
 
AUXR1
 &~
SET_BIT7


	)

274 
	#˛r_RSTPINF
 
AUXR1
 &~
SET_BIT6


	)

275 
	#˛r_HARDF
 
AUXR1
 &~
SET_BIT5


	)

276 
	#˛r_GF2
 
AUXR1
 &~
SET_BIT3


	)

277 
	#˛r_UART0PX
 
AUXR1
 &~
SET_BIT2


	)

278 
	#˛r_DPS
 
AUXR1
 &~
SET_BIT0


	)

281 
	#£t_BODEN
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
BODCON0
|=
SET_BIT7
;EA=
	)
BIT_TMP

282 
	#£t_BOV1
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
BODCON0
|=
SET_BIT5
;EA=
	)
BIT_TMP

283 
	#£t_BOV0
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
BODCON0
|=
SET_BIT4
;EA=
	)
BIT_TMP

284 
	#£t_BOF
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
BODCON0
|=
SET_BIT3
;EA=
	)
BIT_TMP

285 
	#£t_BORST
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
BODCON0
|=
SET_BIT2
;EA=
	)
BIT_TMP

286 
	#£t_BORF
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
BODCON0
|=
SET_BIT1
;EA=
	)
BIT_TMP

287 
	#£t_BOS
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
BODCON0
|=
SET_BIT0
;EA=
	)
BIT_TMP

289 
	#˛r_BODEN
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
BODCON0
&=~
SET_BIT7
;EA=
	)
BIT_TMP

290 
	#˛r_BOV2
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
BODCON0
&=~
SET_BIT6
;EA=
	)
BIT_TMP

291 
	#˛r_BOV1
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
BODCON0
&=~
SET_BIT5
;EA=
	)
BIT_TMP

292 
	#˛r_BOV0
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
BODCON0
&=~
SET_BIT4
;EA=
	)
BIT_TMP

293 
	#˛r_BOF
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
BODCON0
&=~
SET_BIT3
;EA=
	)
BIT_TMP

294 
	#˛r_BORST
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
BODCON0
&=~
SET_BIT2
;EA=
	)
BIT_TMP

295 
	#˛r_BORF
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
BODCON0
&=~
SET_BIT1
;EA=
	)
BIT_TMP

296 
	#˛r_BOS
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
BODCON0
&=~
SET_BIT0
;EA=
	)
BIT_TMP

299 
	#£t_IAPGO
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
IAPTRG
|=
SET_BIT0
 ;EA=
	)
BIT_TMP

300 
	#˛r_IAPGO
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
IAPTRG
&=~
SET_BIT0
;EA=
	)
BIT_TMP

303 
	#£t_CFUEN
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
IAPUEN
|=
SET_BIT2
;EA=
	)
BIT_TMP

304 
	#£t_LDUEN
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
IAPUEN
|=
SET_BIT1
;EA=
	)
BIT_TMP

305 
	#£t_APUEN
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
IAPUEN
|=
SET_BIT0
;EA=
	)
BIT_TMP

307 
	#˛r_CFUEN
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
IAPUEN
&=~
SET_BIT2
;EA=
	)
BIT_TMP

308 
	#˛r_LDUEN
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
IAPUEN
&=~
SET_BIT1
;EA=
	)
BIT_TMP

309 
	#˛r_APUEN
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
IAPUEN
&=~
SET_BIT0
;EA=
	)
BIT_TMP

315 
	#£t_EA
 
EA
 = 1

	)

316 
	#£t_EADC
 
EADC
 = 1

	)

317 
	#£t_EBOD
 
EBOD
 = 1

	)

318 
	#£t_ES
 
ES
 = 1

	)

319 
	#£t_ET1
 
ET1
 = 1

	)

320 
	#£t_EX1
 
EX1
 = 1

	)

321 
	#£t_ET0
 
ET0
 = 1

	)

322 
	#£t_EX0
 
EX0
 = 1

	)

324 
	#˛r_EA
 
EA
 = 0

	)

325 
	#˛r_EADC
 
EADC
 = 0

	)

326 
	#˛r_EBOD
 
EBOD
 = 0

	)

327 
	#˛r_ES
 
ES
 = 0

	)

328 
	#˛r_ET1
 
ET1
 = 0

	)

329 
	#˛r_EX1
 
EX1
 = 0

	)

330 
	#˛r_ET0
 
ET0
 = 0

	)

331 
	#˛r_EX0
 
EX0
 = 0

	)

336 
	#£t_WDTR
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
WDCON
|=
SET_BIT7
;EA=BIT_TMP;

	)

337 
	#£t_WDCLR
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
WDCON
|=
SET_BIT6
;EA=BIT_TMP;

	)

338 
	#£t_WDTF
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
WDCON
|=
SET_BIT5
;EA=BIT_TMP;

	)

339 
	#£t_WIDPD
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
WDCON
|=
SET_BIT4
;EA=BIT_TMP;

	)

340 
	#£t_WDTRF
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
WDCON
|=
SET_BIT3
;EA=BIT_TMP;

	)

341 
	#£t_WPS2
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
WDCON
|=
SET_BIT2
;EA=BIT_TMP;

	)

342 
	#£t_WPS1
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
WDCON
|=
SET_BIT1
;EA=BIT_TMP;

	)

343 
	#£t_WPS0
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
WDCON
|=
SET_BIT0
;EA=BIT_TMP;

	)

345 
	#˛r_WDTEN
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
WDCON
&=~
SET_BIT7
;EA=BIT_TMP;

	)

346 
	#˛r_WDCLR
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
WDCON
&=~
SET_BIT6
;EA=BIT_TMP;

	)

347 
	#˛r_WDTF
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
WDCON
&=~
SET_BIT5
;EA=BIT_TMP;

	)

348 
	#˛r_WDTRF
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
WDCON
&=~
SET_BIT3
;EA=BIT_TMP;

	)

349 
	#˛r_WPS2
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
WDCON
&=~
SET_BIT2
;EA=BIT_TMP;

	)

350 
	#˛r_WPS1
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
WDCON
&=~
SET_BIT1
;EA=BIT_TMP;

	)

351 
	#˛r_WPS0
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
WDCON
&=~
SET_BIT0
;EA=BIT_TMP;

	)

354 
	#£t_LPBOD1
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
BODCON1
|=
SET_BIT2
 ;EA=BIT_TMP;

	)

355 
	#£t_LPBOD0
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
BODCON1
|=
SET_BIT1
 ;EA=BIT_TMP;

	)

356 
	#£t_BODFLT
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
BODCON1
|=
SET_BIT0
 ;EA=BIT_TMP;

	)

358 
	#˛r_LPBOD1
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
BODCON1
&=~
SET_BIT2
;EA=BIT_TMP;

	)

359 
	#˛r_LPBOD0
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
BODCON1
&=~
SET_BIT1
;EA=BIT_TMP;

	)

360 
	#˛r_BODFLT
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
BODCON1
&=~
SET_BIT0
;EA=BIT_TMP;

	)

364 
	#£t_P3M1_0
 
P3M1
 |
SET_BIT0


	)

365 
	#˛r_P3M1_0
 
P3M1
 &~
SET_BIT0


	)

368 
	#£t_P3S_0
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P3S
|=
SET_BIT0
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

369 
	#˛r_P3S_0
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P3S
&=~
SET_BIT0
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

372 
	#£t_P3M2_0
 
P3M2
 |
SET_BIT0


	)

373 
	#˛r_P3M2_0
 
P3M2
 &~
SET_BIT0


	)

376 
	#£t_P3SR_0
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P3SR
|=
SET_BIT0
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

377 
	#˛r_P3SR_0
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P3SR
&=~
SET_BIT0
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

382 
	#£t_FOEN
 
IAPN
 |
SET_BIT5


	)

383 
	#£t_FCEN
 
IAPN
 |
SET_BIT4


	)

384 
	#£t_FCTRL3
 
IAPN
 |
SET_BIT3


	)

385 
	#£t_FCTRL2
 
IAPN
 |
SET_BIT2


	)

386 
	#£t_FCTRL1
 
IAPN
 |
SET_BIT1


	)

387 
	#£t_FCTRL0
 
IAPN
 |
SET_BIT0


	)

389 
	#˛r_FOEN
 
IAPN
 &~
SET_BIT5


	)

390 
	#˛r_FCEN
 
IAPN
 &~
SET_BIT4


	)

391 
	#˛r_FCTRL3
 
IAPN
 &~
SET_BIT3


	)

392 
	#˛r_FCTRL2
 
IAPN
 &~
SET_BIT2


	)

393 
	#˛r_FCTRL1
 
IAPN
 &~
SET_BIT1


	)

394 
	#˛r_FCTRL0
 
IAPN
 &~
SET_BIT0


	)

397 
	#£t_P30
 
P30
 = 1

	)

398 
	#˛r_P30
 
P30
 = 0

	)

401 
	#£t_P0M1_7
 
P0M1
 |
SET_BIT7


	)

402 
	#£t_P0M1_6
 
P0M1
 |
SET_BIT6


	)

403 
	#£t_P0M1_5
 
P0M1
 |
SET_BIT5


	)

404 
	#£t_P0M1_4
 
P0M1
 |
SET_BIT4


	)

405 
	#£t_P0M1_3
 
P0M1
 |
SET_BIT3


	)

406 
	#£t_P0M1_2
 
P0M1
 |
SET_BIT2


	)

407 
	#£t_P0M1_1
 
P0M1
 |
SET_BIT1


	)

408 
	#£t_P0M1_0
 
P0M1
 |
SET_BIT0


	)

410 
	#˛r_P0M1_7
 
P0M1
 &~
SET_BIT7


	)

411 
	#˛r_P0M1_6
 
P0M1
 &~
SET_BIT6


	)

412 
	#˛r_P0M1_5
 
P0M1
 &~
SET_BIT5


	)

413 
	#˛r_P0M1_4
 
P0M1
 &~
SET_BIT4


	)

414 
	#˛r_P0M1_3
 
P0M1
 &~
SET_BIT3


	)

415 
	#˛r_P0M1_2
 
P0M1
 &~
SET_BIT2


	)

416 
	#˛r_P0M1_1
 
P0M1
 &~
SET_BIT1


	)

417 
	#˛r_P0M1_0
 
P0M1
 &~
SET_BIT0


	)

420 
	#£t_P0S_7
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0S
|=
SET_BIT7
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

421 
	#£t_P0S_6
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0S
|=
SET_BIT6
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

422 
	#£t_P0S_5
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0S
|=
SET_BIT5
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

423 
	#£t_P0S_4
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0S
|=
SET_BIT4
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

424 
	#£t_P0S_3
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0S
|=
SET_BIT3
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

425 
	#£t_P0S_2
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0S
|=
SET_BIT2
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

426 
	#£t_P0S_1
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0S
|=
SET_BIT1
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

427 
	#£t_P0S_0
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0S
|=
SET_BIT0
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

429 
	#˛r_P0S_7
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0S
&=~
SET_BIT7
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

430 
	#˛r_P0S_6
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0S
&=~
SET_BIT6
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

431 
	#˛r_P0S_5
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0S
&=~
SET_BIT5
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

432 
	#˛r_P0S_4
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0S
&=~
SET_BIT4
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

433 
	#˛r_P0S_3
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0S
&=~
SET_BIT3
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

434 
	#˛r_P0S_2
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0S
&=~
SET_BIT2
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

435 
	#˛r_P0S_1
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0S
&=~
SET_BIT1
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

436 
	#˛r_P0S_0
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0S
&=~
SET_BIT0
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

439 
	#£t_P0M2_7
 
P0M2
 |
SET_BIT7


	)

440 
	#£t_P0M2_6
 
P0M2
 |
SET_BIT6


	)

441 
	#£t_P0M2_5
 
P0M2
 |
SET_BIT5


	)

442 
	#£t_P0M2_4
 
P0M2
 |
SET_BIT4


	)

443 
	#£t_P0M2_3
 
P0M2
 |
SET_BIT3


	)

444 
	#£t_P0M2_2
 
P0M2
 |
SET_BIT2


	)

445 
	#£t_P0M2_1
 
P0M2
 |
SET_BIT1


	)

446 
	#£t_P0M2_0
 
P0M2
 |
SET_BIT0


	)

448 
	#˛r_P0M2_7
 
P0M2
 &~
SET_BIT7


	)

449 
	#˛r_P0M2_6
 
P0M2
 &~
SET_BIT6


	)

450 
	#˛r_P0M2_5
 
P0M2
 &~
SET_BIT5


	)

451 
	#˛r_P0M2_4
 
P0M2
 &~
SET_BIT4


	)

452 
	#˛r_P0M2_3
 
P0M2
 &~
SET_BIT3


	)

453 
	#˛r_P0M2_2
 
P0M2
 &~
SET_BIT2


	)

454 
	#˛r_P0M2_1
 
P0M2
 &~
SET_BIT1


	)

455 
	#˛r_P0M2_0
 
P0M2
 &~
SET_BIT0


	)

459 
	#£t_P0SR_7
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0SR
|=
SET_BIT7
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

460 
	#£t_P0SR_6
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0SR
|=
SET_BIT6
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

461 
	#£t_P0SR_5
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0SR
|=
SET_BIT5
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

462 
	#£t_P0SR_4
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0SR
|=
SET_BIT4
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

463 
	#£t_P0SR_3
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0SR
|=
SET_BIT3
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

464 
	#£t_P0SR_2
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0SR
|=
SET_BIT2
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

465 
	#£t_P0SR_1
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0SR
|=
SET_BIT1
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

466 
	#£t_P0SR_0
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0SR
|=
SET_BIT0
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

468 
	#˛r_P0SR_7
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0SR
&=~
SET_BIT7
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

469 
	#˛r_P0SR_6
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0SR
&=~
SET_BIT6
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

470 
	#˛r_P0SR_5
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0SR
&=~
SET_BIT5
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

471 
	#˛r_P0SR_4
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0SR
&=~
SET_BIT4
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

472 
	#˛r_P0SR_3
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0SR
&=~
SET_BIT3
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

473 
	#˛r_P0SR_2
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0SR
&=~
SET_BIT2
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

474 
	#˛r_P0SR_1
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0SR
&=~
SET_BIT1
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

475 
	#˛r_P0SR_0
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P0SR
&=~
SET_BIT0
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

479 
	#£t_P1M1_7
 
P1M1
 |
SET_BIT7


	)

480 
	#£t_P1M1_6
 
P1M1
 |
SET_BIT6


	)

481 
	#£t_P1M1_5
 
P1M1
 |
SET_BIT5


	)

482 
	#£t_P1M1_4
 
P1M1
 |
SET_BIT4


	)

483 
	#£t_P1M1_3
 
P1M1
 |
SET_BIT3


	)

484 
	#£t_P1M1_2
 
P1M1
 |
SET_BIT2


	)

485 
	#£t_P1M1_1
 
P1M1
 |
SET_BIT1


	)

486 
	#£t_P1M1_0
 
P1M1
 |
SET_BIT0


	)

488 
	#˛r_P1M1_7
 
P1M1
 &~
SET_BIT7


	)

489 
	#˛r_P1M1_6
 
P1M1
 &~
SET_BIT6


	)

490 
	#˛r_P1M1_5
 
P1M1
 &~
SET_BIT5


	)

491 
	#˛r_P1M1_4
 
P1M1
 &~
SET_BIT4


	)

492 
	#˛r_P1M1_3
 
P1M1
 &~
SET_BIT3


	)

493 
	#˛r_P1M1_2
 
P1M1
 &~
SET_BIT2


	)

494 
	#˛r_P1M1_1
 
P1M1
 &~
SET_BIT1


	)

495 
	#˛r_P1M1_0
 
P1M1
 &~
SET_BIT0


	)

498 
	#£t_P1S_7
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1S
|=
SET_BIT7
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

499 
	#£t_P1S_6
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1S
|=
SET_BIT6
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

500 
	#£t_P1S_5
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1S
|=
SET_BIT5
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

501 
	#£t_P1S_4
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1S
|=
SET_BIT4
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

502 
	#£t_P1S_3
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1S
|=
SET_BIT3
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

503 
	#£t_P1S_2
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1S
|=
SET_BIT2
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

504 
	#£t_P1S_1
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1S
|=
SET_BIT1
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

505 
	#£t_P1S_0
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1S
|=
SET_BIT0
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

507 
	#˛r_P1S_7
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1S
&=~
SET_BIT7
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

508 
	#˛r_P1S_6
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1S
&=~
SET_BIT6
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

509 
	#˛r_P1S_5
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1S
&=~
SET_BIT5
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

510 
	#˛r_P1S_4
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1S
&=~
SET_BIT4
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

511 
	#˛r_P1S_3
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1S
&=~
SET_BIT3
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

512 
	#˛r_P1S_2
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1S
&=~
SET_BIT2
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

513 
	#˛r_P1S_1
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1S
&=~
SET_BIT1
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

514 
	#˛r_P1S_0
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1S
&=~
SET_BIT0
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

517 
	#£t_P12UP
 
P1M2
 |
SET_BIT2


	)

518 
	#£t_P1M2_1
 
P1M2
 |
SET_BIT1


	)

519 
	#£t_P1M2_0
 
P1M2
 |
SET_BIT0


	)

521 
	#˛r_P12UP
 
P1M2
 &~
SET_BIT2


	)

522 
	#˛r_P1M2_1
 
P1M2
 &~
SET_BIT1


	)

523 
	#˛r_P1M2_0
 
P1M2
 &~
SET_BIT0


	)

526 
	#£t_P1SR_7
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1SR
|=
SET_BIT7
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

527 
	#£t_P1SR_6
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1SR
|=
SET_BIT6
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

528 
	#£t_P1SR_5
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1SR
|=
SET_BIT5
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

529 
	#£t_P1SR_4
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1SR
|=
SET_BIT4
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

530 
	#£t_P1SR_3
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1SR
|=
SET_BIT3
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

531 
	#£t_P1SR_2
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1SR
|=
SET_BIT2
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

532 
	#£t_P1SR_1
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1SR
|=
SET_BIT1
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

533 
	#£t_P1SR_0
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1SR
|=
SET_BIT0
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

535 
	#˛r_P1SR_7
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1SR
&=~
SET_BIT7
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

536 
	#˛r_P1SR_6
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1SR
&=~
SET_BIT6
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

537 
	#˛r_P1SR_5
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1SR
&=~
SET_BIT5
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

538 
	#˛r_P1SR_4
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1SR
&=~
SET_BIT4
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

539 
	#˛r_P1SR_3
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1SR
&=~
SET_BIT3
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

540 
	#˛r_P1SR_2
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1SR
&=~
SET_BIT2
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

541 
	#˛r_P1SR_1
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1SR
&=~
SET_BIT1
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

542 
	#˛r_P1SR_0
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
P1SR
&=~
SET_BIT0
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

546 
	#£t_P2S_0
 
P2S
 |
SET_BIT0


	)

547 
	#˛r_P2S_0
 
P2S
 &~
SET_BIT0


	)

550 
	#£t_PADCH
 
IPH
 |
SET_BIT6


	)

551 
	#£t_PBODH
 
IPH
 |
SET_BIT5


	)

552 
	#£t_PSH
 
IPH
 |
SET_BIT4


	)

553 
	#£t_PT1H
 
IPH
 |
SET_BIT3


	)

554 
	#£t_PX11
 
IPH
 |
SET_BIT2


	)

555 
	#£t_PT0H
 
IPH
 |
SET_BIT1


	)

556 
	#£t_PX0H
 
IPH
 |
SET_BIT0


	)

558 
	#˛r_PADCH
 
IPH
 &~
SET_BIT6


	)

559 
	#˛r_PBODH
 
IPH
 &~
SET_BIT5


	)

560 
	#˛r_PSH
 
IPH
 &~
SET_BIT4


	)

561 
	#˛r_PT1H
 
IPH
 &~
SET_BIT3


	)

562 
	#˛r_PX11
 
IPH
 &~
SET_BIT2


	)

563 
	#˛r_PT0H
 
IPH
 &~
SET_BIT1


	)

564 
	#˛r_PX0H
 
IPH
 &~
SET_BIT0


	)

567 
	#£t_INTTYP1
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PWMINTC
|=
SET_BIT5
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

568 
	#£t_INTTYP0
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PWMINTC
|=
SET_BIT4
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

569 
	#£t_INTSEL2
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PWMINTC
|=
SET_BIT2
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

570 
	#£t_INTSEL1
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PWMINTC
|=
SET_BIT1
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

571 
	#£t_INTSEL0
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PWMINTC
|=
SET_BIT0
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

573 
	#˛r_INTTYP1
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PWMINTC
&=~
SET_BIT5
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

574 
	#˛r_INTTYP0
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PWMINTC
&=~
SET_BIT4
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

575 
	#˛r_INTSEL2
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PWMINTC
&=~
SET_BIT2
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

576 
	#˛r_INTSEL1
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PWMINTC
&=~
SET_BIT1
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

577 
	#˛r_INTSEL0
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PWMINTC
&=~
SET_BIT0
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

580 
	#£t_PADC
 
PADC
 = 1

	)

581 
	#£t_PBOD
 
PBOD
 = 1

	)

582 
	#£t_PS
 
PS
 = 1

	)

583 
	#£t_PT1
 
PT1
 = 1

	)

584 
	#£t_PX1
 
PX1
 = 1

	)

585 
	#£t_PT0
 
PT0
 = 1

	)

586 
	#£t_PX0
 
PX0
 = 1

	)

588 
	#˛r_PADC
 
PADC
 = 0

	)

589 
	#˛r_PBOD
 
PBOD
 = 0

	)

590 
	#˛r_PS
 
PS
 = 0

	)

591 
	#˛r_PT1
 
PT1
 = 0

	)

592 
	#˛r_PX1
 
PX1
 = 0

	)

593 
	#˛r_PT0
 
PT0
 = 0

	)

594 
	#˛r_PX0
 
PX0
 = 0

	)

604 
	#£t_I2TOCEN
 
I2TOC
 |
SET_BIT2


	)

605 
	#£t_DIV
 
I2TOC
 |
SET_BIT1


	)

606 
	#£t_I2TOF
 
I2TOC
 |
SET_BIT0


	)

608 
	#˛r_I2TOCEN
 
I2TOC
 &~
SET_BIT2


	)

609 
	#˛r_DIV
 
I2TOC
 &~
SET_BIT1


	)

610 
	#˛r_I2TOF
 
I2TOC
 &~
SET_BIT0


	)

613 
	#£t_I2CEN
 
I2CEN
 = 1

	)

614 
	#£t_STA
 
STA
 = 1

	)

615 
	#£t_STO
 
STO
 = 1

	)

616 
	#£t_SI
 
SI
 = 1

	)

617 
	#£t_AA
 
AA
 = 1

	)

618 
	#£t_I2CPX
 
I2CPX
 = 1

	)

620 
	#˛r_I2CEN
 
I2CEN
 = 0

	)

621 
	#˛r_STA
 
STA
 = 0

	)

622 
	#˛r_STO
 
STO
 = 0

	)

623 
	#˛r_SI
 
SI
 = 0

	)

624 
	#˛r_AA
 
AA
 = 0

	)

625 
	#˛r_I2CPX
 
I2CPX
 = 0

	)

628 
	#£t_GC
 
I2ADDR
 |
SET_BIT0


	)

629 
	#˛r_GC
 
I2ADDR
 &~
SET_BIT0


	)

635 
	#£t_SMOD_1
 
T3CON
 |
SET_BIT7


	)

636 
	#£t_SMOD0_1
 
T3CON
 |
SET_BIT6


	)

637 
	#£t_BRCK
 
T3CON
 |
SET_BIT5


	)

638 
	#£t_TF3
 
T3CON
 |
SET_BIT4


	)

639 
	#£t_TR3
 
T3CON
 |
SET_BIT3


	)

640 
	#£t_T3PS2
 
T3CON
 |
SET_BIT2


	)

641 
	#£t_T3PS1
 
T3CON
 |
SET_BIT1


	)

642 
	#£t_T3PS0
 
T3CON
 |
SET_BIT0


	)

644 
	#˛r_SMOD_1
 
T3CON
 &~
SET_BIT7


	)

645 
	#˛r_SMOD0_1
 
T3CON
 &~
SET_BIT6


	)

646 
	#˛r_BRCK
 
T3CON
 &~
SET_BIT5


	)

647 
	#˛r_TF3
 
T3CON
 &~
SET_BIT4


	)

648 
	#˛r_TR3
 
T3CON
 &~
SET_BIT3


	)

649 
	#˛r_T3PS2
 
T3CON
 &~
SET_BIT2


	)

650 
	#˛r_T3PS1
 
T3CON
 &~
SET_BIT1


	)

651 
	#˛r_T3PS0
 
T3CON
 &~
SET_BIT0


	)

659 
	#£t_PIO15
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PIOCON1
|=
SET_BIT5
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

660 
	#£t_PIO13
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PIOCON1
|=
SET_BIT3
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

661 
	#£t_PIO12
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PIOCON1
|=
SET_BIT2
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

662 
	#£t_PIO11
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PIOCON1
|=
SET_BIT1
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

664 
	#˛r_PIO15
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PIOCON1
&=~
SET_BIT5
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

665 
	#˛r_PIO13
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PIOCON1
&=~
SET_BIT3
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

666 
	#˛r_PIO12
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PIOCON1
&=~
SET_BIT2
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

667 
	#˛r_PIO11
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
PIOCON1
&=~
SET_BIT1
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

670 
	#£t_TF2
 
TF2
 = 1

	)

671 
	#£t_TR2
 
TR2
 = 1

	)

672 
	#£t_CMRL2
 
CMRL2
 = 1

	)

674 
	#˛r_TF2
 
TF2
 = 0

	)

675 
	#˛r_TR2
 
TR2
 = 0

	)

676 
	#˛r_CMRL2
 
CMRL2
 = 0

	)

679 
	#£t_LDEN
 
T2MOD
 |
SET_BIT7


	)

680 
	#£t_T2DIV2
 
T2MOD
 |
SET_BIT6


	)

681 
	#£t_T2DIV1
 
T2MOD
 |
SET_BIT5


	)

682 
	#£t_T2DIV0
 
T2MOD
 |
SET_BIT4


	)

683 
	#£t_CAPCR
 
T2MOD
 |
SET_BIT3


	)

684 
	#£t_CMPCR
 
T2MOD
 |
SET_BIT2


	)

685 
	#£t_LDTS1
 
T2MOD
 |
SET_BIT1


	)

686 
	#£t_LDTS0
 
T2MOD
 |
SET_BIT0


	)

688 
	#˛r_LDEN
 
T2MOD
 &~
SET_BIT7


	)

689 
	#˛r_T2DIV2
 
T2MOD
 &~
SET_BIT6


	)

690 
	#˛r_T2DIV1
 
T2MOD
 &~
SET_BIT5


	)

691 
	#˛r_T2DIV0
 
T2MOD
 &~
SET_BIT4


	)

692 
	#˛r_CAPCR
 
T2MOD
 &~
SET_BIT3


	)

693 
	#˛r_CMPCR
 
T2MOD
 &~
SET_BIT2


	)

694 
	#˛r_LDTS1
 
T2MOD
 &~
SET_BIT1


	)

695 
	#˛r_LDTS0
 
T2MOD
 &~
SET_BIT0


	)

707 
	#£t_CY
 
CY
 = 1

	)

708 
	#£t_AC
 
AC
 = 1

	)

709 
	#£t_F0
 
F0
 = 1

	)

710 
	#£t_RS1
 
RS1
 = 1

	)

711 
	#£t_RS0
 
RS0
 = 1

	)

712 
	#£t_OV
 
OV
 = 1

	)

713 
	#£t_P
 
P
 = 1

	)

715 
	#˛r_CY
 
CY
 = 0

	)

716 
	#˛r_AC
 
AC
 = 0

	)

717 
	#˛r_F0
 
F0
 = 0

	)

718 
	#˛r_RS1
 
RS1
 = 0

	)

719 
	#˛r_RS0
 
RS0
 = 0

	)

720 
	#˛r_OV
 
OV
 = 0

	)

721 
	#˛r_P
 
P
 = 0

	)

730 
	#£t_PNP5
 
PNP
 |
SET_BIT5


	)

731 
	#£t_PNP4
 
PNP
 |
SET_BIT4


	)

732 
	#£t_PNP3
 
PNP
 |
SET_BIT3


	)

733 
	#£t_PNP2
 
PNP
 |
SET_BIT2


	)

734 
	#£t_PNP1
 
PNP
 |
SET_BIT1


	)

735 
	#£t_PNP0
 
PNP
 |
SET_BIT0


	)

737 
	#˛r_PNP5
 
PNP
 &~
SET_BIT5


	)

738 
	#˛r_PNP4
 
PNP
 &~
SET_BIT4


	)

739 
	#˛r_PNP3
 
PNP
 &~
SET_BIT3


	)

740 
	#˛r_PNP2
 
PNP
 &~
SET_BIT2


	)

741 
	#˛r_PNP1
 
PNP
 &~
SET_BIT1


	)

742 
	#˛r_PNP0
 
PNP
 &~
SET_BIT0


	)

745 
	#£t_FBF
 
FBD
 |
SET_BIT7


	)

746 
	#£t_FBINLS
 
FBD
 |
SET_BIT6


	)

747 
	#£t_FBD5
 
FBD
 |
SET_BIT5


	)

748 
	#£t_FBD4
 
FBD
 |
SET_BIT4


	)

749 
	#£t_FBD3
 
FBD
 |
SET_BIT3


	)

750 
	#£t_FBD2
 
FBD
 |
SET_BIT2


	)

751 
	#£t_FBD1
 
FBD
 |
SET_BIT1


	)

752 
	#£t_FBD0
 
FBD
 |
SET_BIT0


	)

754 
	#˛r_FBF
 
FBD
 &~
SET_BIT7


	)

755 
	#˛r_FBINLS
 
FBD
 &~
SET_BIT6


	)

756 
	#˛r_FBD5
 
FBD
 &~
SET_BIT5


	)

757 
	#˛r_FBD4
 
FBD
 &~
SET_BIT4


	)

758 
	#˛r_FBD3
 
FBD
 &~
SET_BIT3


	)

759 
	#˛r_FBD2
 
FBD
 &~
SET_BIT2


	)

760 
	#˛r_FBD1
 
FBD
 &~
SET_BIT1


	)

761 
	#˛r_FBD0
 
FBD
 &~
SET_BIT0


	)

764 
	#£t_PWMRUN
 
PWMRUN
 = 1

	)

765 
	#£t_LOAD
 
LOAD
 = 1

	)

766 
	#£t_PWMF
 
PWMF
 = 1

	)

767 
	#£t_CLRPWM
 
CLRPWM
 = 1

	)

769 
	#˛r_PWMRUN
 
PWMRUN
 = 0

	)

770 
	#˛r_LOAD
 
LOAD
 = 0

	)

771 
	#˛r_PWMF
 
PWMF
 = 0

	)

772 
	#˛r_CLRPWM
 
CLRPWM
 = 0

	)

781 
	#£t_PIO05
 
PIOCON0
 |
SET_BIT5


	)

782 
	#£t_PIO04
 
PIOCON0
 |
SET_BIT4


	)

783 
	#£t_PIO03
 
PIOCON0
 |
SET_BIT3


	)

784 
	#£t_PIO02
 
PIOCON0
 |
SET_BIT2


	)

785 
	#£t_PIO01
 
PIOCON0
 |
SET_BIT1


	)

786 
	#£t_PIO00
 
PIOCON0
 |
SET_BIT0


	)

788 
	#˛r_PIO05
 
PIOCON0
 &~
SET_BIT5


	)

789 
	#˛r_PIO04
 
PIOCON0
 &~
SET_BIT4


	)

790 
	#˛r_PIO03
 
PIOCON0
 &~
SET_BIT3


	)

791 
	#˛r_PIO02
 
PIOCON0
 &~
SET_BIT2


	)

792 
	#˛r_PIO01
 
PIOCON0
 &~
SET_BIT1


	)

793 
	#˛r_PIO00
 
PIOCON0
 &~
SET_BIT0


	)

796 
	#£t_PWMMOD1
 
PWMCON1
 |
SET_BIT7


	)

797 
	#£t_PWMMOD0
 
PWMCON1
 |
SET_BIT6


	)

798 
	#£t_GP
 
PWMCON1
 |
SET_BIT5


	)

799 
	#£t_PWMTYP
 
PWMCON1
 |
SET_BIT4


	)

800 
	#£t_FBINEN
 
PWMCON1
 |
SET_BIT3


	)

801 
	#£t_PWMDIV2
 
PWMCON1
 |
SET_BIT2


	)

802 
	#£t_PWMDIV1
 
PWMCON1
 |
SET_BIT1


	)

803 
	#£t_PWMDIV0
 
PWMCON1
 |
SET_BIT0


	)

805 
	#˛r_PWMMOD1
 
PWMCON1
 &~
SET_BIT7


	)

806 
	#˛r_PWMMOD0
 
PWMCON1
 &~
SET_BIT6


	)

807 
	#˛r_GP
 
PWMCON1
 &~
SET_BIT5


	)

808 
	#˛r_PWMTYP
 
PWMCON1
 &~
SET_BIT4


	)

809 
	#˛r_FBINEN
 
PWMCON1
 &~
SET_BIT3


	)

810 
	#˛r_PWMDIV2
 
PWMCON1
 &~
SET_BIT2


	)

811 
	#˛r_PWMDIV1
 
PWMCON1
 &~
SET_BIT1


	)

812 
	#˛r_PWMDIV0
 
PWMCON1
 &~
SET_BIT0


	)

817 
	#£t_STADCPX
 
ADCCON1
 |
SET_BIT6


	)

818 
	#£t_ETGTYP1
 
ADCCON1
 |
SET_BIT3


	)

819 
	#£t_ETGTYP0
 
ADCCON1
 |
SET_BIT2


	)

820 
	#£t_ADCEX
 
ADCCON1
 |
SET_BIT1


	)

821 
	#£t_ADCEN
 
ADCCON1
 |
SET_BIT0


	)

823 
	#˛r_STADCPX
 
ADCCON1
 &~
SET_BIT6


	)

824 
	#˛r_ETGTYP1
 
ADCCON1
 &~
SET_BIT3


	)

825 
	#˛r_ETGTYP0
 
ADCCON1
 &~
SET_BIT2


	)

826 
	#˛r_ADCEX
 
ADCCON1
 &~
SET_BIT1


	)

827 
	#˛r_ADCEN
 
ADCCON1
 &~
SET_BIT0


	)

830 
	#£t_ADFBEN
 
ADCCON2
 |
SET_BIT7


	)

831 
	#£t_ADCMPOP
 
ADCCON2
 |
SET_BIT6


	)

832 
	#£t_ADCMPEN
 
ADCCON2
 |
SET_BIT5


	)

833 
	#£t_ADCMPO
 
ADCCON2
 |
SET_BIT4


	)

835 
	#˛r_ADFBEN
 
ADCCON2
 &~
SET_BIT7


	)

836 
	#˛r_ADCMPOP
 
ADCCON2
 &~
SET_BIT6


	)

837 
	#˛r_ADCMPEN
 
ADCCON2
 &~
SET_BIT5


	)

838 
	#˛r_ADCMPO
 
ADCCON2
 &~
SET_BIT4


	)

847 
	#£t_ADCF
 
ADCF
 = 1

	)

848 
	#£t_ADCS
 
ADCS
 = 1

	)

849 
	#£t_ETGSEL1
 
ETGSEL1
 = 1

	)

850 
	#£t_ETGSEL0
 
ETGSEL0
 = 1

	)

851 
	#£t_ADCHS3
 
ADCHS3
 = 1

	)

852 
	#£t_ADCHS2
 
ADCHS2
 = 1

	)

853 
	#£t_ADCHS1
 
ADCHS1
 = 1

	)

854 
	#£t_ADCHS0
 
ADCHS0
 = 1

	)

856 
	#˛r_ADCF
 
ADCF
 = 0

	)

857 
	#˛r_ADCS
 
ADCS
 = 0

	)

858 
	#˛r_ETGSEL1
 
ETGSEL1
 = 0

	)

859 
	#˛r_ETGSEL0
 
ETGSEL0
 = 0

	)

860 
	#˛r_ADCHS3
 
ADCHS3
 = 0

	)

861 
	#˛r_ADCHS2
 
ADCHS2
 = 0

	)

862 
	#˛r_ADCHS1
 
ADCHS1
 = 0

	)

863 
	#˛r_ADCHS0
 
ADCHS0
 = 0

	)

866 
	#£t_PIT67
 
PICON
 |
SET_BIT7


	)

867 
	#£t_PIT45
 
PICON
 |
SET_BIT6


	)

868 
	#£t_PIT3
 
PICON
 |
SET_BIT5


	)

869 
	#£t_PIT2
 
PICON
 |
SET_BIT4


	)

870 
	#£t_PIT1
 
PICON
 |
SET_BIT3


	)

871 
	#£t_PIT0
 
PICON
 |
SET_BIT2


	)

872 
	#£t_PIPS1
 
PICON
 |
SET_BIT1


	)

873 
	#£t_PIPS0
 
PICON
 |
SET_BIT0


	)

875 
	#˛r_PIT67
 
PICON
 &~
SET_BIT7


	)

876 
	#˛r_PIT45
 
PICON
 &~
SET_BIT6


	)

877 
	#˛r_PIT3
 
PICON
 &~
SET_BIT5


	)

878 
	#˛r_PIT2
 
PICON
 &~
SET_BIT4


	)

879 
	#˛r_PIT1
 
PICON
 &~
SET_BIT3


	)

880 
	#˛r_PIT0
 
PICON
 &~
SET_BIT2


	)

881 
	#˛r_PIPS1
 
PICON
 &~
SET_BIT1


	)

882 
	#˛r_PIPS0
 
PICON
 &~
SET_BIT0


	)

885 
	#£t_PINEN7
 
PINEN
 |
SET_BIT7


	)

886 
	#£t_PINEN6
 
PINEN
 |
SET_BIT6


	)

887 
	#£t_PINEN5
 
PINEN
 |
SET_BIT5


	)

888 
	#£t_PINEN4
 
PINEN
 |
SET_BIT4


	)

889 
	#£t_PINEN3
 
PINEN
 |
SET_BIT3


	)

890 
	#£t_PINEN2
 
PINEN
 |
SET_BIT2


	)

891 
	#£t_PINEN1
 
PINEN
 |
SET_BIT1


	)

892 
	#£t_PINEN0
 
PINEN
 |
SET_BIT0


	)

894 
	#˛r_PINEN7
 
PINEN
 &~
SET_BIT7


	)

895 
	#˛r_PINEN6
 
PINEN
 &~
SET_BIT6


	)

896 
	#˛r_PINEN5
 
PINEN
 &~
SET_BIT5


	)

897 
	#˛r_PINEN4
 
PINEN
 &~
SET_BIT4


	)

898 
	#˛r_PINEN3
 
PINEN
 &~
SET_BIT3


	)

899 
	#˛r_PINEN2
 
PINEN
 &~
SET_BIT2


	)

900 
	#˛r_PINEN1
 
PINEN
 &~
SET_BIT1


	)

901 
	#˛r_PINEN0
 
PINEN
 &~
SET_BIT0


	)

904 
	#£t_PIPEN7
 
PIPEN
 |
SET_BIT7


	)

905 
	#£t_PIPEN6
 
PIPEN
 |
SET_BIT6


	)

906 
	#£t_PIPEN5
 
PIPEN
 |
SET_BIT5


	)

907 
	#£t_PIPEN4
 
PIPEN
 |
SET_BIT4


	)

908 
	#£t_PIPEN3
 
PIPEN
 |
SET_BIT3


	)

909 
	#£t_PIPEN2
 
PIPEN
 |
SET_BIT2


	)

910 
	#£t_PIPEN1
 
PIPEN
 |
SET_BIT1


	)

911 
	#£t_PIPEN0
 
PIPEN
 |
SET_BIT0


	)

913 
	#˛r_PIPEN7
 
PIPEN
 &~
SET_BIT7


	)

914 
	#˛r_PIPEN6
 
PIPEN
 &~
SET_BIT6


	)

915 
	#˛r_PIPEN5
 
PIPEN
 &~
SET_BIT5


	)

916 
	#˛r_PIPEN4
 
PIPEN
 &~
SET_BIT4


	)

917 
	#˛r_PIPEN3
 
PIPEN
 &~
SET_BIT3


	)

918 
	#˛r_PIPEN2
 
PIPEN
 &~
SET_BIT2


	)

919 
	#˛r_PIPEN1
 
PIPEN
 &~
SET_BIT1


	)

920 
	#˛r_PIPEN0
 
PIPEN
 &~
SET_BIT0


	)

923 
	#£t_PIF7
 
PIF
 |
SET_BIT7


	)

924 
	#£t_PIF6
 
PIF
 |
SET_BIT6


	)

925 
	#£t_PIF5
 
PIF
 |
SET_BIT5


	)

926 
	#£t_PIF4
 
PIF
 |
SET_BIT4


	)

927 
	#£t_PIF3
 
PIF
 |
SET_BIT3


	)

928 
	#£t_PIF2
 
PIF
 |
SET_BIT2


	)

929 
	#£t_PIF1
 
PIF
 |
SET_BIT1


	)

930 
	#£t_PIF0
 
PIF
 |
SET_BIT0


	)

932 
	#˛r_PIF7
 
PIF
 &~
SET_BIT7


	)

933 
	#˛r_PIF6
 
PIF
 &~
SET_BIT6


	)

934 
	#˛r_PIF5
 
PIF
 &~
SET_BIT5


	)

935 
	#˛r_PIF4
 
PIF
 &~
SET_BIT4


	)

936 
	#˛r_PIF3
 
PIF
 &~
SET_BIT3


	)

937 
	#˛r_PIF2
 
PIF
 &~
SET_BIT2


	)

938 
	#˛r_PIF1
 
PIF
 &~
SET_BIT1


	)

939 
	#˛r_PIF0
 
PIF
 &~
SET_BIT0


	)

945 
	#£t_PT2
 
EIP
 |
SET_BIT7


	)

946 
	#£t_PSPI
 
EIP
 |
SET_BIT6


	)

947 
	#£t_PFB
 
EIP
 |
SET_BIT5


	)

948 
	#£t_PWDT
 
EIP
 |
SET_BIT4


	)

949 
	#£t_PPWM
 
EIP
 |
SET_BIT3


	)

950 
	#£t_PCAP
 
EIP
 |
SET_BIT2


	)

951 
	#£t_PPI
 
EIP
 |
SET_BIT1


	)

952 
	#£t_PI2C
 
EIP
 |
SET_BIT0


	)

954 
	#˛r_PT2
 
EIP
 &~
SET_BIT7


	)

955 
	#˛r_PSPI
 
EIP
 &~
SET_BIT6


	)

956 
	#˛r_PFB
 
EIP
 &~
SET_BIT5


	)

957 
	#˛r_PWDT
 
EIP
 &~
SET_BIT4


	)

958 
	#˛r_PPWM
 
EIP
 &~
SET_BIT3


	)

959 
	#˛r_PCAP
 
EIP
 &~
SET_BIT2


	)

960 
	#˛r_PPI
 
EIP
 &~
SET_BIT1


	)

961 
	#˛r_PI2C
 
EIP
 &~
SET_BIT0


	)

966 
	#£t_CAP13
 
CAPCON3
 |
SET_BIT7


	)

967 
	#£t_CAP12
 
CAPCON3
 |
SET_BIT6


	)

968 
	#£t_CAP11
 
CAPCON3
 |
SET_BIT5


	)

969 
	#£t_CAP10
 
CAPCON3
 |
SET_BIT4


	)

970 
	#£t_CAP03
 
CAPCON3
 |
SET_BIT3


	)

971 
	#£t_CAP02
 
CAPCON3
 |
SET_BIT2


	)

972 
	#£t_CAP01
 
CAPCON3
 |
SET_BIT1


	)

973 
	#£t_CAP00
 
CAPCON3
 |
SET_BIT0


	)

975 
	#˛r_CAP13
 
CAPCON3
 &~
SET_BIT7


	)

976 
	#˛r_CAP12
 
CAPCON3
 &~
SET_BIT6


	)

977 
	#˛r_CAP11
 
CAPCON3
 &~
SET_BIT5


	)

978 
	#˛r_CAP10
 
CAPCON3
 &~
SET_BIT4


	)

979 
	#˛r_CAP03
 
CAPCON3
 &~
SET_BIT3


	)

980 
	#˛r_CAP02
 
CAPCON3
 &~
SET_BIT2


	)

981 
	#˛r_CAP01
 
CAPCON3
 &~
SET_BIT1


	)

982 
	#˛r_CAP00
 
CAPCON3
 &~
SET_BIT0


	)

985 
	#£t_CAP23
 
CAPCON4
 |
SET_BIT3


	)

986 
	#£t_CAP22
 
CAPCON4
 |
SET_BIT2


	)

987 
	#£t_CAP21
 
CAPCON4
 |
SET_BIT1


	)

988 
	#£t_CAP20
 
CAPCON4
 |
SET_BIT0


	)

990 
	#˛r_CAP23
 
CAPCON4
 &~
SET_BIT3


	)

991 
	#˛r_CAP22
 
CAPCON4
 &~
SET_BIT2


	)

992 
	#˛r_CAP21
 
CAPCON4
 &~
SET_BIT1


	)

993 
	#˛r_CAP20
 
CAPCON4
 &~
SET_BIT0


	)

996 
	#£t_SSOE
 
SPCR
 |
SET_BIT7


	)

997 
	#£t_SPIEN
 
SPCR
 |
SET_BIT6


	)

998 
	#£t_LSBFE
 
SPCR
 |
SET_BIT5


	)

999 
	#£t_MSTR
 
SPCR
 |
SET_BIT4


	)

1000 
	#£t_CPOL
 
SPCR
 |
SET_BIT3


	)

1001 
	#£t_CPHA
 
SPCR
 |
SET_BIT2


	)

1002 
	#£t_SPR1
 
SPCR
 |
SET_BIT1


	)

1003 
	#£t_SPR0
 
SPCR
 |
SET_BIT0


	)

1005 
	#˛r_SSOE
 
SPCR
 &~
SET_BIT7


	)

1006 
	#˛r_SPIEN
 
SPCR
 &~
SET_BIT6


	)

1007 
	#˛r_LSBFE
 
SPCR
 &~
SET_BIT5


	)

1008 
	#˛r_MSTR
 
SPCR
 &~
SET_BIT4


	)

1009 
	#˛r_CPOL
 
SPCR
 &~
SET_BIT3


	)

1010 
	#˛r_CPHA
 
SPCR
 &~
SET_BIT2


	)

1011 
	#˛r_SPR1
 
SPCR
 &~
SET_BIT1


	)

1012 
	#˛r_SPR0
 
SPCR
 &~
SET_BIT0


	)

1015 
	#£t_SPIS1
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x01;
SPCR2
|=
SET_BIT1
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

1016 
	#£t_SPIS0
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x00;
SPCR2
|=
SET_BIT1
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

1018 
	#˛r_SPIS1
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x00;
SPCR2
&=~
SET_BIT1
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

1019 
	#˛r_SPIS0
 
BIT_TMP
=
EA
;
TA
=0xAA;TA=0x55;
SFRS
=0x00;
SPCR2
&=~
SET_BIT0
;TA=0xAA;TA=0x55;SFRS=0x00;EA=
	)
BIT_TMP

1022 
	#£t_SPIF
 
SPSR
 |
SET_BIT7


	)

1023 
	#£t_WCOL
 
SPSR
 |
SET_BIT6


	)

1024 
	#£t_SPIOVF
 
SPSR
 |
SET_BIT5


	)

1025 
	#£t_MODF
 
SPSR
 |
SET_BIT4


	)

1026 
	#£t_DISMODF
 
SPSR
 |
SET_BIT3


	)

1028 
	#˛r_SPIF
 
SPSR
 &~
SET_BIT7


	)

1029 
	#˛r_WCOL
 
SPSR
 &~
SET_BIT6


	)

1030 
	#˛r_SPIOVF
 
SPSR
 &~
SET_BIT5


	)

1031 
	#˛r_MODF
 
SPSR
 &~
SET_BIT4


	)

1032 
	#˛r_DISMODF
 
SPSR
 &~
SET_BIT3


	)

1037 
	#£t_P11DIDS
 
AINDIDS
 |
SET_BIT7


	)

1038 
	#£t_P03DIDS
 
AINDIDS
 |
SET_BIT6


	)

1039 
	#£t_P04DIDS
 
AINDIDS
 |
SET_BIT5


	)

1040 
	#£t_P05DIDS
 
AINDIDS
 |
SET_BIT4


	)

1041 
	#£t_P06DIDS
 
AINDIDS
 |
SET_BIT3


	)

1042 
	#£t_P07DIDS
 
AINDIDS
 |
SET_BIT2


	)

1043 
	#£t_P30DIDS
 
AINDIDS
 |
SET_BIT1


	)

1044 
	#£t_P17DIDS
 
AINDIDS
 |
SET_BIT0


	)

1046 
	#˛r_P11DIDS
 
AINDIDS
 &~
SET_BIT7


	)

1047 
	#˛r_P03DIDS
 
AINDIDS
 &~
SET_BIT6


	)

1048 
	#˛r_P04DIDS
 
AINDIDS
 &~
SET_BIT5


	)

1049 
	#˛r_P05DIDS
 
AINDIDS
 &~
SET_BIT4


	)

1050 
	#˛r_P06DIDS
 
AINDIDS
 &~
SET_BIT3


	)

1051 
	#˛r_P07DIDS
 
AINDIDS
 &~
SET_BIT2


	)

1052 
	#˛r_P30DIDS
 
AINDIDS
 &~
SET_BIT1


	)

1053 
	#˛r_P17DIDS
 
AINDIDS
 &~
SET_BIT0


	)

1056 
	#£t_PT2H
 
EIPH
 |
SET_BIT7


	)

1057 
	#£t_PSPIH
 
EIPH
 |
SET_BIT6


	)

1058 
	#£t_PFBH
 
EIPH
 |
SET_BIT5


	)

1059 
	#£t_PWDTH
 
EIPH
 |
SET_BIT4


	)

1060 
	#£t_PPWMH
 
EIPH
 |
SET_BIT3


	)

1061 
	#£t_PCAPH
 
EIPH
 |
SET_BIT2


	)

1062 
	#£t_PPIH
 
EIPH
 |
SET_BIT1


	)

1063 
	#£t_PI2CH
 
EIPH
 |
SET_BIT0


	)

1065 
	#˛r_PT2H
 
EIPH
 &~
SET_BIT7


	)

1066 
	#˛r_PSPIH
 
EIPH
 &~
SET_BIT6


	)

1067 
	#˛r_PFBH
 
EIPH
 &~
SET_BIT5


	)

1068 
	#˛r_PWDTH
 
EIPH
 &~
SET_BIT4


	)

1069 
	#˛r_PPWMH
 
EIPH
 &~
SET_BIT3


	)

1070 
	#˛r_PCAPH
 
EIPH
 &~
SET_BIT2


	)

1071 
	#˛r_PPIH
 
EIPH
 &~
SET_BIT1


	)

1072 
	#˛r_PI2CH
 
EIPH
 &~
SET_BIT0


	)

1075 
	#£t_FE_1
 
FE_1
 = 1

	)

1076 
	#£t_SM1_1
 
SM1_1
 = 1

	)

1077 
	#£t_SM2_1
 
SM2_1
 = 1

	)

1078 
	#£t_REN_1
 
REN_1
 = 1

	)

1079 
	#£t_TB8_1
 
TB8_1
 = 1

	)

1080 
	#£t_RB8_1
 
RB8_1
 = 1

	)

1081 
	#£t_TI_1
 
TI_1
 = 1

	)

1082 
	#£t_RI_1
 
RI_1
 = 1

	)

1084 
	#˛r_FE_1
 
FE_1
 = 0

	)

1085 
	#˛r_SM1_1
 
SM1_1
 = 0

	)

1086 
	#˛r_SM2_1
 
SM2_1
 = 0

	)

1087 
	#˛r_REN_1
 
REN_1
 = 0

	)

1088 
	#˛r_TB8_1
 
TB8_1
 = 0

	)

1089 
	#˛r_RB8_1
 
RB8_1
 = 0

	)

1090 
	#˛r_TI_1
 
TI_1
 = 0

	)

1091 
	#˛r_RI_1
 
RI_1
 = 0

	)

1094 
	#£t_PDT45EN
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
PDTEN
|
SET_BIT2
 ;EA=BIT_TMP;

	)

1095 
	#£t_PDT23EN
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
PDTEN
|
SET_BIT1
 ;EA=BIT_TMP;

	)

1096 
	#£t_PDT01EN
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
PDTEN
|
SET_BIT0
 ;EA=BIT_TMP;

	)

1098 
	#˛r_PDT45EN
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
PDTEN
 &~
SET_BIT2
 ;EA=BIT_TMP;

	)

1099 
	#˛r_PDT23EN
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
PDTEN
 &~
SET_BIT1
 ;EA=BIT_TMP;

	)

1100 
	#˛r_PDT01EN
 
BIT_TMP
=
EA
;EA=0;
TA
=0xAA;TA=0x55;
PDTEN
 &~
SET_BIT0
 ;EA=BIT_TMP;

	)

1105 
	#£t_PMEN5
 
PMEN
 |
SET_BIT5


	)

1106 
	#£t_PMEN4
 
PMEN
 |
SET_BIT4


	)

1107 
	#£t_PMEN3
 
PMEN
 |
SET_BIT3


	)

1108 
	#£t_PMEN2
 
PMEN
 |
SET_BIT2


	)

1109 
	#£t_PMEN1
 
PMEN
 |
SET_BIT1


	)

1110 
	#£t_PMEN0
 
PMEN
 |
SET_BIT0


	)

1112 
	#˛r_PMEN5
 
PMEN
 &~
SET_BIT5


	)

1113 
	#˛r_PMEN4
 
PMEN
 &~
SET_BIT4


	)

1114 
	#˛r_PMEN3
 
PMEN
 &~
SET_BIT3


	)

1115 
	#˛r_PMEN2
 
PMEN
 &~
SET_BIT2


	)

1116 
	#˛r_PMEN1
 
PMEN
 &~
SET_BIT1


	)

1117 
	#˛r_PMEN0
 
PMEN
 &~
SET_BIT0


	)

1120 
	#£t_PMD7
 
PMD
 |
SET_BIT7


	)

1121 
	#£t_PMD6
 
PMD
 |
SET_BIT6


	)

1122 
	#£t_PMD5
 
PMD
 |
SET_BIT5


	)

1123 
	#£t_PMD4
 
PMD
 |
SET_BIT4


	)

1124 
	#£t_PMD3
 
PMD
 |
SET_BIT3


	)

1125 
	#£t_PMD2
 
PMD
 |
SET_BIT2


	)

1126 
	#£t_PMD1
 
PMD
 |
SET_BIT1


	)

1127 
	#£t_PMD0
 
PMD
 |
SET_BIT0


	)

1129 
	#˛r_PMD7
 
PMD
 &~
SET_BIT7


	)

1130 
	#˛r_PMD6
 
PMD
 &~
SET_BIT6


	)

1131 
	#˛r_PMD5
 
PMD
 &~
SET_BIT5


	)

1132 
	#˛r_PMD4
 
PMD
 &~
SET_BIT4


	)

1133 
	#˛r_PMD3
 
PMD
 &~
SET_BIT3


	)

1134 
	#˛r_PMD2
 
PMD
 &~
SET_BIT2


	)

1135 
	#˛r_PMD1
 
PMD
 &~
SET_BIT1


	)

1136 
	#˛r_PMD0
 
PMD
 &~
SET_BIT0


	)

1139 
	#£t_PWKT
 
EIP1
 |
SET_BIT2


	)

1140 
	#£t_PT3
 
EIP1
 |
SET_BIT1


	)

1141 
	#£t_PS_1
 
EIP1
 |
SET_BIT0


	)

1143 
	#˛r_PWKT
 
EIP1
 &~
SET_BIT2


	)

1144 
	#˛r_PT3
 
EIP1
 &~
SET_BIT1


	)

1145 
	#˛r_PS_1
 
EIP1
 &~
SET_BIT0


	)

1148 
	#£t_PWKTH
 
EIPH1
 |
SET_BIT2


	)

1149 
	#£t_PT3H
 
EIPH1
 |
SET_BIT1


	)

1150 
	#£t_PSH_1
 
EIPH1
 |
SET_BIT0


	)

1152 
	#˛r_PWKTH
 
EIPH1
 &~
SET_BIT2


	)

1153 
	#˛r_PT3H
 
EIPH1
 &~
SET_BIT1


	)

1154 
	#˛r_PSH_1
 
EIPH1
 &~
SET_BIT0


	)

	@inc/eeprom_iap.h

1 #i‚de‡
__EEPROM_IAP__


2 
	#__EEPROM_IAP__


	)

4 
	#BASE_ADDRESS
 0x3700

	)

9 
üp_cmd
(
au8IAPCN
, 
au8IAPAH
, 
au8IAPAL
, 
au8IAPFD
, 
au8Fœg
);

10 
Eø£_APROM_Page
();

11 
Wrôe_APROM_BYTE
(, );

12 
UINT16
 
ªad_b™dg≠_vÆue
();

13 
UINT8
 
ªad_uid
(UINT8 
au8Idx
);

	@inc/linefi_packet.h

1 #i‚de‡
__LINEFI_PACKET__


2 
	#__LINEFI_PACKET__


	)

4 
	~"N76E003.h
"

5 
	~"Comm⁄.h
"

6 
	~"Dñay.h
"

7 
	~"SFR_Ma¸o.h
"

8 
	~"Fun˘i⁄_deföe.h
"

9 
	~"u¨t.h
"

10 
	~"löefi_∑ckë.h
"

12 
	#CRC_START_8
 0xFF

	)

15 
	mCRC_NOT_OK
,

16 
	mCRC_OK
,

17 
	mCONV_OK
,

18 
	mCONV_ERR_TOO_SMALLSIZE
,

19 
	mCONV_ERR_CRC


23 
	mTy≥_Bˇ°
,

24 
	mTy≥_Uˇ°
,

25 
	mTy≥_Mˇ°
,

26 
	mTy≥_SëAddr
,

27 
	mTy≥_SëLED
,

28 
	mTy≥_CålMŸ‹
,

29 
	mTy≥_RódAddr
,

30 
	mTy≥_N⁄e


34 
uöt8
 
	mu8Vî
;

35 
uöt8
 
	mu8Ty≥
;

36 
uöt8
 
	mu8Addr
;

37 
uöt8
 
	mu8Size
;

38 
uöt8
 
	mu8CRC
;

39 
uöt8
 * 
	mpu8D©a
;

40 } 
	tlöefi_∑ckë_t
;

42 
uöt8
 
size_löefi_∑ckë
(
löefi_∑ckë_t
 * 
≠°LöeFiPkt
);

43 
UINT8
 
gë_o˘ë_‰om_löefi
(UINT8 * 
≠u8Tmp
);

44 
£nd_o˘ë_to_löefi
(
UINT8
 
au8D©a
);

45 
£nd_löefi_∑ckë
(
löefi_∑ckë_t
 * 
≠°LöeFiPkt
);

46 
uöt8
 
˝_buf2löefùackë
(uöt8 
au8Size
, uöt8 * 
≠u8RxBuf
, 
löefi_∑ckë_t
 * 
≠°LöeFiPkt
);

47 
¥öt_löefùackë
(
löefi_∑ckë_t
 * 
≠°LöeFiPkt
);

48 
uöt8
 
¸c8
–uöt8 *
öput_°r
, uöt8 
num_byãs
, uöt8 
au8CRC
);

49 
¥öt_øw_∑ckë
(
uöt8
 
au8Size
, uöt8 * 
≠u8D©a
);

	@inc/uart.h

1 #i‚de‡
__UART__


2 
	#__UART__


	)

4 
InôülUART0_Timî1
(
UINT32
 
u32Baudøã
);

5 
InôülUART0_Timî3
(
UINT32
 
u32Baudøã
);

6 
InôülUART1_Timî3
(
UINT32
 
u32Baudøã
);

7 
Síd_D©a_To_UART0
(
UINT8
 
c
);

8 
UINT8
 
Re˚ive_D©a_From_UART0
();

9 
UINT8
 
Re˚ive_D©a_From_UART0_nb
(UINT8 * 
≠u8Tmp
);

10 
Síd_D©a_To_UART1
(
UINT8
 
c
);

11 
UINT8
 
Re˚ive_D©a_From_UART1
();

12 
UINT8
 
Re˚ive_D©a_From_UART1_nb
(UINT8 * 
≠u8Tmp
);

13 
InôülUART1
(
UINT32
 
u32Baudøã
);

14 
u¨t_£tup
();

	@lib/Common.c

14 
	~"N76E003.h
"

15 
	~"Comm⁄.h
"

16 
	~"Dñay.h
"

17 
	~"SFR_Ma¸o.h
"

18 
	~"Fun˘i⁄_deföe.h
"

20 #ifde‡
SW_Re£t


21 
	$SW_Re£t
()

23 
TA
 = 0xAA;

24 
TA
 = 0x55;

25 
£t_SWRST
;

26 
	}
}

30 
	$_sdcc_exã∫Æ_°¨tup
 ()

32 
__asm


33 
mov
 0xC7, #0
xAA


34 
mov
 0xC7, #0
x55


35 
mov
 0xFD, #0
x5A


36 
mov
 0xC7, #0
xAA


37 
mov
 0xC7, #0
x55


38 
mov
 0xFD, #0
xA5


39 
__ídasm
;

41 
	}
}

	@lib/Delay.c

14 
	~"N76E003.h
"

15 
	~"Comm⁄.h
"

16 
	~"Dñay.h
"

17 
	~"SFR_Ma¸o.h
"

18 
	~"Fun˘i⁄_deföe.h
"

19 
__bô
 
	gBIT_TMP
;

22 
	$Timî0_Dñay100us
(
UINT32
 
u32CNT
)

24 
˛r_T0M
;

25 
TMOD
 |= 0x01;

26 
£t_TR0
;

27 
u32CNT
 != 0)

29 
TL0
 = 
	`LOBYTE
(
TIMER_DIV12_VALUE_100us
);

30 
TH0
 = 
	`HIBYTE
(
TIMER_DIV12_VALUE_100us
);

31 
TF0
 != 1);

32 
˛r_TF0
;

33 
u32CNT
 --;

35 
˛r_TR0
;

36 
	}
}

38 
	$Timî0_Dñay1ms
(
UINT32
 
u32CNT
)

40 
˛r_T0M
;

41 
TMOD
 |= 0x01;

42 
£t_TR0
;

43 
u32CNT
 != 0)

45 
TL0
 = 
	`LOBYTE
(
TIMER_DIV12_VALUE_1ms
);

46 
TH0
 = 
	`HIBYTE
(
TIMER_DIV12_VALUE_1ms
);

47 
TF0
 != 1);

48 
˛r_TF0
;

49 
u32CNT
 --;

51 
˛r_TR0
;

52 
	}
}

55 
	$Timî1_Dñay10ms
(
UINT32
 
u32CNT
)

57 
˛r_T1M
;

58 
TMOD
 |= 0x10;

59 
£t_TR1
;

60 
u32CNT
 != 0)

62 
TL1
 = 
	`LOBYTE
(
TIMER_DIV12_VALUE_10ms
);

63 
TH1
 = 
	`HIBYTE
(
TIMER_DIV12_VALUE_10ms
);

64 
TF1
 != 1);

65 
˛r_TF1
;

66 
u32CNT
 --;

68 
˛r_TR1
;

69 
	}
}

71 
	$Timî2_Dñay500us
(
UINT32
 
u32CNT
)

73 
˛r_T2DIV2
;

74 
˛r_T2DIV1
;

75 
£t_T2DIV0
;

76 
£t_TR2
;

77 
u32CNT
 != 0)

79 
TL2
 = 
	`LOBYTE
(
TIMER_DIV4_VALUE_500us
);

80 
TH2
 = 
	`HIBYTE
(
TIMER_DIV4_VALUE_500us
);

81 
TF2
 != 1);

82 
˛r_TF2
;

83 
u32CNT
 --;

85 
˛r_TR2
;

86 
	}
}

88 
	$Timî3_Dñay100ms
(
UINT32
 
u32CNT
)

90 
T3CON
 = 0x07;

91 
£t_TR3
;

92 
u32CNT
 != 0)

94 
RL3
 = 
	`LOBYTE
(
TIMER_DIV128_VALUE_100ms
);

95 
RH3
 = 
	`HIBYTE
(
TIMER_DIV128_VALUE_100ms
);

96 (
T3CON
&
SET_BIT4
) != SET_BIT4);

97 
˛r_TF3
;

98 
u32CNT
 --;

100 
˛r_TR3
;

101 
	}
}

103 
	$Timî3_Dñay10us
(
UINT32
 
u32CNT
)

105 
T3CON
 = 0x07;

106 
£t_TR3
;

107 
u32CNT
 != 0)

109 
RL3
 = 
	`LOBYTE
(
TIMER_DIV4_VALUE_10us
);

110 
RH3
 = 
	`HIBYTE
(
TIMER_DIV4_VALUE_10us
);

111 (
T3CON
&
SET_BIT4
) != SET_BIT4);

112 
˛r_TF3
;

113 
u32CNT
 --;

115 
˛r_TR3
;

116 
	}
}

	@lib/eeprom_iap.c

1 
	~"N76E003.h
"

2 
	~"Comm⁄.h
"

3 
	~"SFR_Ma¸o.h
"

4 
	~"Fun˘i⁄_deföe.h
"

6 
	#BASE_ADDRESS
 0x3700

	)

9 
	$üp_cmd
(
au8IAPCN
, 
au8IAPAH
, 
au8IAPAL
, 
au8IAPFD
, 
au8Fœg
)

11 
£t_IAPEN
;

13 i‡(
au8Fœg
) {

14 
£t_APUEN
;

17 
IAPAL
 = 
au8IAPAL
;

18 
IAPAH
 = 
au8IAPAH
;

19 
IAPFD
 = 
au8IAPFD
;

20 
IAPCN
 = 
au8IAPCN
;

22 
£t_IAPGO
;

24 i‡(
au8Fœg
) {

25 
˛r_APUEN
;

26 
˛r_IAPEN
;

28 
	}
}

31 
	$Eø£_APROM_Page
(
u16EPAddr
)

33 
	`üp_cmd
(0x22, (
u16EPAddr
>>8)&0xff, u16EPAddr&0xff, 0xFF, 1);

34 
	}
}

37 
	$Wrôe_APROM_BYTE
(
u16EPAddr
,
u8EPD©a
)

39 
	`üp_cmd
(0x21, (
u16EPAddr
>>8)&0xff, u16EPAddr&0xff, 
u8EPD©a
, 1);

40 
	}
}

42 
UINT16
 
	$ªad_b™dg≠_vÆue
()

44 
UINT8
 
B™dg≠High
,
B™dg≠Low
;

45 
	`üp_cmd
(0x04,0x00,0x0c,0,0);

46 
B™dg≠High
 = 
IAPFD
;

47 
	`üp_cmd
(0x04,0x00,0x0d,0,0);

48 
B™dg≠Low
 = 
IAPFD
;

49 
B™dg≠Low
 = BandgapLow&0x0F;

50 
˛r_IAPEN
;

51  (
B™dg≠High
<<4)+
B™dg≠Low
;

52 
	}
}

54 
UINT8
 
	$ªad_uid
(
UINT8
 
au8Idx
)

56 
UINT8
 
u8Uid
;

57 
	`üp_cmd
(0x04,0x00,
au8Idx
,0,0);

58 
u8Uid
 = 
IAPFD
;

59 
˛r_IAPEN
;

60  
u8Uid
;

61 
	}
}

	@lib/linefi_packet.c

12 
	~"löefi_∑ckë.h
"

13 
	~"u¨t.h
"

15 
uöt16
 
	ggu16C¡
 = 0;

17 c⁄° * 
__xd©a
 
	ggpcTy≥Så
[] = {

48 
uöt8
 
	$size_löefi_∑ckë
(
löefi_∑ckë_t
 * 
≠°LöeFiPkt
)

50  
≠°LöeFiPkt
->
u8Size
 + (
löefi_∑ckë_t
Ë- (
uöt8
 *);

51 
	}
}

53 
uöt8
 
	$ˇlc_¸c_löefi_∑ckë_∑ckë
(
löefi_∑ckë_t
 * 
≠°LöeFiPkt
)

55 
uöt8
 
u8CRC
 = 
	`¸c8
((uöt8 *)
≠°LöeFiPkt
, 4, 0xFF);

56 
u8CRC
 = 
	`¸c8
((
uöt8
 *)(
≠°LöeFiPkt
->
pu8D©a
),áp°LöeFiPkt->
u8Size
, u8CRC);

58  
u8CRC
;

59 
	}
}

61 
	$add_¸c_löefi_∑ckë_∑ckë
(
löefi_∑ckë_t
 * 
≠°LöeFiPkt
)

63 
uöt8
 
u8CRC
 = 
	`ˇlc_¸c_löefi_∑ckë_∑ckë
(
≠°LöeFiPkt
);

64 
≠°LöeFiPkt
->
u8CRC
 = u8CRC;

65 
	}
}

67 
uöt8
 
	$chk_¸c_löefi_∑ckë_∑ckë
(
löefi_∑ckë_t
 * 
≠°LöeFiPkt
)

69 
uöt8
 
u8CRC
 = 
	`ˇlc_¸c_löefi_∑ckë_∑ckë
(
≠°LöeFiPkt
);

71 i‡(
≠°LöeFiPkt
->
u8CRC
 == u8CRC) {

72  
CRC_OK
;

74  
CRC_NOT_OK
;

75 
	}
}

78 
UINT8
 
	$gë_o˘ë_‰om_löefi
(
UINT8
 * 
≠u8Tmp
)

80  
	`Re˚ive_D©a_From_UART1_nb
(
≠u8Tmp
);

81 
	}
}

83 
	$£nd_o˘ë_to_löefi
(
UINT8
 
au8D©a
)

85  
	`Síd_D©a_To_UART1
(
au8D©a
);

86 
	}
}

88 
	$£nd_löefi_∑ckë
(
löefi_∑ckë_t
 * 
≠°LöeFiPkt
)

90 
uöt8
 
u8CRC
 = 
	`ˇlc_¸c_löefi_∑ckë_∑ckë
(
≠°LöeFiPkt
);

92 
uöt8
 * 
pu8Buf
 = (uöt8 *Ë
≠°LöeFiPkt
;

93 
	`£nd_o˘ë_to_löefi
(*
pu8Buf
++);

94 
	`£nd_o˘ë_to_löefi
(*
pu8Buf
++);

95 
	`£nd_o˘ë_to_löefi
(*
pu8Buf
++);

96 
	`£nd_o˘ë_to_löefi
(*
pu8Buf
++);

98 
	`£nd_o˘ë_to_löefi
(
u8CRC
);

99 
uöt8
 
i
;

100 
i
=0;i<
≠°LöeFiPkt
->
u8Size
;i++) {

101 
	`£nd_o˘ë_to_löefi
(*(
≠°LöeFiPkt
->
pu8D©a
+
i
));

103 
	}
}

105 
uöt8
 
	$˝_buf2löefùackë
(
uöt8
 
au8Size
, uöt8 * 
≠u8RxBuf
, 
löefi_∑ckë_t
 * 
≠°LöeFiPkt
)

107 i‡(
au8Size
 < 5) {

108  
CONV_ERR_TOO_SMALLSIZE
;

111 
uöt8
 * 
pu8Buf
 = (uöt8 *Ë
≠°LöeFiPkt
;

112 *
pu8Buf
++ = *
≠u8RxBuf
++;

113 *
pu8Buf
++ = *
≠u8RxBuf
++;

114 *
pu8Buf
++ = *
≠u8RxBuf
++;

115 *
pu8Buf
++ = *
≠u8RxBuf
++;

116 *
pu8Buf
++ = *
≠u8RxBuf
++;

117 
uöt8
 
i
;

118 
i
=0;i<
≠°LöeFiPkt
->
u8Size
;i++) {

119 
≠°LöeFiPkt
->
pu8D©a
[
i
] = *
≠u8RxBuf
++;

122 i‡(
	`chk_¸c_löefi_∑ckë_∑ckë
(
≠°LöeFiPkt
Ë=
CRC_NOT_OK
) {

123  
CONV_ERR_CRC
;

125  
CONV_OK
;

126 
	}
}

128 
	$¥öt_löefùackë
(
löefi_∑ckë_t
 * 
≠°LöeFiPkt
)

130 
	`¥ötf_Á°_f
("-------------------------------\r\n");

131 
	`¥ötf_Á°_f
("Vî : %d\r\n", 
≠°LöeFiPkt
->
u8Vî
);

132 
	`¥ötf_Á°_f
("Ty≥: %d(%s)\r\n", 
≠°LöeFiPkt
->
u8Ty≥
, 
gpcTy≥Så
[apstLineFiPkt->u8Type]);

135 
	`¥ötf_Á°_f
("Addr: %d\r\n", 
≠°LöeFiPkt
->
u8Addr
);

136 
	`¥ötf_Á°_f
("Size: %d\r\n", 
≠°LöeFiPkt
->
u8Size
);

137 
	`¥ötf_Á°_f
("CRC com∞: %d %d\r\n", 
≠°LöeFiPkt
->
u8CRC
, 
	`ˇlc_¸c_löefi_∑ckë_∑ckë
(apstLineFiPkt));

138 
	`¥ötf_Á°_f
("DATA: ");

139 
uöt8
 
i
;

140 
i
=0;i<
≠°LöeFiPkt
->
u8Size
;i++) {

141 
	`¥ötf_Á°_f
("0x%x ", 
≠°LöeFiPkt
->
pu8D©a
[
i
]);

143 
	`¥ötf_Á°_f
("\r\n");

144 
	`¥ötf_Á°_f
("-------------------------------\r\n");

145 
	}
}

147 c⁄° 
uöt8
 
	gsht75_¸c_èbÀ
[] = {

166 
uöt8
 
	$¸c8
–
uöt8
 *
öput_°r
, uöt8 
num_byãs
, uöt8 
au8CRC
)

168 
uöt8
 
a
;

169 
uöt8
 
¸c
;

170 
uöt8
 *
±r
;

172 
¸c
 = 
au8CRC
;

173 
±r
 = 
öput_°r
;

175 i‡–
±r
 !
NULL
 )

176 
a
=0;á<
num_byãs
;á++) {

178 
¸c
 = 
sht75_¸c_èbÀ
[(*
±r
++) ^ crc];

181  
¸c
;

182 
	}
}

184 
	$¥öt_øw_∑ckë
(
uöt8
 
au8Size
, uöt8 * 
≠u8D©a
)

186 
uöt8
 
i
;

187 
	`¥ötf_Á°_f
("#%d\r\n", 
gu16C¡
++);

188 
	`¥ötf_Á°_f
("raw : ");

189 
i
=0;i<
au8Size
;i++) {

190 
	`¥ötf_Á°_f
("%2d ", 
i
);

192 
	`¥ötf_Á°_f
("\r\n");

193 
	`¥ötf_Á°_f
("data:");

194 
i
=0;i<
au8Size
;i++) {

195 i‡(*
≠u8D©a
 < 0x10) {

196 
	`¥ötf_Á°_f
("0x0%x ", *
≠u8D©a
++);

199 
	`¥ötf_Á°_f
("0x%x ", *
≠u8D©a
++);

202 
	`¥ötf_Á°_f
("\r\n");

203 
	}
}

	@lib/uart.c

14 
	~"N76E003.h
"

15 
	~"Comm⁄.h
"

16 
	~"Dñay.h
"

17 
	~"SFR_Ma¸o.h
"

18 
	~"Fun˘i⁄_deföe.h
"

19 
	~"u¨t.h
"

24 
	$InôülUART0_Timî1
(
UINT32
 
u32Baudøã
)

26 
P06_Quasi_Mode
;

27 
P07_Quasi_Mode
;

29 
SCON
 = 0x50;

30 
TMOD
 |= 0x20;

32 
£t_SMOD
;

33 
£t_T1M
;

34 
˛r_BRCK
;

36 #ifde‡
FOSC_160000


37 
TH1
 = 256 - (1000000/
u32Baudøã
+1);

39 #ifde‡
FOSC_166000


40 
TH1
 = 256 - (1037500/
u32Baudøã
);

42 
£t_TR1
;

43 
£t_TI
;

44 
	}
}

46 
	$InôülUART0_Timî3
(
UINT32
 
u32Baudøã
)

48 
P06_Quasi_Mode
;

49 
P07_Quasi_Mode
;

51 
SCON
 = 0x50;

52 
£t_SMOD
;

53 
T3CON
 &= 0xF8;

54 
£t_BRCK
;

56 #ifde‡
FOSC_160000


57 
RH3
 = 
	`HIBYTE
(65536 - (1000000/
u32Baudøã
)-1);

58 
RL3
 = 
	`LOBYTE
(65536 - (1000000/
u32Baudøã
)-1);

60 #ifde‡
FOSC_166000


61 
RH3
 = 
	`HIBYTE
(65536 - (1037500/
u32Baudøã
));

62 
RL3
 = 
	`LOBYTE
(65536 - (1037500/
u32Baudøã
));

64 
£t_TR3
;

65 
£t_TI
;

66 
	}
}

68 
UINT8
 
	$Re˚ive_D©a_From_UART0
()

70 
UINT8
 
c
;

72 !
RI
);

73 
c
 = 
SBUF
;

74 
RI
 = 0;

75  (
c
);

76 
	}
}

78 
UINT8
 
	$Re˚ive_D©a_From_UART0_nb
(
UINT8
 * 
≠u8Tmp
)

80 i‡(
RI
) {

81 *
≠u8Tmp
 = 
SBUF
;

82 
RI
 = 0;

86 
	}
}

88 
	$Síd_D©a_To_UART0
 (
UINT8
 
c
)

90 
TI
 = 0;

91 
SBUF
 = 
c
;

92 
TI
==0);

93 
	}
}

106 
	$InôülUART1_Timî3
(
UINT32
 
u32Baudøã
)

108 
P02_Quasi_Mode
;

109 
P16_Quasi_Mode
;

112 
SCON_1
 = 0x58;

113 
T3CON
 = 0x08;

114 
˛r_BRCK
;

116 #ifde‡
FOSC_160000


117 
RH3
 = 
	`HIBYTE
(65536 - (1000000/
u32Baudøã
)-1);

118 
RL3
 = 
	`LOBYTE
(65536 - (1000000/
u32Baudøã
)-1);

120 #ifde‡
FOSC_166000


121 
RH3
 = 
	`HIBYTE
(65536 - (1037500/
u32Baudøã
));

122 
RL3
 = 
	`LOBYTE
(65536 - (1037500/
u32Baudøã
));

124 
£t_TR3
;

125 
	}
}

127 
UINT8
 
	$Re˚ive_D©a_From_UART1
()

129 
UINT8
 
c
;

131 !
RI_1
);

132 
c
 = 
SBUF_1
;

133 
RI_1
 = 0;

134  (
c
);

135 
	}
}

137 
UINT8
 
	$Re˚ive_D©a_From_UART1_nb
(
UINT8
 * 
≠u8Tmp
)

139 i‡(
RI_1
) {

140 *
≠u8Tmp
 = 
SBUF_1
;

141 
RI_1
 = 0;

145 
	}
}

147 
	$Síd_D©a_To_UART1
 (
UINT8
 
c
)

149 
TI_1
 = 0;

150 
SBUF_1
 = 
c
;

151 
TI_1
==0);

152 
	}
}

154 
	$u¨t_£tup
()

159 
	`InôülUART0_Timî1
(57600);

160 
	`InôülUART1_Timî3
(115200);

161 
˛r_TI
;

162 
˛r_TI_1
;

163 
£t_ES
;

164 
£t_EA
;

165 
	}
}

	@master/src/main.c

1 
	ghâps
:

17 
	~"N76E003.h
"

18 
	~"Comm⁄.h
"

19 
	~"Dñay.h
"

20 
	~"SFR_Ma¸o.h
"

21 
	~"Fun˘i⁄_deföe.h
"

22 
	~"u¨t.h
"

23 
	~"löefi_∑ckë.h
"

25 
	#KEY_ESC
 (27)

	)

26 
	#TIMER0_VAL
 (133*80+605)

37 

	)

38 
	#TH0_INIT
 (((65536-
TIMER0_VAL
)>>8)&0xFF)

	)

39 
	#TL0_INIT
 ((65536-
TIMER0_VAL
)&0xFF)

	)

41 
	#PREAMBLE_CNT1
 (2)

	)

42 
	#PREAMBLE_CNT2
 (6)

	)

43 
	#PREAMBLE_CNT_MAX
 (100)

	)

45 
	#__VERSION__
 "Vîsi⁄ 1.4 o¿20231026\r\n"

	)

48 
	#SW1
 
P13


	)

49 
	#SW2
 
P30


	)

50 
	#SW3
 
P17


	)

51 
	#SW4
 
P00


	)

52 
	#SW5
 
P15


	)

54 
	#SW_U
 
SW5


55 
	#SW_D
 
SW1


56 
	#SW_L
 
SW4


57 
	#SW_R
 
SW2


58 
	#SW_C
 
SW3


59 

	)

60 
	#SW_ON
 (1)

	)

61 
	#SW_OFF
 (0)

	)

62 
	#SW_DB
 (3)

	)

63 
	#SW_NONE
 (4)

	)

65 
	#LINEFI_EN0
 
P10


	)

66 
	#LINEFI_EN1
 
P11


	)

67 
	#LINEFI_EN2
 
P12


	)

68 
	#LINEFI_TX
 
P16


	)

70 
	#MAX_STATE_UART0_INPUT
 4

	)

72 c⁄° * 
__xd©a
 
gcU¨tI≈utMode
[
MAX_STATE_UART0_INPUT
] = {

80 
	mUART0_INPUT_MODE0
,

81 
	mUART0_INPUT_MODE1
,

82 
	mUART0_INPUT_MODE2
,

83 
	mUART0_INPUT_MODE3
,

84 
	mUART0_INPUT_MODE4


87 
UINT8
 
__xd©a
 
	ggpu8D©a
[20] = {

95 
UINT8
 
__xd©a
 
	ggpu8D©a2
[20] = {

103 
	#LINEFI_DEFAULT_RATE
 3

	)

105 
uöt16
 
__xd©a
 
	ggu16TimeC¡
;

106 
UINT32
 
__xd©a
 
	ggpu32U¨tS≥ed
[] = {

123 
UINT8
 
	ggu8UART
 = 0;

126 
	$putch¨
 (
c
)

128 i‡(
gu8UART
 == 0) {

129 
TI
 = 0;

130 
SBUF
 = 
c
;

131 
TI
==0);

134 
TI_1
 = 0;

135 
SBUF_1
 = 
c
;

136 
TI_1
==0);

138 
	}
}

141 
	mSTATE_SELF
,

142 
	mSTATE_CROSS
,

143 
	mSTATE_BOTH


147 
	mSTATE_RxCSC_INIT
,

148 
	mSTATE_RxCSC_RX
,

149 
	mSTATE_RxCSC_RX_RAW
,

150 
	mSTATE_RxCSC_RX_ASCII
,

151 
	mSTATE_RxCSC_STOP
,

152 
	mSTATE_RxCSC_END


155 
	$¥öt_esc
(
UINT8
 
au8Sèã
)

157 
	`¥ötf_Á°_f
("\n\r");

158 
au8Sèã
) {

159 
STATE_SELF
 :

160 
	`¥ötf_Á°_f
("self ");

162 
STATE_CROSS
 :

163 
	`¥ötf_Á°_f
("cross");

165 
STATE_BOTH
 :

166 
	`¥ötf_Á°_f
("both ");

169 
	`¥ötf_Á°_f
(" ouçut:Thi†i†UART%d\n\r", 
gu8UART
);

170 
	}
}

172 
	$¥öt_ch¨
(
au8D©a
)

174 
au8D©a
) {

175 
KEY_ESC
 :

178 
	`¥ötf_Á°_f
("\r\n");

181 
	`¥ötf_Á°_f
("%c",
au8D©a
);

183 
	}
}

185 
UINT8
 
	$°©e_machöe
(
UINT8
 
au8Sèã
, UINT8 
au8RxUART
, UINT8 
au8SñfID
, UINT8 
au8OthîID
)

187 if(
au8RxUART
 =
KEY_ESC
) {

188 
gu8UART
 = 
au8SñfID
;

189 
	`¥ötf_Á°_f
("\r\nöput:Thi†i†UART%d", 
gu8UART
);

190 
au8Sèã
) {

191 
STATE_SELF
 :

192 
au8Sèã
 = 
STATE_CROSS
;

193 
gu8UART
 = 
au8SñfID
;

194 
	`¥öt_esc
(
au8Sèã
);

195 
gu8UART
 = 
au8OthîID
;

196 
	`¥öt_esc
(
au8Sèã
);

198 
STATE_CROSS
 :

199 
au8Sèã
 = 
STATE_BOTH
;

200 
gu8UART
 = 
au8SñfID
;

201 
	`¥öt_esc
(
au8Sèã
);

202 
gu8UART
 = 
au8OthîID
;

203 
	`¥öt_esc
(
au8Sèã
);

205 
STATE_BOTH
 :

206 
au8Sèã
 = 
STATE_SELF
;

207 
gu8UART
 = 
au8SñfID
;

208 
	`¥öt_esc
(
au8Sèã
);

213 
au8Sèã
) {

214 
STATE_SELF
 :

215 
gu8UART
 = 
au8SñfID
;

216 
	`¥öt_ch¨
(
au8RxUART
);

218 
STATE_CROSS
 :

219 
gu8UART
 = 
au8OthîID
;

220 
	`¥öt_ch¨
(
au8RxUART
);

222 
STATE_BOTH
 :

223 
gu8UART
 = 
au8SñfID
;

224 
	`¥öt_ch¨
(
au8RxUART
);

225 
gu8UART
 = 
au8OthîID
;

226 
	`¥öt_ch¨
(
au8RxUART
);

230  
au8Sèã
;

231 
	}
}

233 
	$Timî0_ISR
 (Ë
	$öãºu±
(1)

235 
TH0
 = 
TH0_INIT
;

236 
TL0
 = 
TL0_INIT
;

237 
gu16TimeC¡
++;

239 i‡(
P06
) {

240 
P06
 = 0;

243 
P06
 = 1;

246 
	}
}

248 
	$pö_öãºu±_i§
(Ë
	$öãºu±
(7)

250 i‡(
PIF
 == 0x10) {

252 
PIF
 = 0;

253 
	}
}

255 
UINT8
 
	$chk_m™che°î
(
UINT8
 
c
)

257 
UINT8
 
i
;

258 
i
=0;i<4;i++) {

259 i‡(((
c
>>(2*
i
)) & 1) == ((c>>((2*i+1)))&1)) {

265 
	}
}

267 
UINT8
 
	$c⁄v_m™che°î2nibbÀ
(
UINT8
 
c
)

269 
UINT8
 
i
;

270 
UINT8
 
u8NibbÀ
 = 0;

271 
i
=0;i<4;i++) {

272 i‡(
c
 & 1) {

273 
u8NibbÀ
 |= 0x80;

275 
c
 >>= 2;

276 
u8NibbÀ
 >>= 1;

278  
u8NibbÀ
;

279 
	}
}

281 
UINT8
 
	$c⁄v_m™che°î2highnibbÀ
(
UINT8
 
c
)

283 
UINT8
 
i
;

284 
UINT8
 
u8NibbÀ
 = 0;

285 
i
=0;i<4;i++) {

286 
u8NibbÀ
 >>= 1;

287 i‡(
c
 & 1) {

288 
u8NibbÀ
 |= 0x80;

290 
c
 >>= 2;

292  
u8NibbÀ
;

293 
	}
}

295 
	$MODIFY_HIRC_166
()

297 
húcm≠0
,
húcm≠1
;

298 
åimvÆue16bô
;

300 i‡((
PCON
&
SET_BIT4
)==SET_BIT4) {

301 
húcm≠0
 = 
RCTRIM0
;

302 
húcm≠1
 = 
RCTRIM1
;

303 
åimvÆue16bô
 = ((
húcm≠0
<<1)+(
húcm≠1
&0x01));

304 
åimvÆue16bô
 =Årimvalue16bit - 15;

305 
húcm≠1
 = 
åimvÆue16bô
&0x01;

306 
húcm≠0
 = 
åimvÆue16bô
>>1;

307 
TA
=0XAA;

308 
TA
=0X55;

309 
RCTRIM0
 = 
húcm≠0
;

310 
TA
=0XAA;

311 
TA
=0X55;

312 
RCTRIM1
 = 
húcm≠1
;

314 
PCON
 &
CLR_BIT4
;

316 
	}
}

317 
	$di•_hñp
(
UINT8
 
au8Code
)

319 
gu8UART
 = 1;

320 
au8Code
) {

326 
	`¥ötf_Á°_f
("IdleÖreamble on/off\r\n");

331 
	`¥ötf_Á°_f
("LineFi Power Off\r\n");

334 
	`¥ötf_Á°_f
("LineFi Power On\r\n");

337 
	`¥ötf_Á°_f
("LineFi Uart Tx Low\r\n");

340 
	`¥ötf_Á°_f
("LineFi Uart Tx High\r\n");

343 
	`¥ötf_Á°_f
("LineFi CSCÑx FSM Off\r\n");

346 
	`¥ötf_Á°_f
("LineFi CSCÑx FSM ON\r\n");

349 
	`¥ötf_Á°_f
(
__VERSION__
);

352 
	`¥ötf_Á°_f
("1: downlinkÖacket 1\r\n");

353 
	`¥ötf_Á°_f
("2: downlinkÖacket 2\r\n");

354 
	`¥ötf_Á°_f
("3: uplink idleÖreamble on/off\r\n");

355 
	`¥ötf_Á°_f
("p/P: LineFi Power off/on\r\n");

356 
	`¥ötf_Á°_f
("t/T: LineFi Uart Tx Low/High\r\n");

357 
	`¥ötf_Á°_f
("s/S: LineFie CSC Rx FSM off/on\r\n");

358 
	`¥ötf_Á°_f
("testÖrocedure:Ö -> P -> T -> S -> 1 or 2\r\n");

361 
	}
}

363 
	$gpio_£tup
()

391 
Së_AŒ_GPIO_Quasi_Mode
;

393 
P13_I≈ut_Mode
;

394 
P30_I≈ut_Mode
;

395 
P17_I≈ut_Mode
;

396 
P00_I≈ut_Mode
;

397 
P15_I≈ut_Mode
;

399 
P05_I≈ut_Mode
;

400 
P04_I≈ut_Mode
;

402 
P10_PushPuŒ_Mode
;

403 
P11_PushPuŒ_Mode
;

404 
P12_PushPuŒ_Mode
;

405 
LINEFI_EN0
 = 0;

406 
LINEFI_EN1
 = 0;

407 
LINEFI_EN2
 = 0;

408 
	}
}

411 
	mSTATE_SW_NO_ACTION
,

412 
	mSTATE_SW1_OFF
,

413 
	mSTATE_SW2_OFF
,

414 
	mSTATE_SW3_OFF
,

415 
	mSTATE_SW4_OFF
,

416 
	mSTATE_SW1_ON
,

417 
	mSTATE_SW2_ON
,

418 
	mSTATE_SW3_ON
,

419 
	mSTATE_SW4_ON
,

420 
	mSTATE_SW_DUAL_ON
,

421 
	mSTATE_SW_DUAL_WAIT
,

422 
	mSTATE_SW_DUAL_OFF
,

423 
	mSTATE_SW_END


426 
UINT8
 
	$°©e_swôches
(
UINT8
 
au8SW
, UINT8 *
≠u8SwNum
)

428 
UINT8
 
su8PªvSW
 = 0;

429 
UINT8
 
i
;

431 
UINT8
 
u8Resu…
 = 
SW_NONE
;

432 i‡(
su8PªvSW
 =
au8SW
) {

433 *
≠u8SwNum
 = 0;

434  
SW_NONE
;

442 *
≠u8SwNum
 = 0;

444 
i
=0;i<5;i++) {

445 (
su8PªvSW
>>
i
)&1) {

446 
SW_ON
 :

447 (
au8SW
>>
i
)&1) {

448 
SW_ON
 :

450 
SW_OFF
 :

451 
su8PªvSW
 = 
au8SW
;

452 *
≠u8SwNum
 |1<<
i
;

453 
u8Resu…
 = 
SW_OFF
;

458 
SW_OFF
 :

459 (
au8SW
>>
i
)&1) {

460 
SW_ON
 :

461 
su8PªvSW
 = 
au8SW
;

462 *
≠u8SwNum
 |1<<
i
;

463 
u8Resu…
 = 
SW_ON
;

467 
SW_OFF
 :

475  
u8Resu…
;

477 
su8C¡
++;

478 
UINT8
 
u8Resu…
;

479 
UINT8
 
u8PªvSW
 = 
su8Sèã
;

480 i‡(
au8SW
 !
u8PªvSW
) {

481 
UINT8
 
i
;

482 
i
=0;i<4;i++) {

483 i‡(((
au8SW
>>
i
)&1Ë!((
u8PªvSW
>>i)&1)) {

484 i‡((
au8SW
>>
i
)&1) {

494 i‡(((
au8SW
>>3)&1Ë!((
u8PªvSW
>>3)&1)) {

495 i‡((
au8SW
>>3)&1) {

504 i‡(
u8PªvSW
) {

506 
u8PªvSW
) {

507 
STATE_SW1_ON
 :

509 
STATE_SW2_ON
 :

511 
STATE_SW3_ON
 :

513 
STATE_SW4_ON
 :

515 
STATE_SW_DUAL_ON
 :

517 
STATE_SW_DUAL_WAIT
 :

523 
su8Sèã
) {

524 
STATE_SW1_ON
 :

525 
u8Resu…
 = 
STATE_SW1_OFF
;

527 
STATE_SW2_ON
 :

528 
u8Resu…
 = 
STATE_SW2_OFF
;

530 
STATE_SW3_ON
 :

531 
u8Resu…
 = 
STATE_SW3_OFF
;

533 
STATE_SW4_ON
 :

534 
u8Resu…
 = 
STATE_SW4_OFF
;

536 
STATE_SW_DUAL_ON
 :

537 
u8Resu…
 = 
STATE_SW_DUAL_OFF
;

543 
su8Sèã
) {

544 
STATE_SW1_ON
 :

545 
STATE_SW2_ON
 :

546 
STATE_SW3_ON
 :

547 
STATE_SW4_ON
 :

548 
STATE_SW1_OFF
 :

549 
STATE_SW2_OFF
 :

550 
STATE_SW3_OFF
 :

551 
STATE_SW4_OFF
 :

552 
STATE_SW_DUAL_ON
 :

553 
STATE_SW_DUAL_OFF
 :

554 
u8Resu…
 = 
STATE_SW_NO_ACTION
;

560 
su8Sèã
 = 
au8SW
;

563 
	}
}

567 
	$¥ötoutbuf
(
uöt8
 
aucBufIdx
, * 
≠cBuf
)

569 
uöt8
 
__xd©a
 
i
;

570 
i
=0;i<
aucBufIdx
;i++) {

571 
	`¥ötf_Á°_f
("%c", *
≠cBuf
++);

573 
	`¥ötf_Á°_f
("\r\n");

574 
	}
}

577 
	$¥öt_hñp
()

579 
	`¥ötf_Á°_f
("t:Åimer\r\n");

580 
	`¥ötf_Á°_f
("0: LineFi EN0,1,2 off\r\n");

581 
	`¥ötf_Á°_f
("1: LineFi EN0 = 1\r\n");

582 
	`¥ötf_Á°_f
("2:\r\n");

583 
	`¥ötf_Á°_f
("3:\r\n");

584 
	`¥ötf_Á°_f
("4:\r\n");

585 
	`¥ötf_Á°_f
("5:\r\n");

586 
	`¥ötf_Á°_f
("6:\r\n");

587 
	`¥ötf_Á°_f
("7:\r\n");

588 
	`¥ötf_Á°_f
("h: Addr--\r\n");

589 
	`¥ötf_Á°_f
("j: Cmd--\r\n");

590 
	`¥ötf_Á°_f
("k: Cmd++\r\n");

591 
	`¥ötf_Á°_f
("l: Addr++\r\n");

592 
	`¥ötf_Á°_f
("s: sending\r\n");

593 
	}
}

595 
	$a˘_by_⁄e_key
(
uöt8
 
au8RxUART
, uöt8 * 
≠u8LöeFiCmd
, uöt8 * 
≠u8LöeFiAddr
)

597 
UINT8
 
__xd©a
 
u8D©a
 = 0;

598 
au8RxUART
) {

600 
	`¥ötf_Á°_f
("%u\n\r", 
gu16TimeC¡
);

601 
gu16TimeC¡
 = 0;

604 
gu8UART
 = 0;

605 
LINEFI_EN0
 = 0;

606 
LINEFI_EN1
 = 0;

607 
LINEFI_EN2
 = 0;

608 
	`¥ötf_Á°_f
("LINEFI_EN0=0\n\r");

611 
gu8UART
 = 0;

612 
LINEFI_EN0
 = 1;

613 
	`¥ötf_Á°_f
("LINEFI_EN0=1\n\r");

616 
gu8UART
 = 0;

617 
LINEFI_TX
 = 0;

618 
	`¥ötf_Á°_f
("LINEFI_TX=0\n\r");

621 
gu8UART
 = 0;

622 
LINEFI_TX
 = 1;

623 
	`¥ötf_Á°_f
("LINEFI_TX=1\n\r");

626 
gu8UART
 = 0;

627 
	`TOGGLE
(
LINEFI_TX
);

628 
	`¥ötf_Á°_f
("LINEFI_TX=%d\n\r", 
LINEFI_TX
);

631 
gu8UART
 = 0;

632 i‡(
LINEFI_EN0
 == 0) {

633 
LINEFI_TX
 = 1;

635 
	`TOGGLE
(
LINEFI_EN0
);

636 
	`¥ötf_Á°_f
("LINEFI_EN0=");

637 
	`¥ötf_Á°_f
("%d\n\r", 
LINEFI_EN0
);

640 
	`TOGGLE
(
LINEFI_EN1
);

641 
	`¥ötf_Á°_f
("LINEFI_EN1=");

642 
	`¥ötf_Á°_f
("%d\n\r", 
LINEFI_EN1
);

645 
	`TOGGLE
(
LINEFI_EN2
);

646 
	`¥ötf_Á°_f
("LINEFI_EN2=");

647 
	`¥ötf_Á°_f
("%d\n\r", 
LINEFI_EN2
);

653 (*
≠u8LöeFiAddr
)--;

654 i‡(*
≠u8LöeFiCmd
 == 1) {

655 
	`¥ötf_Á°_f
("u¨à•ìd: %lu:\n\r", 
gpu32U¨tS≥ed
[*
≠u8LöeFiAddr
]);

658 
	`¥ötf_Á°_f
("addªss: %d\n\r", *
≠u8LöeFiAddr
);

662 (*
≠u8LöeFiCmd
)--;

663 
	`¥ötf_Á°_f
("comm™d: %d\n\r", *
≠u8LöeFiCmd
);

666 (*
≠u8LöeFiCmd
)++;

667 
	`¥ötf_Á°_f
("comm™d: %d\n\r", *
≠u8LöeFiCmd
);

670 (*
≠u8LöeFiAddr
)++;

671 i‡(*
≠u8LöeFiCmd
 == 1) {

672 
	`¥ötf_Á°_f
("u¨à•ìd: %lu:\n\r", 
gpu32U¨tS≥ed
[*
≠u8LöeFiAddr
]);

675 
	`¥ötf_Á°_f
("addªss: %d\n\r", *
≠u8LöeFiAddr
);

679 *
≠u8LöeFiCmd
) {

681 
	`£nd_o˘ë_to_löefi
((((*
≠u8LöeFiAddr
)<<4)&0xF0Ë| (*
≠u8LöeFiCmd
)&0x0F);

682 
	`¥ötf_Á°_f
("LöeFòSídög: 0x%x:\n\r", ((*
≠u8LöeFiAddr
)<<4Ë| *
≠u8LöeFiCmd
);

683 
	`¥ötf_Á°_f
("addªss: 0x%d:\n\r", *
≠u8LöeFiAddr
);

686 
	`£nd_o˘ë_to_löefi
((((*
≠u8LöeFiAddr
)<<4)&0xF0Ë| (*
≠u8LöeFiCmd
)&0x0F);

687 
	`¥ötf_Á°_f
("LöeFòSídög: 0x%x:\n\r", ((*
≠u8LöeFiAddr
)<<4Ë| *
≠u8LöeFiCmd
);

688 
	`¥ötf_Á°_f
("u¨à•ìd: %lu:\n\r", 
gpu32U¨tS≥ed
[*
≠u8LöeFiAddr
]);

691 
	`£nd_o˘ë_to_löefi
((((*
≠u8LöeFiAddr
)<<4)&0xF0Ë| (*
≠u8LöeFiCmd
)&0x0F);

692 
	`¥ötf_Á°_f
("LöeFòSídög: 0x%x:\n\r", ((*
≠u8LöeFiAddr
)<<4Ë| *
≠u8LöeFiCmd
);

697 
	`¥ötf_Á°_f
("u¨à•ìd: %lu:\n\r", 
gpu32U¨tS≥ed
[*
≠u8LöeFiAddr
]);

698 
	`InôülUART1_Timî3
(
gpu32U¨tS≥ed
[*
≠u8LöeFiAddr
]);

702 
	`£nd_o˘ë_to_löefi
(
u8D©a
);

703 
	`¥ötf_Á°_f
("LöeFòSídög: %d(0x%x)\n\r", 
u8D©a
, u8Data);

706 
u8D©a
++;

707 
	`¥ötf_Á°_f
("£nd d©®%d(0x%x)\n\r", 
u8D©a
, u8Data);

710 
u8D©a
--;

711 
	`¥ötf_Á°_f
("£nd d©®%d(0x%x)\n\r", 
u8D©a
, u8Data);

715 
	`£nd_o˘ë_to_löefi
(0x11);

718 
	`£nd_o˘ë_to_löefi
(0x12);

721 
	`£nd_o˘ë_to_löefi
(0x13);

724 
	`¥öt_hñp
();

727 
	}
}

732 
	$maö
 ()

734 
UINT8
 
su8SW
 = 0;

735 
UINT8
 
u8EnC¡
 = 0;

736 
UINT8
 
u8RxUART
;

737 
UINT16
 
u16C¡
 = 0;

738 
UINT8
 
u8OuçutSèã
 = 
STATE_SELF
;

739 
UINT8
 
u8SèãRxCSC
 = 
STATE_RxCSC_STOP
;

740 
UINT8
 
u8LöeFiAddr
 = 1;

741 
UINT8
 
u8LöeFiS≥ed
 = 1;

742 
UINT8
 
u8LöeFiCmd
 = 1;

743 
UINT8
 
u8PwrOnFú°Fœg
 = 1;

744 
UINT8
 
u8SwNum
;

746 
uöt8
 
u8SèãU¨t0I≈utMode
 = 
UART0_INPUT_MODE0
;

748 
__xd©a
 
pcBuf
[100];

749 
	#MAX_DATA
 10

	)

750 
__xd©a
 
pu8D©a
[
MAX_DATA
] = {0,0,0,0,0,0,0,0,0,0};

751 
__xd©a
 
u8D©aIdx
 = 0;

752 
uöt8
 
__xd©a
 
ucBufIdx
 = 0;

754 
löefi_∑ckë_t
 
__xd©a
 
p°LöeFiPkt
[] = {

755 {1,2,1,10,5, 
gpu8D©a
},

756 {1,2,2,10,5, 
gpu8D©a
},

757 {1,2,3,10,5, 
gpu8D©a
},

758 {1,2,4,10,5, 
gpu8D©a
},

759 {1,2,5,10,5, 
gpu8D©a
},

762 
löefi_∑ckë_t
 
°LöeFiPkt
 = {

768 
gpu8D©a


771 
	`gpio_£tup
();

772 
	`u¨t_£tup
();

774 
	`MODIFY_HIRC_166
();

776 
˛r_T0M
;

779 
£t_ET0
;

780 
£t_TR0
;

782 
gu8UART
 = 0;

783 
	`¥ötf_Á°_f
("This is UART0\n\r");

784 
	`¥ötf_Á°_f
("LineFi Master\n\r");

785 
gu8UART
 = 1;

786 
	`¥ötf_Á°_f
("This is UART1\n\r");

787 
UINT8
 
u8RxBufIdx
 = 0;

788 
UINT16
 
u8Cou¡2
 = 0;

790 
UINT8
 
u8RxPktC¡
 = 0;

791 
UINT8
 
u8PªambÀC¡
 = 0;

793 
u16C¡
 = 0 ; u16Cnt < 30000; u16Cnt++) {

794 
n›
;Çop;Çop;Çop;Çop;

796 
LINEFI_TX
 = 1;

797 
LINEFI_EN0
 = 0;

798 
gu8UART
 = 0;

802 
	`InôülUART1_Timî3
(
gpu32U¨tS≥ed
[0]);

803 
	`£nd_o˘ë_to_löefi
(((
LINEFI_DEFAULT_RATE
<<4)&0xF0) | (1)&0x0F);

805 
u16C¡
 = 0 ; u16Cnt < 30000; u16Cnt++) {

806 
n›
;Çop;Çop;Çop;Çop;

809 
	`InôülUART1_Timî3
(
gpu32U¨tS≥ed
[
LINEFI_DEFAULT_RATE
]);

811 
u16C¡
 = 0 ; u16Cnt < 30000; u16Cnt++) {

812 
n›
;Çop;Çop;Çop;Çop;

814 
LINEFI_TX
 = 1;

816 
LINEFI_EN0
 = 0;

817 
LINEFI_EN1
 = 1;

818 
LINEFI_EN2
 = 0;

819 
	`¥ötf
("%s\r\n", 
gcU¨tI≈utMode
[
u8SèãU¨t0I≈utMode
]);

824 i‡(
	`Re˚ive_D©a_From_UART0_nb
(&
u8RxUART
)) {

825 
u8RxUART
) {

826 
KEY_ESC
 :

827 
u8SèãU¨t0I≈utMode
++;

828 i‡(
u8SèãU¨t0I≈utMode
 =
MAX_STATE_UART0_INPUT
) {

829 
u8SèãU¨t0I≈utMode
 = 0;

831 
	`¥ötf
("%s\r\n", 
gcU¨tI≈utMode
[
u8SèãU¨t0I≈utMode
]);

834 
u8SèãU¨t0I≈utMode
) {

835 
UART0_INPUT_MODE0
 :

836 
	`a˘_by_⁄e_key
(
u8RxUART
, &
u8LöeFiCmd
, &
u8LöeFiAddr
);

838 
UART0_INPUT_MODE1
 :

839 
gu16TimeC¡
 = 0;

840 
pcBuf
[
ucBufIdx
++] = 
u8RxUART
;

843 
UART0_INPUT_MODE2
 :

844 
u8RxUART
) {

846 
u8LöeFiAddr
--;

847 i‡(
u8LöeFiAddr
 == 0) {

848 
u8LöeFiAddr
 = 1;

852 
u8LöeFiCmd
--;

853 i‡(
u8LöeFiCmd
 == 0) {

854 
u8LöeFiCmd
 = 1;

858 
°LöeFiPkt
.
pu8D©a
 =Öu8Data;

859 
	`£nd_löefi_∑ckë
(&
°LöeFiPkt
);

863 
u8LöeFiCmd
++;

864 i‡(
u8LöeFiCmd
 == 101) {

865 
u8LöeFiCmd
 = 100;

867 
	`¥ötf_Á°_f
("comm™d: %d\n\r", 
u8LöeFiCmd
);

870 
u8LöeFiAddr
++;

871 i‡(
u8LöeFiAddr
 == 16) {

872 
u8LöeFiAddr
 = 15;

874 
	`¥ötf_Á°_f
("addªss: %d\n\r", 
u8LöeFiAddr
);

878 
u8RxUART
) {

883 
°LöeFiPkt
.
u8Addr
 = 
u8LöeFiAddr
;

884 
°LöeFiPkt
.
u8Ty≥
 = 
u8LöeFiCmd
;

885 
	`¥öt_löefùackë
(&
°LöeFiPkt
);

893 
UART0_INPUT_MODE3
 :

894 
u8RxUART
) {

896 
u8D©aIdx
--;

897 i‡(
u8D©aIdx
 == 255) {

898 
u8D©aIdx
 = 0;

902 
pu8D©a
[
u8D©aIdx
]--;

905 
pu8D©a
[
u8D©aIdx
]++;

908 
u8D©aIdx
++;

909 i‡(
u8D©aIdx
 =
MAX_DATA
) {

910 
u8D©aIdx
--;;

914 
u8RxUART
) {

917 
	`¥ötf_Á°_f
("D©aIdx:%d\r\n", 
u8D©aIdx
);

922 
uöt8
 
i
;

923 
i
=0;i<
MAX_DATA
;i++) {

924 
	`¥ötf
("0x%x ", 
pu8D©a
[
i
]);

926 
	`¥ötf_Á°_f
("\r\n");

930 
UART0_INPUT_MODE4
 :

937 
u8SèãU¨t0I≈utMode
) {

938 
UART0_INPUT_MODE0
 :

940 
UART0_INPUT_MODE1
 :

941 i‡(
gu16TimeC¡
 > 10 && 
ucBufIdx
 != 0) {

942 
	`¥ötoutbuf
(
ucBufIdx
, 
pcBuf
);

943 
ucBufIdx
 = 0;

946 
UART0_INPUT_MODE2
 :

948 
UART0_INPUT_MODE3
 :

950 
UART0_INPUT_MODE4
 :

960 i‡(
u8PwrOnFú°Fœg
) {

961 
	`°©e_swôches
((
SW_U
<<0)| (
SW_R
<<1)| (
SW_L
<<2)| (
SW_D
<<3Ë| (
SW_C
<<4), &
u8SwNum
)) {

962 
SW_ON
 :

963 
u8PwrOnFú°Fœg
) {

965 
LINEFI_TX
 = 1;

966 
LINEFI_EN0
 = 1;

967 
u8PwrOnFú°Fœg
++;

970 
	`InôülUART1_Timî3
(
gpu32U¨tS≥ed
[0]);

971 
	`£nd_o˘ë_to_löefi
(((
LINEFI_DEFAULT_RATE
<<4)&0xF0) | (1)&0x0F);

972 
	`¥ötf_Á°_f
("u¨à•ìd: %lu:\n\r", 
gpu32U¨tS≥ed
[
LINEFI_DEFAULT_RATE
]);

973 
	`InôülUART1_Timî3
(
gpu32U¨tS≥ed
[
LINEFI_DEFAULT_RATE
]);

974 
u8PwrOnFú°Fœg
++;

975 
u8LöeFiCmd
 = 2;

976 
u8LöeFiAddr
 = 1;

977 
u8PwrOnFú°Fœg
 = 0;

980 
u8PwrOnFú°Fœg
++;

983 
u8PwrOnFú°Fœg
++;

986 
u8PwrOnFú°Fœg
++;

991 
u8SwNum
) {

993 
	`£nd_o˘ë_to_löefi
(((
u8LöeFiS≥ed
<<4)&0xF0) | (1)&0x0F);

994 
	`¥ötf_Á°_f
("SW_C\r\n");

995 
u8PwrOnFú°Fœg
 = 0;

996 
	`InôülUART1_Timî3
(
gpu32U¨tS≥ed
[
u8LöeFiS≥ed
]);

999 
	`¥ötf_Á°_f
("SW_D\r\n");

1000 
u8LöeFiS≥ed
--;

1001 
	`¥ötf_Á°_f
("u¨à•ìd: %lu:\n\r", 
gpu32U¨tS≥ed
[
u8LöeFiS≥ed
]);

1004 
	`¥ötf_Á°_f
("SW_L\r\n");

1007 
	`¥ötf_Á°_f
("SW_R\r\n");

1010 
	`¥ötf_Á°_f
("SW_U\r\n");

1011 
u8LöeFiS≥ed
++;

1012 
	`¥ötf_Á°_f
("u¨à•ìd: %lu:\n\r", 
gpu32U¨tS≥ed
[
u8LöeFiS≥ed
]);

1021 
	`°©e_swôches
((
SW_U
<<0)| (
SW_R
<<1)| (
SW_L
<<2)| (
SW_D
<<3Ë| (
SW_C
<<4), &
u8SwNum
)) {

1022 
SW_ON
 :

1024 
u8SwNum
) {

1026 
	`£nd_o˘ë_to_löefi
((
u8LöeFiAddr
<<4Ë| 
u8LöeFiCmd
);

1027 
	`¥ötf_Á°_f
("LöeFòSídög: 0x%x:\n\r", (
u8LöeFiAddr
<<4Ë| 
u8LöeFiCmd
);

1030 
u8LöeFiAddr
--;

1031 i‡(
u8LöeFiAddr
 == 0) {

1032 
u8LöeFiAddr
 = 1;

1034 
	`¥ötf_Á°_f
("addªss: %d\n\r", 
u8LöeFiAddr
);

1037 
u8LöeFiCmd
--;

1038 i‡(
u8LöeFiCmd
 == 1) {

1039 
u8LöeFiCmd
 = 2;

1041 
	`¥ötf_Á°_f
("comm™d: %d\n\r", 
u8LöeFiCmd
);

1044 
u8LöeFiCmd
++;

1045 i‡(
u8LöeFiCmd
 == 11) {

1046 
u8LöeFiCmd
 = 10;

1048 
	`¥ötf_Á°_f
("comm™d: %d\n\r", 
u8LöeFiCmd
);

1051 
u8LöeFiAddr
++;

1052 i‡(
u8LöeFiAddr
 == 4) {

1053 
u8LöeFiAddr
 = 3;

1055 
	`¥ötf_Á°_f
("addªss: %d\n\r", 
u8LöeFiAddr
);

1060 
u8SwNum
) {

1062 
	`£nd_o˘ë_to_löefi
(0x41);

1063 
u8EnC¡
++;

1064 i‡(
u8EnC¡
 == 8) {

1065 
u8EnC¡
 = 0;

1067 if(
u8EnC¡
 & 1) {

1068 
LINEFI_EN0
 = 1;

1071 
LINEFI_EN0
 = 0;

1073 if(
u8EnC¡
 & 2) {

1074 
LINEFI_EN1
 = 1;

1077 
LINEFI_EN1
 = 0;

1079 if(
u8EnC¡
 & 4) {

1080 
LINEFI_EN2
 = 1;

1083 
LINEFI_EN2
 = 0;

1087 
	`£nd_o˘ë_to_löefi
(0x40);

1090 
	`£nd_o˘ë_to_löefi
(0x41);

1093 
	`£nd_o˘ë_to_löefi
(0x42);

1096 
	`£nd_o˘ë_to_löefi
(0x43);

1099 
	`£nd_o˘ë_to_löefi
(0x44);

1104 
u8SwNum
) {

1106 
u8LöeFiAddr
--;

1107 i‡(
u8LöeFiAddr
 == 0) {

1108 
u8LöeFiAddr
 = 1;

1111 
	`¥ötf_Á°_f
("addªss: %d\n\r", 
u8LöeFiAddr
);

1114 
u8LöeFiCmd
--;

1115 i‡(
u8LöeFiCmd
 == 0) {

1116 
u8LöeFiCmd
 = 1;

1120 
	`¥ötf_Á°_f
("comm™d: %d\n\r", 
u8LöeFiCmd
);

1124 
°LöeFiPkt
.
u8Addr
 = 
u8LöeFiAddr
;

1125 
°LöeFiPkt
.
u8Ty≥
 = 
u8LöeFiCmd
;

1126 i‡(
u8LöeFiAddr
&1) {

1127 
°LöeFiPkt
.
pu8D©a
 = 
gpu8D©a
;

1130 
°LöeFiPkt
.
pu8D©a
 = 
gpu8D©a2
;

1132 
	`£nd_löefi_∑ckë
(&
°LöeFiPkt
);

1136 
u8LöeFiCmd
++;

1137 i‡(
u8LöeFiCmd
 == 101) {

1138 
u8LöeFiCmd
 = 100;

1140 
	`¥ötf_Á°_f
("comm™d: %d\n\r", 
u8LöeFiCmd
);

1145 
u8LöeFiAddr
++;

1146 i‡(
u8LöeFiAddr
 == 16) {

1147 
u8LöeFiAddr
 = 15;

1149 
	`¥ötf_Á°_f
("addªss: %d\n\r", 
u8LöeFiAddr
);

1159 i‡(
	`Re˚ive_D©a_From_UART0_nb
(&
u8RxUART
)) {

1160 
	`£nd_o˘ë_to_löefi
(
u8RxUART
);

1165 i‡–
P13
 == 0 ) {

1166 
	`¥ötf_Á°_f
("P13 = 0\n\r");

1168 i‡–
P02
 == 0 ) {

1169 
	`¥ötf_Á°_f
("P02 = 0\n\r");

1171 i‡–
P30
 == 0 ) {

1172 
	`¥ötf_Á°_f
("P30 = 0\n\r");

1174 i‡–
P17
 == 0 ) {

1175 
	`¥ötf_Á°_f
("P17 = 0\n\r");

1179 
	}
}

	@master/src/main.h

1 #i‚de‡
__maö__


2 
	#__maö__


	)

4 
	~"Comm⁄.h
"

5 
	~"Dñay.h
"

6 
	~"Fun˘i⁄_deföe.h
"

7 
	~"N76E003.h
"

8 
	~"SFR_Ma¸o.h
"

9 
	~"u¨t.h
"

	@pump/src/main.c

20 
	~"N76E003.h
"

21 
	~"Comm⁄.h
"

22 
	~"Dñay.h
"

23 
	~"SFR_Ma¸o.h
"

24 
	~"Fun˘i⁄_deföe.h
"

25 
	~"u¨t.h
"

27 
	#KEY_ESC
 (27)

	)

32 
	#TIMER0_VAL
 (11000)

33 

	)

34 
	#TH0_INIT
 (((65536-
TIMER0_VAL
)>>8)&0xFF)

	)

35 
	#TL0_INIT
 ((65536-
TIMER0_VAL
)&0xFF)

	)

37 
	#PREAMBLE_CNT1
 (2)

	)

38 
	#PREAMBLE_CNT2
 (6)

	)

39 
	#PREAMBLE_CNT_MAX
 (100)

	)

41 
	#__VERSION__
 "Vîsi⁄ 1.4 o¿20231026\r\n"

	)

44 
	#UART_TX
 
P16


	)

45 
	#SWITCH
 
P15


	)

46 
	#ROT_SENSE
 
P14


	)

47 
	#LED_B
 
P13


	)

48 
	#LED_G
 
P12


	)

49 
	#LED_R
 
P11


	)

50 
	#MOTOR_EN
 
P10


	)

51 
	#MOTOR_CW
 
P00


	)

52 
	#MOTOR_CCW
 
P01


	)

53 
	#UART_RX
 
P02


	)

54 
	#SEL_RX_POL
 
P04


	)

56 
	#UART_TX
 
P16


	)

57 
	#SWITCH
 
P15


	)

58 
	#LED_B
 
P12


	)

59 
	#LED_G
 
P13


	)

60 
	#LED_R
 
P14


	)

61 
	#MOTOR_EN
 
P10


	)

62 
	#MOTOR_CW
 
P00


	)

63 
	#MOTOR_CCW
 
P01


	)

64 
	#PWR_OUT
 
P03


	)

65 
	#UART_RX
 
P02


	)

66 
	#SEL_RX_POL
 
P04


	)

69 
	#SW_ON
 (1)

	)

70 
	#SW_OFF
 (0)

	)

71 
	#SW_DB
 (3)

	)

72 
	#SW_NONE
 (4)

	)

73 
	#ROT_SENSE_OPEN
 (1)

74 
	#ROT_SENSE_CLOSE
 (0)

75 

	)

76 
	#LINEFI_RATE
 8

	)

77 
	#MAX_RX_LEN
 10

	)

78 
	#LINEFI_RX_TIMEOUT
 10

79 

	)

80 
	#LED_OFF
 1

	)

81 
	#LED_ON
 0

	)

83 
	#MY_ADDR
 (12)

	)

84 
UINT32
 
__xd©a
 
	ggpu32U¨tS≥ed
[] = {

101 
UINT8
 
	ggu8UART
 = 0;

102 
UINT16
 
	ggu16MûliSecC¡
 = 0;

103 
UINT16
 
	ggu16SlôC¡
 = 0;

104 
UINT16
 
	ggu16RŸC¡
 = 0;

107 
	$putch¨
 (
c
)

109 i‡(
gu8UART
 == 0) {

110 
TI
 = 0;

111 
SBUF
 = 
c
;

112 
TI
==0);

115 
TI_1
 = 0;

116 
SBUF_1
 = 
c
;

117 
TI_1
==0);

119 
	}
}

122 
	mSTATE_SELF
,

123 
	mSTATE_CROSS
,

124 
	mSTATE_BOTH


128 
	mSTATE_RxCSC_INIT
,

129 
	mSTATE_RxCSC_RX
,

130 
	mSTATE_RxCSC_RX_RAW
,

131 
	mSTATE_RxCSC_RX_ASCII
,

132 
	mSTATE_RxCSC_STOP
,

133 
	mSTATE_RxCSC_END


137 
	mMS_STOP
,

138 
	mMS_ROT_CW
,

139 
	mMS_WAIT_UNTIL_ROT_SENSE_CLOSE
,

140 
	mMS_END


144 
	mSTATE_LINEFI_RX_INIT
,

145 
	mSTATE_LINEFI_RX_START
,

146 
	mSTATE_LINEFI_RX_TIMEOUT
,

147 
	mSTATE_LINEFI_RX_MAX_LEN
,

148 
	mSTATE_LINEFI_RX_END


151 
	$¥öt_esc
(
UINT8
 
au8Sèã
)

153 
	`¥ötf_Á°_f
("\n\r");

154 
au8Sèã
) {

155 
STATE_SELF
 :

156 
	`¥ötf_Á°_f
("self ");

158 
STATE_CROSS
 :

159 
	`¥ötf_Á°_f
("cross");

161 
STATE_BOTH
 :

162 
	`¥ötf_Á°_f
("both ");

165 
	`¥ötf_Á°_f
(" ouçut:Thi†i†UART%d\n\r", 
gu8UART
);

166 
	}
}

168 
	$¥öt_ch¨
(
au8D©a
)

170 
au8D©a
) {

171 
KEY_ESC
 :

174 
	`¥ötf_Á°_f
("\r\n");

177 
	`¥ötf_Á°_f
("%c",
au8D©a
);

179 
	}
}

181 
UINT8
 
	$°©e_machöe
(
UINT8
 
au8Sèã
, UINT8 
au8RxUART
, UINT8 
au8SñfID
, UINT8 
au8OthîID
)

183 if(
au8RxUART
 =
KEY_ESC
) {

184 
gu8UART
 = 
au8SñfID
;

185 
	`¥ötf_Á°_f
("\r\nöput:Thi†i†UART%d", 
gu8UART
);

186 
au8Sèã
) {

187 
STATE_SELF
 :

188 
au8Sèã
 = 
STATE_CROSS
;

189 
gu8UART
 = 
au8SñfID
;

190 
	`¥öt_esc
(
au8Sèã
);

191 
gu8UART
 = 
au8OthîID
;

192 
	`¥öt_esc
(
au8Sèã
);

194 
STATE_CROSS
 :

195 
au8Sèã
 = 
STATE_BOTH
;

196 
gu8UART
 = 
au8SñfID
;

197 
	`¥öt_esc
(
au8Sèã
);

198 
gu8UART
 = 
au8OthîID
;

199 
	`¥öt_esc
(
au8Sèã
);

201 
STATE_BOTH
 :

202 
au8Sèã
 = 
STATE_SELF
;

203 
gu8UART
 = 
au8SñfID
;

204 
	`¥öt_esc
(
au8Sèã
);

209 
au8Sèã
) {

210 
STATE_SELF
 :

211 
gu8UART
 = 
au8SñfID
;

212 
	`¥öt_ch¨
(
au8RxUART
);

214 
STATE_CROSS
 :

215 
gu8UART
 = 
au8OthîID
;

216 
	`¥öt_ch¨
(
au8RxUART
);

218 
STATE_BOTH
 :

219 
gu8UART
 = 
au8SñfID
;

220 
	`¥öt_ch¨
(
au8RxUART
);

221 
gu8UART
 = 
au8OthîID
;

222 
	`¥öt_ch¨
(
au8RxUART
);

226  
au8Sèã
;

227 
	}
}

230 
	$Timî0_ISR
 (Ë
	$öãºu±
(1)

232 
TH0
 = 
TH0_INIT
;

233 
TL0
 = 
TL0_INIT
;

234 
gu16MûliSecC¡
++;

236 i‡(
P06
) {

237 
P06
 = 0;

240 
P06
 = 1;

243 
	}
}

245 
	$pö_öãºu±_i§
(Ë
	$öãºu±
(7)

247 
UINT16
 
su8C¡
 = 0;

248 i‡(
PIF
 == 0x10) {

249 
gu16SlôC¡
++;

250 i‡(
gu16SlôC¡
 >12*
gu16RŸC¡
) {

251 
MOTOR_CW
 = 0;

252 
MOTOR_CCW
 = 0;

253 
LED_R
 = 
LED_OFF
;

254 
LED_G
 = 
LED_OFF
;

255 
LED_B
 = 
LED_OFF
;

259 
PIF
 = 0;

261 
	}
}

263 
UINT8
 
	$chk_m™che°î
(
UINT8
 
c
)

265 
UINT8
 
i
;

266 
i
=0;i<4;i++) {

267 i‡(((
c
>>(2*
i
)) & 1) == ((c>>((2*i+1)))&1)) {

273 
	}
}

275 
UINT8
 
	$c⁄v_m™che°î2nibbÀ
(
UINT8
 
c
)

277 
UINT8
 
i
;

278 
UINT8
 
u8NibbÀ
 = 0;

279 
i
=0;i<4;i++) {

280 i‡(
c
 & 1) {

281 
u8NibbÀ
 |= 0x80;

283 
c
 >>= 2;

284 
u8NibbÀ
 >>= 1;

286  
u8NibbÀ
;

287 
	}
}

289 
UINT8
 
	$c⁄v_m™che°î2highnibbÀ
(
UINT8
 
c
)

291 
UINT8
 
i
;

292 
UINT8
 
u8NibbÀ
 = 0;

293 
i
=0;i<4;i++) {

294 
u8NibbÀ
 >>= 1;

295 i‡(
c
 & 1) {

296 
u8NibbÀ
 |= 0x80;

298 
c
 >>= 2;

300  
u8NibbÀ
;

301 
	}
}

303 
	$MODIFY_HIRC_166
()

305 
húcm≠0
,
húcm≠1
;

306 
åimvÆue16bô
;

308 i‡((
PCON
&
SET_BIT4
)==SET_BIT4) {

309 
húcm≠0
 = 
RCTRIM0
;

310 
húcm≠1
 = 
RCTRIM1
;

311 
åimvÆue16bô
 = ((
húcm≠0
<<1)+(
húcm≠1
&0x01));

312 
åimvÆue16bô
 =Årimvalue16bit - 15;

313 
húcm≠1
 = 
åimvÆue16bô
&0x01;

314 
húcm≠0
 = 
åimvÆue16bô
>>1;

315 
TA
=0XAA;

316 
TA
=0X55;

317 
RCTRIM0
 = 
húcm≠0
;

318 
TA
=0XAA;

319 
TA
=0X55;

320 
RCTRIM1
 = 
húcm≠1
;

322 
PCON
 &
CLR_BIT4
;

324 
	}
}

325 
	$di•_hñp
(
UINT8
 
au8Code
)

327 
gu8UART
 = 1;

328 
au8Code
) {

334 
	`¥ötf_Á°_f
("IdleÖreamble on/off\r\n");

339 
	`¥ötf_Á°_f
("LineFi Power Off\r\n");

342 
	`¥ötf_Á°_f
("LineFi Power On\r\n");

345 
	`¥ötf_Á°_f
("LineFi Uart Tx Low\r\n");

348 
	`¥ötf_Á°_f
("LineFi Uart Tx High\r\n");

351 
	`¥ötf_Á°_f
("LineFi CSCÑx FSM Off\r\n");

354 
	`¥ötf_Á°_f
("LineFi CSCÑx FSM ON\r\n");

357 
	`¥ötf_Á°_f
(
__VERSION__
);

360 
	`¥ötf_Á°_f
("1: downlinkÖacket 1\r\n");

361 
	`¥ötf_Á°_f
("2: downlinkÖacket 2\r\n");

362 
	`¥ötf_Á°_f
("3: uplink idleÖreamble on/off\r\n");

363 
	`¥ötf_Á°_f
("p/P: LineFi Power off/on\r\n");

364 
	`¥ötf_Á°_f
("t/T: LineFi Uart Tx Low/High\r\n");

365 
	`¥ötf_Á°_f
("s/S: LineFie CSC Rx FSM off/on\r\n");

366 
	`¥ötf_Á°_f
("testÖrocedure:Ö -> P -> T -> S -> 1 or 2\r\n");

369 
	}
}

371 
	$gpio_£tup
()

390 
Së_AŒ_GPIO_Quasi_Mode
;

392 
P15_I≈ut_Mode
;

393 
P02_I≈ut_Mode
;

394 
P07_I≈ut_Mode
;

395 
P14_I≈ut_Mode
;

397 
P16_PushPuŒ_Mode
;

398 
P13_PushPuŒ_Mode
;

399 
P12_PushPuŒ_Mode
;

400 
P11_PushPuŒ_Mode
;

401 
P10_PushPuŒ_Mode
;

402 
P00_PushPuŒ_Mode
;

403 
P01_PushPuŒ_Mode
;

404 
P04_PushPuŒ_Mode
;

406 
E«bÀ_INT_P‹t1
;

409 
E«bÀ_BIT4_BŸhEdge_Trig
;

410 
£t_P1S_4
;

413 
UART_TX
 = 0;

414 
LED_B
 = 1;

415 
LED_G
 = 1;

416 
LED_R
 = 1;

417 
MOTOR_EN
 = 0;

418 
MOTOR_CW
 = 0;

419 
MOTOR_CCW
 = 0;

420 
SEL_RX_POL
 = 0;

421 
	}
}

424 
	mSTATE_SW_NO_ACTION
,

425 
	mSTATE_SW1_OFF
,

426 
	mSTATE_SW2_OFF
,

427 
	mSTATE_SW3_OFF
,

428 
	mSTATE_SW4_OFF
,

429 
	mSTATE_SW1_ON
,

430 
	mSTATE_SW2_ON
,

431 
	mSTATE_SW3_ON
,

432 
	mSTATE_SW4_ON
,

433 
	mSTATE_SW_DUAL_ON
,

434 
	mSTATE_SW_DUAL_WAIT
,

435 
	mSTATE_SW_DUAL_OFF
,

436 
	mSTATE_SW_END


439 
UINT8
 
	$°©e_swôches
(
UINT8
 
au8SW
, UINT8 *
≠u8SwNum
)

441 
UINT8
 
su8PªvSW
 = 0;

442 
UINT8
 
i
;

444 
UINT8
 
u8Resu…
 = 
SW_NONE
;

445 i‡(
su8PªvSW
 =
au8SW
) {

446 *
≠u8SwNum
 = 0;

447  
SW_NONE
;

455 *
≠u8SwNum
 = 0;

457 
i
=0;i<5;i++) {

458 (
su8PªvSW
>>
i
)&1) {

459 
SW_ON
 :

460 (
au8SW
>>
i
)&1) {

461 
SW_ON
 :

463 
SW_OFF
 :

464 
su8PªvSW
 = 
au8SW
;

465 *
≠u8SwNum
 |1<<
i
;

466 
u8Resu…
 = 
SW_OFF
;

471 
SW_OFF
 :

472 (
au8SW
>>
i
)&1) {

473 
SW_ON
 :

474 
su8PªvSW
 = 
au8SW
;

475 *
≠u8SwNum
 |1<<
i
;

476 
u8Resu…
 = 
SW_ON
;

480 
SW_OFF
 :

488  
u8Resu…
;

490 
su8C¡
++;

491 
UINT8
 
u8Resu…
;

492 
UINT8
 
u8PªvSW
 = 
su8Sèã
;

493 i‡(
au8SW
 !
u8PªvSW
) {

494 
UINT8
 
i
;

495 
i
=0;i<4;i++) {

496 i‡(((
au8SW
>>
i
)&1Ë!((
u8PªvSW
>>i)&1)) {

497 i‡((
au8SW
>>
i
)&1) {

507 i‡(((
au8SW
>>3)&1Ë!((
u8PªvSW
>>3)&1)) {

508 i‡((
au8SW
>>3)&1) {

517 i‡(
u8PªvSW
) {

519 
u8PªvSW
) {

520 
STATE_SW1_ON
 :

522 
STATE_SW2_ON
 :

524 
STATE_SW3_ON
 :

526 
STATE_SW4_ON
 :

528 
STATE_SW_DUAL_ON
 :

530 
STATE_SW_DUAL_WAIT
 :

536 
su8Sèã
) {

537 
STATE_SW1_ON
 :

538 
u8Resu…
 = 
STATE_SW1_OFF
;

540 
STATE_SW2_ON
 :

541 
u8Resu…
 = 
STATE_SW2_OFF
;

543 
STATE_SW3_ON
 :

544 
u8Resu…
 = 
STATE_SW3_OFF
;

546 
STATE_SW4_ON
 :

547 
u8Resu…
 = 
STATE_SW4_OFF
;

549 
STATE_SW_DUAL_ON
 :

550 
u8Resu…
 = 
STATE_SW_DUAL_OFF
;

556 
su8Sèã
) {

557 
STATE_SW1_ON
 :

558 
STATE_SW2_ON
 :

559 
STATE_SW3_ON
 :

560 
STATE_SW4_ON
 :

561 
STATE_SW1_OFF
 :

562 
STATE_SW2_OFF
 :

563 
STATE_SW3_OFF
 :

564 
STATE_SW4_OFF
 :

565 
STATE_SW_DUAL_ON
 :

566 
STATE_SW_DUAL_OFF
 :

567 
u8Resu…
 = 
STATE_SW_NO_ACTION
;

573 
su8Sèã
 = 
au8SW
;

576 
	}
}

579 
UINT8
 
	$chk_my_addr
(
UINT8
 
au8MyAddr
, UINT8 
au8RxD©a
)

581 i‡–(
au8RxD©a
>>4Ë=(
au8MyAddr
&0x0F)) {

585 
	}
}

587 
	$rŸ_mŸ‹
(
UINT8
 
u8RxUART
)

606 
gu16SlôC¡
 = 0;

608 i‡(
u8RxUART
) {

609 
gu16RŸC¡
 = (
u8RxUART
&0xF)*137 ;

610 
MOTOR_CW
 = 1;

611 
LED_R
 = 
LED_ON
;

614 
MOTOR_CW
 = 0;

615 
MOTOR_CCW
 = 0;

617 
	}
}

622 
	$maö
 ()

631 
UINT8
 
u8PªvSwôch
 = 0;

632 
UINT8
 
u8U¨tRx
 = 0;

633 
UINT8
 
u8RŸSí£
 = 0;

634 
UINT8
 
u8RxUART
;

635 
UINT16
 
u16C¡
 = 0;

636 
UINT8
 
u8OuçutSèã
 = 
STATE_SELF
;

637 
UINT8
 
u8SèãRxCSC
 = 
STATE_RxCSC_STOP
;

638 
UINT8
 
u8LöeFiAddr
 = 1;

639 
UINT8
 
u8LöeFiS≥ed
 = 1;

640 
UINT8
 
u8D©a
 = 0;

641 
UINT8
 
u8LöeFiCmd
 = 1;

642 
UINT8
 
u8PwrOnFú°Fœg
 = 1;

645 
uöt8
 
u8MŸ‹Sèã
 = 
MS_STOP
;

647 
UINT8
 
u8LöeFiRxSèã
 = 
STATE_LINEFI_RX_INIT
;

648 
UINT8
 
u8RxIdx
 = 0;

649 
	#MAX_RX_BUF_LEN
 10

	)

650 
UINT8
 
pu8LöeFiRx
[
MAX_RX_BUF_LEN
];

651 
UINT8
 
u8LöeFiRxIdx
 = 0;

653 
	`gpio_£tup
();

654 
	`u¨t_£tup
();

655 
	`InôülUART1_Timî3
(57600);

657 
	`MODIFY_HIRC_166
();

659 
˛r_T0M
;

662 
£t_ET0
;

663 
£t_TR0
;

665 
gu8UART
 = 0;

666 
	`¥ötf_Á°_f
("This is UART0\n\r");

667 
gu8UART
 = 1;

668 
	`¥ötf_Á°_f
("This is UART1\n\r");

669 
UINT16
 
u8Cou¡2
 = 0;

670 
UINT8
 
u8RxPktC¡
 = 0;

671 
UINT8
 
u8PªambÀC¡
 = 0;

673 
u16C¡
 = 0 ; u16Cnt < 30000; u16Cnt++) {

674 
n›
;Çop;Çop;Çop;Çop;

676 
gu8UART
 = 0;

678 
u8U¨tRx
 = 
UART_RX
;

679 
u8PªvSwôch
 = 
SWITCH
;

681 
£t_EPI
;

682 
£t_EA
;

684 i‡(
UART_RX
 == 0) {

685 
SEL_RX_POL
 = 1;

687 
MOTOR_EN
 = 1;

692 i‡(
	`Re˚ive_D©a_From_UART0_nb
(&
u8RxUART
)) {

693 
u8RxUART
) {

695 
gu16SlôC¡
 = 0;

698 
	`¥ötf_Á°_f
("rŸ cou¡:%d\n\r",
gu16SlôC¡
);

702 
	`TOGGLE
(
UART_TX
);

703 
	`¥ötf_Á°_f
("UART_TX=");

704 
	`¥ötf_Á°_f
("%d\n\r", 
UART_TX
);

707 
	`TOGGLE
(
LED_R
);

708 
	`¥ötf_Á°_f
("LED_R=");

709 
	`¥ötf_Á°_f
("%d\n\r", 
LED_R
);

712 
	`TOGGLE
(
LED_G
);

713 
	`¥ötf_Á°_f
("LED_G=");

714 
	`¥ötf_Á°_f
("%d\n\r", 
LED_G
);

717 
	`TOGGLE
(
LED_B
);

718 
	`¥ötf_Á°_f
("LED_B=");

719 
	`¥ötf_Á°_f
("%d\n\r", 
LED_B
);

722 
	`TOGGLE
(
MOTOR_EN
);

723 
	`¥ötf_Á°_f
("MOTOR_EN=");

724 
	`¥ötf_Á°_f
("%d\n\r", 
MOTOR_EN
);

727 
	`TOGGLE
(
MOTOR_CW
);

728 
	`¥ötf_Á°_f
("MOTOR_CW=");

729 
	`¥ötf_Á°_f
("%d\n\r", 
MOTOR_CW
);

732 
	`TOGGLE
(
MOTOR_CCW
);

733 
	`¥ötf_Á°_f
("MOTOR_CCW=");

734 
	`¥ötf_Á°_f
("%d\n\r", 
MOTOR_CCW
);

737 
	`TOGGLE
(
SEL_RX_POL
);

738 
	`¥ötf_Á°_f
("SEL_RX_POL=");

739 
	`¥ötf_Á°_f
("%d\n\r", 
SEL_RX_POL
);

742 
gu16SlôC¡
 = 0;

743 
MOTOR_CW
 = 1;

746 
	`¥ötf_Á°_f
("%d\n\r", 
gu16MûliSecC¡
);

747 
gu16MûliSecC¡
 = 0;

750 
	`¥ötf_Á°_f
("¶ô c¡%d\n\r", 
gu16SlôC¡
);

751 
	`¥ötf_Á°_f
("rŸ c¡%d\n\r", 
gu16RŸC¡
);

752 
	`¥ötf_Á°_f
("rŸ sí£ %d\n\r", 
ROT_SENSE
);

757 i‡(
u8PªvSwôch
 !
SWITCH
) {

758 
	`¥ötf_Á°_f
("SWITCH:%d\n\r", 
SWITCH
);

759 i‡(
SWITCH
) {

761 
	`¥ötf_Á°_f
("LED\n\r");

762 
UART_TX
 = 1;

763 
MOTOR_CW
 = 1;

764 
MOTOR_CCW
 = 1;

765 
LED_R
 = 0;

766 
LED_G
 = 0;

767 
LED_B
 = 0;

768 
SEL_RX_POL
 = 0;

772 
uöt8
 
su8C¡
 = 0;

773 
su8C¡
++;

774 
LED_R
 = 
su8C¡
&1;

775 
LED_G
 = (
su8C¡
>>1)&1;

776 
LED_B
 = (
su8C¡
>>2)&1;

778 
MOTOR_EN
 = 
su8C¡
&1;

779 
MOTOR_CW
 = (
su8C¡
>>1)&1;

780 
MOTOR_CCW
 = (
su8C¡
>>2)&1;

783 
UART_TX
 = 0;

784 
MOTOR_CW
 = 0;

785 
MOTOR_CCW
 = 0;

786 
LED_R
 = 1;

787 
LED_G
 = 1;

788 
LED_B
 = 1;

789 
SEL_RX_POL
 = 1;

793 
u8PªvSwôch
 = 
SWITCH
;

796 i‡(
SWITCH
) {

799 i‡(
u8U¨tRx
 !
UART_RX
) {

800 
	`¥ötf_Á°_f
("UART_RX:%d\n\r", 
UART_RX
);

801 
u8U¨tRx
 = 
UART_RX
;

805 i‡(
u8RŸSí£
 !
ROT_SENSE
) {

806 
	`¥ötf_Á°_f
("RŸSí£:%d\n\r", 
ROT_SENSE
);

807 
u8RŸSí£
 = 
ROT_SENSE
;

809 i‡(
	`Re˚ive_D©a_From_UART1_nb
(&
u8RxUART
)) {

810 i‡(
	`chk_my_addr
(
MY_ADDR
, 
u8RxUART
)) {

811 
	`rŸ_mŸ‹
(
u8RxUART
);

815 
u8LöeFiRxSèã
) {

816 
STATE_LINEFI_RX_INIT
 :

817 i‡(
	`Re˚ive_D©a_From_UART1_nb
(&
u8RxUART
)) {

818 
pu8LöeFiRx
[0] = 
u8RxUART
;

819 
u8LöeFiRxIdx
 = 1;

821 
gu16MûliSecC¡
 = 0;

822 
u8LöeFiRxSèã
 = 
STATE_LINEFI_RX_START
;

825 
STATE_LINEFI_RX_START
 :

826 i‡(
	`Re˚ive_D©a_From_UART1_nb
(&
u8RxUART
)) {

827 
pu8LöeFiRx
[
u8LöeFiRxIdx
] = 
u8RxUART
;

828 
u8LöeFiRxIdx
++;

829 
gu16MûliSecC¡
 = 0;

830 i‡(
u8LöeFiRxIdx
 =
MAX_RX_LEN
) {

831 
u8LöeFiRxSèã
 = 
STATE_LINEFI_RX_MAX_LEN
;

834 i‡(
gu16MûliSecC¡
 > 
LINEFI_RX_TIMEOUT
) {

835 
u8LöeFiRxSèã
 = 
STATE_LINEFI_RX_TIMEOUT
;

838 
STATE_LINEFI_RX_MAX_LEN
 :

839 
STATE_LINEFI_RX_TIMEOUT
 :

840 
u8LöeFiRxIdx
) {

858 i‡(
u8PªvSwôch
 !
SWITCH
) {

859 
	`¥ötf_Á°_f
("SWITCH:%d\n\r", 
SWITCH
);

860 i‡(
SWITCH
) {

861 
UART_TX
 = 1;

864 
UART_TX
 = 0;

866 
u8PªvSwôch
 = 
SWITCH
;

868 i‡(
SWITCH
) {

869 
	`TOGGLE
(
UART_TX
);

873 i‡(
	`Re˚ive_D©a_From_UART0_nb
(&
u8RxUART
)) {

874 
u8RxUART
) {

876 
	`TOGGLE
(
UART_TX
);

877 
	`¥ötf_Á°_f
("UART_TX=");

878 
	`¥ötf_Á°_f
("%d\n\r", 
UART_TX
);

881 
	`TOGGLE
(
LED_B
);

882 
	`¥ötf_Á°_f
("LED_B=");

883 
	`¥ötf_Á°_f
("%d\n\r", 
LED_B
);

887 
	`TOGGLE
(
LED_G
);

888 
	`¥ötf_Á°_f
("LED_G=");

889 
	`¥ötf_Á°_f
("%d\n\r", 
LED_G
);

892 
	`TOGGLE
(
LED_R
);

893 
	`¥ötf_Á°_f
("LED_R=");

894 
	`¥ötf_Á°_f
("%d\n\r", 
LED_R
);

897 
	`TOGGLE
(
MOTOR_EN
);

898 
	`¥ötf_Á°_f
("MOTOR_EN=");

899 
	`¥ötf_Á°_f
("%d\n\r", 
MOTOR_EN
);

902 
	`TOGGLE
(
MOTOR_CW
);

903 
	`¥ötf_Á°_f
("MOTOR_CW=");

904 
	`¥ötf_Á°_f
("%d\n\r", 
MOTOR_CW
);

907 
	`TOGGLE
(
MOTOR_CCW
);

908 
	`¥ötf_Á°_f
("MOTOR_CCW=");

909 
	`¥ötf_Á°_f
("%d\n\r", 
MOTOR_CCW
);

912 
	`TOGGLE
(
SEL_RX_POL
);

913 
	`¥ötf_Á°_f
("SEL_RX_POL=");

914 
	`¥ötf_Á°_f
("%d\n\r", 
SEL_RX_POL
);

922 i‡(
	`Re˚ive_D©a_From_UART1_nb
(&
u8RxUART
)) {

923 
u8RxUART
) {

925 
	`TOGGLE
(
LED_R
);

928 
	`TOGGLE
(
LED_G
);

931 
	`TOGGLE
(
LED_B
);

934 
u8MŸ‹RŸCmd
 = 1;

937 
MOTOR_EN
 = 1;

938 
MOTOR_CW
 = 0;

939 
MOTOR_CCW
 = 0;

940 
LED_R
 = 0;

943 
MOTOR_EN
 = 0;

944 
MOTOR_CW
 = 0;

945 
MOTOR_CCW
 = 0;

948 
LED_R
 = 1;

949 
MOTOR_EN
 = 1;

950 
MOTOR_CW
 = 1;

951 
MOTOR_CCW
 = 0;

956 
u8MŸ‹Sèã
) {

957 
MS_ROT_CW
 :

958 i‡(
ROT_SENSE
 =
ROT_SENSE_OPEN
) {

959 
u8MŸ‹Sèã
 = 
MS_STOP
;

960 
MOTOR_EN
 = 0;

963 
MS_STOP
 :

964 i‡(
u8MŸ‹RŸCmd
) {

965 
MOTOR_EN
 = 1;

966 
MOTOR_CW
 = 1;

967 
MOTOR_CCW
 = 0;

968 
u8MŸ‹Sèã
 = 
MS_WAIT_UNTIL_ROT_SENSE_CLOSE
;

969 
u8MŸ‹RŸCmd
 = 0;

972 
MS_WAIT_UNTIL_ROT_SENSE_CLOSE
 :

973 i‡(
ROT_SENSE
 =
ROT_SENSE_CLOSE
) {

974 
u8MŸ‹Sèã
 = 
MS_ROT_CW
;

981 
	}
}

	@pump/src/main.h

1 #i‚de‡
__maö__


2 
	#__maö__


	)

4 
	~"Comm⁄.h
"

5 
	~"Dñay.h
"

6 
	~"Fun˘i⁄_deföe.h
"

7 
	~"N76E003.h
"

8 
	~"SFR_Ma¸o.h
"

9 
	~"u¨t.h
"

	@slave/src/main.c

17 
	~"N76E003.h
"

18 
	~"Comm⁄.h
"

19 
	~"Dñay.h
"

20 
	~"SFR_Ma¸o.h
"

21 
	~"Fun˘i⁄_deföe.h
"

22 
	~"u¨t.h
"

23 
	~"löefi_∑ckë.h
"

24 
	~"ì¥om_üp.h
"

26 
__code
 
	$__©
 (
BASE_ADDRESS
Ë
gpcEEPROM
[128] = "";

28 
	#KEY_ESC
 (27)

	)

31 
	#TIMER0_VAL
 (13)

32 

	)

33 
	#TH0_INIT
 (((65536-
TIMER0_VAL
)>>8)&0xFF)

	)

34 
	#TL0_INIT
 ((65536-
TIMER0_VAL
)&0xFF)

	)

36 
	#PREAMBLE_CNT1
 (2)

	)

37 
	#PREAMBLE_CNT2
 (6)

	)

38 
	#PREAMBLE_CNT_MAX
 (100)

	)

40 
	#__VERSION__
 "Vîsi⁄ 1.4 o¿20231026\r\n"

	)

42 
	#MY_ADDR
 (3)

	)

46 
	#UART_TX
 
P16


	)

47 
	#SWITCH
 
P15


	)

48 
	#ROT_SENSE
 
P14


	)

49 
	#LED_B
 
P13


	)

50 
	#LED_G
 
P12


	)

51 
	#LED_R
 
P11


	)

52 
	#MOTOR_EN
 
P10


	)

53 
	#MOTOR_CW
 
P00


	)

54 
	#MOTOR_CCW
 
P01


	)

55 
	#UART_RX
 
P02


	)

56 
	#SEL_RX_POL
 
P04


	)

60 
	#UART_TX
 
P16


	)

61 
	#SWITCH
 
P15


	)

62 
	#LED_B
 
P12


	)

63 
	#LED_G
 
P13


	)

64 
	#LED_R
 
P14


	)

66 
	#MOTOR_CW
 
P00


	)

67 
	#MOTOR_CCW
 
P01


	)

68 
	#PWR_OUT
 
P03


	)

69 
	#UART_RX
 
P02


	)

70 
	#SEL_RX_POL
 
P04


	)

74 
	#SW_ON
 (1)

	)

75 
	#SW_OFF
 (0)

	)

76 
	#SW_DB
 (3)

	)

77 
	#SW_NONE
 (4)

	)

78 
	#ROT_SENSE_OPEN
 (1)

79 
	#ROT_SENSE_CLOSE
 (0)

80 

	)

81 
	#LED_OFF
 1

	)

82 
	#LED_ON
 0

	)

84 
	#LINEFI_RATE
 3

	)

86 
uöt8
 
gu8MyAddr
;

88 
UINT8
 
__xd©a
 
gpu8D©a
[20];

89 
UINT8
 
__xd©a
 
gu8MŸ‹Sèã
 = 0;

91 
UINT32
 
__xd©a
 
gpu32U¨tS≥ed
[] = {

106 
	}
};

108 
UINT8
 
	ggu8UART
 = 0;

109 
UINT16
 
	ggu16TimeC¡
 = 0;

112 
	$putch¨
 (
c
)

114 i‡(
gu8UART
 == 0) {

115 
TI
 = 0;

116 
SBUF
 = 
c
;

117 
TI
==0);

120 
TI_1
 = 0;

121 
SBUF_1
 = 
c
;

122 
TI_1
==0);

124 
	}
}

126 
UINT8
 
	$c⁄v_nibbÀ2m™che°î
 (
UINT8
 
c
)

135 
UINT8
 
i
;

136 
UINT8
 
u8M™ch
 = 0;

137 
i
=0;i<4;i++) {

138 
u8M™ch
 >>=2;

139 i‡(
c
&1) {

140 
u8M™ch
 |= 0x40;

143 
u8M™ch
 |= 0x80;

145 
c
 >>= 1;

147  
u8M™ch
;

148 
	}
}

150 
	$putch¨_m™che°î
 (
c
)

152 
gu8UART
 = 1;

153 
	`putch¨
(
	`c⁄v_nibbÀ2m™che°î
(
c
));

154 
	`putch¨
(
	`c⁄v_nibbÀ2m™che°î
(
c
>>4));

156 
	}
}

158 
	$¥ómbÀ
()

160 
gu8UART
 = 1;

161 
	`putch¨
(0xF0);

162 
	`putch¨
(0xF0);

163 
	`putch¨
(0xF0);

164 
	`putch¨
(0xF0);

165 
	}
}

169 
	mSTATE_SELF
,

170 
	mSTATE_CROSS
,

171 
	mSTATE_BOTH


175 
	mSTATE_RxCSC_INIT
,

176 
	mSTATE_RxCSC_RX
,

177 
	mSTATE_RxCSC_RX_RAW
,

178 
	mSTATE_RxCSC_RX_ASCII
,

179 
	mSTATE_RxCSC_STOP
,

180 
	mSTATE_RxCSC_END


184 
	mSTATE_RxPKT_INIT
,

185 
	mSTATE_RxPKT_START
,

186 
	mSTATE_RxPKT_END
,

187 
	mSTATE_RxPKT_A
,

188 
	mSTATE_RxPKT_B
,

189 
	mSTATE_RxPKT_NONE


193 
	mMS_STOP
,

194 
	mMS_ROT_CW
,

195 
	mMS_WAIT_UNTIL_ROT_SENSE_CLOSE
,

196 
	mMS_END


199 
	$¥öt_esc
(
UINT8
 
au8Sèã
)

201 
	`¥ötf_Á°_f
("\n\r");

202 
au8Sèã
) {

203 
STATE_SELF
 :

204 
	`¥ötf_Á°_f
("self ");

206 
STATE_CROSS
 :

207 
	`¥ötf_Á°_f
("cross");

209 
STATE_BOTH
 :

210 
	`¥ötf_Á°_f
("both ");

213 
	`¥ötf_Á°_f
(" ouçut:Thi†i†UART%d\n\r", 
gu8UART
);

214 
	}
}

216 
	$¥öt_ch¨
(
au8D©a
)

218 
au8D©a
) {

219 
KEY_ESC
 :

222 
	`¥ötf_Á°_f
("\r\n");

225 
	`¥ötf_Á°_f
("%c",
au8D©a
);

227 
	}
}

229 
UINT8
 
	$°©e_machöe
(
UINT8
 
au8Sèã
, UINT8 
au8RxUART
, UINT8 
au8SñfID
, UINT8 
au8OthîID
)

231 if(
au8RxUART
 =
KEY_ESC
) {

232 
gu8UART
 = 
au8SñfID
;

233 
	`¥ötf_Á°_f
("\r\nöput:Thi†i†UART%d", 
gu8UART
);

234 
au8Sèã
) {

235 
STATE_SELF
 :

236 
au8Sèã
 = 
STATE_CROSS
;

237 
gu8UART
 = 
au8SñfID
;

238 
	`¥öt_esc
(
au8Sèã
);

239 
gu8UART
 = 
au8OthîID
;

240 
	`¥öt_esc
(
au8Sèã
);

242 
STATE_CROSS
 :

243 
au8Sèã
 = 
STATE_BOTH
;

244 
gu8UART
 = 
au8SñfID
;

245 
	`¥öt_esc
(
au8Sèã
);

246 
gu8UART
 = 
au8OthîID
;

247 
	`¥öt_esc
(
au8Sèã
);

249 
STATE_BOTH
 :

250 
au8Sèã
 = 
STATE_SELF
;

251 
gu8UART
 = 
au8SñfID
;

252 
	`¥öt_esc
(
au8Sèã
);

257 
au8Sèã
) {

258 
STATE_SELF
 :

259 
gu8UART
 = 
au8SñfID
;

260 
	`¥öt_ch¨
(
au8RxUART
);

262 
STATE_CROSS
 :

263 
gu8UART
 = 
au8OthîID
;

264 
	`¥öt_ch¨
(
au8RxUART
);

266 
STATE_BOTH
 :

267 
gu8UART
 = 
au8SñfID
;

268 
	`¥öt_ch¨
(
au8RxUART
);

269 
gu8UART
 = 
au8OthîID
;

270 
	`¥öt_ch¨
(
au8RxUART
);

274  
au8Sèã
;

275 
	}
}

277 
	$Timî0_ISR
 (Ë
	$öãºu±
(1)

279 
TH0
 = 
TH0_INIT
;

280 
TL0
 = 
TL0_INIT
;

281 
gu16TimeC¡
++;

283 i‡(
P06
) {

284 
P06
 = 0;

287 
P06
 = 1;

290 
	}
}

292 
	$pö_öãºu±_i§
(Ë
	$öãºu±
(7)

294 i‡(
PIF
 == 0x10) {

296 
PIF
 = 0;

297 
	}
}

300 
UINT8
 
	$chk_m™che°î
(
UINT8
 
c
)

302 
UINT8
 
i
;

303 
i
=0;i<4;i++) {

304 i‡(((
c
>>(2*
i
)) & 1) == ((c>>((2*i+1)))&1)) {

310 
	}
}

312 
UINT8
 
	$c⁄v_m™che°î2nibbÀ
(
UINT8
 
c
)

314 
UINT8
 
i
;

315 
UINT8
 
u8NibbÀ
 = 0;

316 
i
=0;i<4;i++) {

317 i‡(
c
 & 1) {

318 
u8NibbÀ
 |= 0x80;

320 
c
 >>= 2;

321 
u8NibbÀ
 >>= 1;

323  
u8NibbÀ
;

324 
	}
}

326 
UINT8
 
	$c⁄v_m™che°î2highnibbÀ
(
UINT8
 
c
)

328 
UINT8
 
i
;

329 
UINT8
 
u8NibbÀ
 = 0;

330 
i
=0;i<4;i++) {

331 
u8NibbÀ
 >>= 1;

332 i‡(
c
 & 1) {

333 
u8NibbÀ
 |= 0x80;

335 
c
 >>= 2;

337  
u8NibbÀ
;

338 
	}
}

340 
	$MODIFY_HIRC_166
()

342 
húcm≠0
,
húcm≠1
;

343 
åimvÆue16bô
;

345 i‡((
PCON
&
SET_BIT4
)==SET_BIT4) {

346 
húcm≠0
 = 
RCTRIM0
;

347 
húcm≠1
 = 
RCTRIM1
;

348 
åimvÆue16bô
 = ((
húcm≠0
<<1)+(
húcm≠1
&0x01));

349 
åimvÆue16bô
 =Årimvalue16bit - 15;

350 
húcm≠1
 = 
åimvÆue16bô
&0x01;

351 
húcm≠0
 = 
åimvÆue16bô
>>1;

352 
TA
=0XAA;

353 
TA
=0X55;

354 
RCTRIM0
 = 
húcm≠0
;

355 
TA
=0XAA;

356 
TA
=0X55;

357 
RCTRIM1
 = 
húcm≠1
;

359 
PCON
 &
CLR_BIT4
;

361 
	}
}

362 
	$di•_hñp
(
UINT8
 
au8Code
)

364 
gu8UART
 = 1;

365 
au8Code
) {

371 
	`¥ötf_Á°_f
("IdleÖreamble on/off\r\n");

376 
	`¥ötf_Á°_f
("LineFi Power Off\r\n");

379 
	`¥ötf_Á°_f
("LineFi Power On\r\n");

382 
	`¥ötf_Á°_f
("LineFi Uart Tx Low\r\n");

385 
	`¥ötf_Á°_f
("LineFi Uart Tx High\r\n");

388 
	`¥ötf_Á°_f
("LineFi CSCÑx FSM Off\r\n");

391 
	`¥ötf_Á°_f
("LineFi CSCÑx FSM ON\r\n");

394 
	`¥ötf_Á°_f
(
__VERSION__
);

397 
	`¥ötf_Á°_f
("1: downlinkÖacket 1\r\n");

398 
	`¥ötf_Á°_f
("2: downlinkÖacket 2\r\n");

399 
	`¥ötf_Á°_f
("3: uplink idleÖreamble on/off\r\n");

400 
	`¥ötf_Á°_f
("p/P: LineFi Power off/on\r\n");

401 
	`¥ötf_Á°_f
("t/T: LineFi Uart Tx Low/High\r\n");

402 
	`¥ötf_Á°_f
("s/S: LineFie CSC Rx FSM off/on\r\n");

403 
	`¥ötf_Á°_f
("testÖrocedure:Ö -> P -> T -> S -> 1 or 2\r\n");

406 
	}
}

408 
	$gpio_£tup
()

427 
Së_AŒ_GPIO_Quasi_Mode
;

429 
P15_I≈ut_Mode
;

430 
P02_I≈ut_Mode
;

431 
P07_I≈ut_Mode
;

433 
P16_PushPuŒ_Mode
;

434 
P13_PushPuŒ_Mode
;

435 
P14_PushPuŒ_Mode
;

436 
P12_PushPuŒ_Mode
;

437 
P11_PushPuŒ_Mode
;

438 
P10_PushPuŒ_Mode
;

439 
P00_PushPuŒ_Mode
;

440 
P01_PushPuŒ_Mode
;

441 
P04_PushPuŒ_Mode
;

442 
P03_PushPuŒ_Mode
;

444 
UART_TX
 = 0;

445 
LED_B
 = 1;

446 
LED_G
 = 1;

447 
LED_R
 = 1;

449 
MOTOR_CW
 = 0;

450 
MOTOR_CCW
 = 0;

451 
SEL_RX_POL
 = 0;

452 
PWR_OUT
 = 0;

453 
	}
}

456 
	mSTATE_SW_NO_ACTION
,

457 
	mSTATE_SW1_OFF
,

458 
	mSTATE_SW2_OFF
,

459 
	mSTATE_SW3_OFF
,

460 
	mSTATE_SW4_OFF
,

461 
	mSTATE_SW1_ON
,

462 
	mSTATE_SW2_ON
,

463 
	mSTATE_SW3_ON
,

464 
	mSTATE_SW4_ON
,

465 
	mSTATE_SW_DUAL_ON
,

466 
	mSTATE_SW_DUAL_WAIT
,

467 
	mSTATE_SW_DUAL_OFF
,

468 
	mSTATE_SW_END


471 
UINT8
 
	$°©e_swôches
(
UINT8
 
au8SW
, UINT8 *
≠u8SwNum
)

473 
UINT8
 
su8PªvSW
 = 0;

474 
UINT8
 
i
;

476 
UINT8
 
u8Resu…
 = 
SW_NONE
;

477 i‡(
su8PªvSW
 =
au8SW
) {

478 *
≠u8SwNum
 = 0;

479  
SW_NONE
;

487 *
≠u8SwNum
 = 0;

489 
i
=0;i<5;i++) {

490 (
su8PªvSW
>>
i
)&1) {

491 
SW_ON
 :

492 (
au8SW
>>
i
)&1) {

493 
SW_ON
 :

495 
SW_OFF
 :

496 
su8PªvSW
 = 
au8SW
;

497 *
≠u8SwNum
 |1<<
i
;

498 
u8Resu…
 = 
SW_OFF
;

503 
SW_OFF
 :

504 (
au8SW
>>
i
)&1) {

505 
SW_ON
 :

506 
su8PªvSW
 = 
au8SW
;

507 *
≠u8SwNum
 |1<<
i
;

508 
u8Resu…
 = 
SW_ON
;

512 
SW_OFF
 :

520  
u8Resu…
;

522 
su8C¡
++;

523 
UINT8
 
u8Resu…
;

524 
UINT8
 
u8PªvSW
 = 
su8Sèã
;

525 i‡(
au8SW
 !
u8PªvSW
) {

526 
UINT8
 
i
;

527 
i
=0;i<4;i++) {

528 i‡(((
au8SW
>>
i
)&1Ë!((
u8PªvSW
>>i)&1)) {

529 i‡((
au8SW
>>
i
)&1) {

539 i‡(((
au8SW
>>3)&1Ë!((
u8PªvSW
>>3)&1)) {

540 i‡((
au8SW
>>3)&1) {

549 i‡(
u8PªvSW
) {

551 
u8PªvSW
) {

552 
STATE_SW1_ON
 :

554 
STATE_SW2_ON
 :

556 
STATE_SW3_ON
 :

558 
STATE_SW4_ON
 :

560 
STATE_SW_DUAL_ON
 :

562 
STATE_SW_DUAL_WAIT
 :

568 
su8Sèã
) {

569 
STATE_SW1_ON
 :

570 
u8Resu…
 = 
STATE_SW1_OFF
;

572 
STATE_SW2_ON
 :

573 
u8Resu…
 = 
STATE_SW2_OFF
;

575 
STATE_SW3_ON
 :

576 
u8Resu…
 = 
STATE_SW3_OFF
;

578 
STATE_SW4_ON
 :

579 
u8Resu…
 = 
STATE_SW4_OFF
;

581 
STATE_SW_DUAL_ON
 :

582 
u8Resu…
 = 
STATE_SW_DUAL_OFF
;

588 
su8Sèã
) {

589 
STATE_SW1_ON
 :

590 
STATE_SW2_ON
 :

591 
STATE_SW3_ON
 :

592 
STATE_SW4_ON
 :

593 
STATE_SW1_OFF
 :

594 
STATE_SW2_OFF
 :

595 
STATE_SW3_OFF
 :

596 
STATE_SW4_OFF
 :

597 
STATE_SW_DUAL_ON
 :

598 
STATE_SW_DUAL_OFF
 :

599 
u8Resu…
 = 
STATE_SW_NO_ACTION
;

605 
su8Sèã
 = 
au8SW
;

608 
	}
}

610 
	$˘æ_rgbÀd_mŸ‹
(
UINT8
 
u8RxUART
)

614 i‡(
u8RxUART
) {

615 i‡(
u8RxUART
&(1<<0)) {

616 
	`TOGGLE
(
LED_R
);

619 i‡(
u8RxUART
&(1<<1)) {

620 
	`TOGGLE
(
LED_G
);

623 i‡(
u8RxUART
&(1<<2)) {

624 
	`TOGGLE
(
LED_B
);

627 i‡(
u8RxUART
&(1<<3)) {

628 
gu8MŸ‹Sèã
) {

630 
MOTOR_CCW
 = 0;

631 
MOTOR_CW
 = 0 ;

634 
MOTOR_CCW
 = 1;

635 
MOTOR_CW
 = 0 ;

638 
MOTOR_CCW
 = 1;

639 
MOTOR_CW
 = 1 ;

642 
MOTOR_CCW
 = 0;

643 
MOTOR_CW
 = 1 ;

646 
gu8MŸ‹Sèã
 ++;

647 i‡(
gu8MŸ‹Sèã
 == 4) {

648 
gu8MŸ‹Sèã
 = 0;

653 
LED_R
 = 
LED_OFF
;

654 
LED_G
 = 
LED_OFF
;

655 
LED_B
 = 
LED_OFF
;

656 
MOTOR_CCW
 = 0;

657 
MOTOR_CW
 = 0 ;

659 
	}
}

661 
UINT8
 
	$chk_my_addr
(
UINT8
 
au8MyAddr
, UINT8 
au8RxD©a
)

663 i‡–(
au8RxD©a
>>4Ë=(
au8MyAddr
&0x0F)) {

667 
	}
}

669 
	$¥o˚ss_my_∑ckë
(
löefi_∑ckë_t
 * 
≠°LöeFiPkt
)

671 
≠°LöeFiPkt
->
u8Ty≥
) {

672 
Ty≥_SëAddr
 :

674 
Ty≥_Bˇ°
 :

676 
Ty≥_Mˇ°
 :

678 
Ty≥_Uˇ°
 :

680 
Ty≥_SëLED
 :

681 
LED_R
 = 
≠°LöeFiPkt
->
pu8D©a
[0];

682 
LED_G
 = 
≠°LöeFiPkt
->
pu8D©a
[1];

683 
LED_B
 = 
≠°LöeFiPkt
->
pu8D©a
[2];

685 
Ty≥_CålMŸ‹
 :

687 
MOTOR_CW
 = 
≠°LöeFiPkt
->
pu8D©a
[1];

688 
MOTOR_CCW
 = 
≠°LöeFiPkt
->
pu8D©a
[2];

690 
Ty≥_RódAddr
 :

691 
	`¥ötf_Á°_f
("Myáddªs†i†0x%x\r\n", 
gu8MyAddr
);

694 
	}
}

696 
	$¥o˚ss_Æl_∑ckë
(
löefi_∑ckë_t
 * 
≠°LöeFiPkt
)

698 
≠°LöeFiPkt
->
u8Ty≥
) {

699 
Ty≥_SëAddr
 :

700 i‡(
SWITCH
 =
SW_ON
) {

701 
	`¥ötf_Á°_f
("£àaddªs†a†%d\r\n", 
≠°LöeFiPkt
->
u8Addr
);

702 
gu8MyAddr
 = 
≠°LöeFiPkt
->
u8Addr
;

703 
	`Eø£_APROM_Page
(
BASE_ADDRESS
);

704 
	`Wrôe_APROM_BYTE
(
BASE_ADDRESS
+0, 
gu8MyAddr
);

707 
Ty≥_Bˇ°
 :

709 
Ty≥_Mˇ°
 :

712 
	}
}

717 
	$maö
 ()

726 
UINT8
 
u8PªvSwôch
 = 0;

727 
UINT8
 
u8U¨tRx
 = 0;

728 
UINT8
 
u8RŸSí£
 = 0;

729 
UINT8
 
u8RxUART
;

730 
UINT16
 
u16C¡
 = 0;

731 
UINT8
 
u8OuçutSèã
 = 
STATE_SELF
;

732 
UINT8
 
u8SèãRxCSC
 = 
STATE_RxCSC_STOP
;

733 
UINT8
 
u8LöeFiAddr
 = 1;

734 
UINT8
 
u8LöeFiS≥ed
 = 1;

735 
UINT8
 
u8D©a
 = 0;

736 
UINT8
 
u8LöeFiCmd
 = 1;

737 
UINT8
 
u8PwrOnFú°Fœg
 = 1;

738 
UINT8
 
u8SèãRxPkt
 = 
STATE_RxPKT_INIT
;

740 
UINT8
 
pu8RxUART
[30];

742 
löefi_∑ckë_t
 
°LöeFiPkt
 = {

748 
gpu8D©a


752 
uöt8
 
u8MŸ‹Sèã
 = 
MS_STOP
;

754 
UINT8
 
u8RxBufIdx
 = 0;

755 
UINT8
 
u8RxLöeFiLí
 = 0;

756 
	#MAX_RX_BUF_LEN
 10

	)

757 
UINT8
 
pu8LöeFiRx
[
MAX_RX_BUF_LEN
];

758 
UINT8
 
u8LöeFiRxIdx
 = 0;

760 
	`gpio_£tup
();

761 
	`u¨t_£tup
();

762 
	`InôülUART1_Timî3
(57600);

764 
	`MODIFY_HIRC_166
();

766 
˛r_T0M
;

769 
£t_ET0
;

770 
£t_TR0
;

772 
gu8UART
 = 0;

773 
	`¥ötf_Á°_f
("This is UART0\n\r");

774 
gu8UART
 = 1;

775 
	`¥ötf_Á°_f
("This is UART1\n\r");

776 
UINT16
 
u8Cou¡2
 = 0;

777 
UINT8
 
u8RxPktC¡
 = 0;

778 
UINT8
 
u8PªambÀC¡
 = 0;

780 
u16C¡
 = 0 ; u16Cnt < 30000; u16Cnt++) {

781 
n›
;Çop;Çop;Çop;Çop;

783 
gu8UART
 = 0;

785 
u8U¨tRx
 = 
UART_RX
;

786 
u8PªvSwôch
 = 
SWITCH
;

788 
£t_EPI
;

789 
£t_EA
;

791 i‡(
UART_RX
 == 0) {

792 
SEL_RX_POL
 = 1;

796 
gu8MyAddr
 = 
gpcEEPROM
[0];

801 i‡(
	`Re˚ive_D©a_From_UART0_nb
(&
u8RxUART
)) {

802 
u8RxUART
) {

804 
	`TOGGLE
(
UART_TX
);

805 
	`¥ötf_Á°_f
("UART_TX=");

806 
	`¥ötf_Á°_f
("%d\n\r", 
UART_TX
);

809 
	`TOGGLE
(
LED_R
);

810 
	`¥ötf_Á°_f
("LED_R=");

811 
	`¥ötf_Á°_f
("%d\n\r", 
LED_R
);

814 
	`TOGGLE
(
LED_G
);

815 
	`¥ötf_Á°_f
("LED_G=");

816 
	`¥ötf_Á°_f
("%d\n\r", 
LED_G
);

819 
	`TOGGLE
(
LED_B
);

820 
	`¥ötf_Á°_f
("LED_B=");

821 
	`¥ötf_Á°_f
("%d\n\r", 
LED_B
);

827 
	`¥ötf_Á°_f
("no MOTOR_EN\r\n");

830 
	`TOGGLE
(
MOTOR_CW
);

831 
	`¥ötf_Á°_f
("MOTOR_CW=");

832 
	`¥ötf_Á°_f
("%d\n\r", 
MOTOR_CW
);

835 
	`TOGGLE
(
MOTOR_CCW
);

836 
	`¥ötf_Á°_f
("MOTOR_CCW=");

837 
	`¥ötf_Á°_f
("%d\n\r", 
MOTOR_CCW
);

840 
	`TOGGLE
(
SEL_RX_POL
);

841 
	`¥ötf_Á°_f
("SEL_RX_POL=");

842 
	`¥ötf_Á°_f
("%d\n\r", 
SEL_RX_POL
);

845 
	`¥ötf_Á°_f
("cou¡:%d\r\n", 
gu16TimeC¡
);

846 
gu16TimeC¡
 = 0;

851 i‡(
u8PªvSwôch
 !
SWITCH
) {

852 
	`¥ötf_Á°_f
("SWITCH:%d\n\r", 
SWITCH
);

853 i‡(
SWITCH
) {

856 
uöt8
 
su8C¡
 = 0;

857 
su8C¡
++;

858 
LED_R
 = 
su8C¡
&1;

859 
LED_G
 = (
su8C¡
>>1)&1;

860 
LED_B
 = (
su8C¡
>>2)&1;

863 
MOTOR_CW
 = (
su8C¡
>>1)&1;

864 
MOTOR_CCW
 = (
su8C¡
>>2)&1;

867 
u8PªvSwôch
 = 
SWITCH
;

870 i‡(
SWITCH
) {

873 i‡(
u8U¨tRx
 !
UART_RX
) {

878 
u8SèãRxPkt
) {

879 
STATE_RxPKT_INIT
 :

880 i‡(
	`gë_o˘ë_‰om_löefi
(&
u8RxUART
)) {

881 
gu16TimeC¡
 = 0;

882 
u8RxBufIdx
 = 0;

883 
pu8RxUART
[
u8RxBufIdx
++] = 
u8RxUART
;

884 
u8SèãRxPkt
 = 
STATE_RxPKT_START
;

887 
STATE_RxPKT_START
 :

888 i‡(
	`gë_o˘ë_‰om_löefi
(&
u8RxUART
)) {

889 
gu16TimeC¡
 = 0;

890 
pu8RxUART
[
u8RxBufIdx
++] = 
u8RxUART
;

892 i‡(
gu16TimeC¡
 > 1000) {

893 
u8RxLöeFiLí
 = 
u8RxBufIdx
;

894 
u8SèãRxPkt
 = 
STATE_RxPKT_END
;

898 
STATE_RxPKT_END
 :

899 
u8RxLöeFiLí
) {

901 i‡(
	`chk_my_addr
(
MY_ADDR
, 
pu8RxUART
[0])) {

903 
	`¥ötf_Á°_f
("Rx:%d\n\r", 
pu8RxUART
[0]);

904 
	`˘æ_rgbÀd_mŸ‹
(
u8RxUART
);

906 
u8SèãRxPkt
 = 
STATE_RxPKT_INIT
;

909 i‡–
u8RxLöeFiLí
 < 8) {

910 
UINT8
 
i
;

911 
	`¥ötf_Á°_f
("Rx size:%d\n\r", 
u8RxLöeFiLí
);

912 
i
=0; i<
u8RxLöeFiLí
;i++) {

913 
	`¥ötf_Á°_f
("0x%x ", 
pu8RxUART
[
i
]);

915 
	`¥ötf_Á°_f
("\n\r");

918 
	`˝_buf2löefùackë
(
u8RxLöeFiLí
, 
pu8RxUART
, &
°LöeFiPkt
);

919 
	`¥o˚ss_Æl_∑ckë
(&
°LöeFiPkt
);

921 i‡(
gu8MyAddr
 =
°LöeFiPkt
.
u8Addr
) {

922 
	`¥o˚ss_my_∑ckë
(&
°LöeFiPkt
);

926 
u8SèãRxPkt
 = 
STATE_RxPKT_INIT
;

933 
	}
}

	@slave/src/main.h

1 #i‚de‡
__maö__


2 
	#__maö__


	)

4 
	~"Comm⁄.h
"

5 
	~"Dñay.h
"

6 
	~"Fun˘i⁄_deföe.h
"

7 
	~"N76E003.h
"

8 
	~"SFR_Ma¸o.h
"

9 
	~"u¨t.h
"

	@sniffer/src/main.c

17 
	~"N76E003.h
"

18 
	~"Comm⁄.h
"

19 
	~"Dñay.h
"

20 
	~"SFR_Ma¸o.h
"

21 
	~"Fun˘i⁄_deföe.h
"

22 
	~"u¨t.h
"

23 
	~"löefi_∑ckë.h
"

24 
	~"ì¥om_üp.h
"

26 
__code
 
	$__©
 (
BASE_ADDRESS
Ë
gpcEEPROM
[128] = "";

28 
	#KEY_ESC
 (27)

	)

31 
	#TIMER0_VAL
 (13)

32 

	)

33 
	#TH0_INIT
 (((65536-
TIMER0_VAL
)>>8)&0xFF)

	)

34 
	#TL0_INIT
 ((65536-
TIMER0_VAL
)&0xFF)

	)

36 
	#PREAMBLE_CNT1
 (2)

	)

37 
	#PREAMBLE_CNT2
 (6)

	)

38 
	#PREAMBLE_CNT_MAX
 (100)

	)

40 
	#__VERSION__
 "Vîsi⁄ 1.4 o¿20231026\r\n"

	)

42 
	#MY_ADDR
 (1)

	)

46 
	#UART_TX
 
P16


	)

47 
	#SWITCH
 
P15


	)

48 
	#ROT_SENSE
 
P14


	)

49 
	#LED_B
 
P13


	)

50 
	#LED_G
 
P12


	)

51 
	#LED_R
 
P11


	)

52 
	#MOTOR_EN
 
P10


	)

53 
	#MOTOR_CW
 
P00


	)

54 
	#MOTOR_CCW
 
P01


	)

55 
	#UART_RX
 
P02


	)

56 
	#SEL_RX_POL
 
P04


	)

60 
	#UART_TX
 
P16


	)

61 
	#SWITCH
 
P15


	)

62 
	#LED_B
 
P12


	)

63 
	#LED_G
 
P13


	)

64 
	#LED_R
 
P14


	)

65 
	#MOTOR_EN
 
P10


	)

66 
	#MOTOR_CW
 
P00


	)

67 
	#MOTOR_CCW
 
P01


	)

68 
	#PWR_OUT
 
P03


	)

69 
	#UART_RX
 
P02


	)

70 
	#SEL_RX_POL
 
P04


	)

74 
	#SW_ON
 (1)

	)

75 
	#SW_OFF
 (0)

	)

76 
	#SW_DB
 (3)

	)

77 
	#SW_NONE
 (4)

	)

78 
	#ROT_SENSE_OPEN
 (1)

79 
	#ROT_SENSE_CLOSE
 (0)

80 

	)

81 
	#LED_OFF
 1

	)

82 
	#LED_ON
 0

	)

84 
	#LINEFI_RATE
 3

	)

86 
uöt8
 
gu8MyAddr
;

88 
UINT8
 
__xd©a
 
gpu8D©a
[20];

90 
UINT32
 
__xd©a
 
gpu32U¨tS≥ed
[] = {

105 
	}
};

107 
UINT8
 
	ggu8UART
 = 0;

108 
UINT16
 
	ggu16TimeC¡
 = 0;

111 
	$putch¨
 (
c
)

113 i‡(
gu8UART
 == 0) {

114 
TI
 = 0;

115 
SBUF
 = 
c
;

116 
TI
==0);

119 
TI_1
 = 0;

120 
SBUF_1
 = 
c
;

121 
TI_1
==0);

123 
	}
}

125 
UINT8
 
	$c⁄v_nibbÀ2m™che°î
 (
UINT8
 
c
)

134 
UINT8
 
i
;

135 
UINT8
 
u8M™ch
 = 0;

136 
i
=0;i<4;i++) {

137 
u8M™ch
 >>=2;

138 i‡(
c
&1) {

139 
u8M™ch
 |= 0x40;

142 
u8M™ch
 |= 0x80;

144 
c
 >>= 1;

146  
u8M™ch
;

147 
	}
}

149 
	$putch¨_m™che°î
 (
c
)

151 
gu8UART
 = 1;

152 
	`putch¨
(
	`c⁄v_nibbÀ2m™che°î
(
c
));

153 
	`putch¨
(
	`c⁄v_nibbÀ2m™che°î
(
c
>>4));

155 
	}
}

157 
	$¥ómbÀ
()

159 
gu8UART
 = 1;

160 
	`putch¨
(0xF0);

161 
	`putch¨
(0xF0);

162 
	`putch¨
(0xF0);

163 
	`putch¨
(0xF0);

164 
	}
}

168 
	mSTATE_SELF
,

169 
	mSTATE_CROSS
,

170 
	mSTATE_BOTH


174 
	mSTATE_RxLFP_INIT
,

175 
	mSTATE_RxLFP_START
,

176 
	mSTATE_RxLFP_END
,

177 
	mSTATE_RxLFP_A
,

178 
	mSTATE_RxLFP_B
,

179 
	mSTATE_RxLFP_NONE


183 
	mMS_STOP
,

184 
	mMS_ROT_CW
,

185 
	mMS_WAIT_UNTIL_ROT_SENSE_CLOSE
,

186 
	mMS_END


189 
	$¥öt_esc
(
UINT8
 
au8Sèã
)

191 
	`¥ötf_Á°_f
("\n\r");

192 
au8Sèã
) {

193 
STATE_SELF
 :

194 
	`¥ötf_Á°_f
("self ");

196 
STATE_CROSS
 :

197 
	`¥ötf_Á°_f
("cross");

199 
STATE_BOTH
 :

200 
	`¥ötf_Á°_f
("both ");

203 
	`¥ötf_Á°_f
(" ouçut:Thi†i†UART%d\n\r", 
gu8UART
);

204 
	}
}

206 
	$¥öt_ch¨
(
au8D©a
)

208 
au8D©a
) {

209 
KEY_ESC
 :

212 
	`¥ötf_Á°_f
("\r\n");

215 
	`¥ötf_Á°_f
("%c",
au8D©a
);

217 
	}
}

219 
UINT8
 
	$°©e_machöe
(
UINT8
 
au8Sèã
, UINT8 
au8RxUART
, UINT8 
au8SñfID
, UINT8 
au8OthîID
)

221 if(
au8RxUART
 =
KEY_ESC
) {

222 
gu8UART
 = 
au8SñfID
;

223 
	`¥ötf_Á°_f
("\r\nöput:Thi†i†UART%d", 
gu8UART
);

224 
au8Sèã
) {

225 
STATE_SELF
 :

226 
au8Sèã
 = 
STATE_CROSS
;

227 
gu8UART
 = 
au8SñfID
;

228 
	`¥öt_esc
(
au8Sèã
);

229 
gu8UART
 = 
au8OthîID
;

230 
	`¥öt_esc
(
au8Sèã
);

232 
STATE_CROSS
 :

233 
au8Sèã
 = 
STATE_BOTH
;

234 
gu8UART
 = 
au8SñfID
;

235 
	`¥öt_esc
(
au8Sèã
);

236 
gu8UART
 = 
au8OthîID
;

237 
	`¥öt_esc
(
au8Sèã
);

239 
STATE_BOTH
 :

240 
au8Sèã
 = 
STATE_SELF
;

241 
gu8UART
 = 
au8SñfID
;

242 
	`¥öt_esc
(
au8Sèã
);

247 
au8Sèã
) {

248 
STATE_SELF
 :

249 
gu8UART
 = 
au8SñfID
;

250 
	`¥öt_ch¨
(
au8RxUART
);

252 
STATE_CROSS
 :

253 
gu8UART
 = 
au8OthîID
;

254 
	`¥öt_ch¨
(
au8RxUART
);

256 
STATE_BOTH
 :

257 
gu8UART
 = 
au8SñfID
;

258 
	`¥öt_ch¨
(
au8RxUART
);

259 
gu8UART
 = 
au8OthîID
;

260 
	`¥öt_ch¨
(
au8RxUART
);

264  
au8Sèã
;

265 
	}
}

267 
	$Timî0_ISR
 (Ë
	$öãºu±
(1)

269 
TH0
 = 
TH0_INIT
;

270 
TL0
 = 
TL0_INIT
;

271 
gu16TimeC¡
++;

273 i‡(
P06
) {

274 
P06
 = 0;

277 
P06
 = 1;

280 
	}
}

282 
	$pö_öãºu±_i§
(Ë
	$öãºu±
(7)

284 i‡(
PIF
 == 0x10) {

286 
PIF
 = 0;

287 
	}
}

290 
UINT8
 
	$chk_m™che°î
(
UINT8
 
c
)

292 
UINT8
 
i
;

293 
i
=0;i<4;i++) {

294 i‡(((
c
>>(2*
i
)) & 1) == ((c>>((2*i+1)))&1)) {

300 
	}
}

302 
UINT8
 
	$c⁄v_m™che°î2nibbÀ
(
UINT8
 
c
)

304 
UINT8
 
i
;

305 
UINT8
 
u8NibbÀ
 = 0;

306 
i
=0;i<4;i++) {

307 i‡(
c
 & 1) {

308 
u8NibbÀ
 |= 0x80;

310 
c
 >>= 2;

311 
u8NibbÀ
 >>= 1;

313  
u8NibbÀ
;

314 
	}
}

316 
UINT8
 
	$c⁄v_m™che°î2highnibbÀ
(
UINT8
 
c
)

318 
UINT8
 
i
;

319 
UINT8
 
u8NibbÀ
 = 0;

320 
i
=0;i<4;i++) {

321 
u8NibbÀ
 >>= 1;

322 i‡(
c
 & 1) {

323 
u8NibbÀ
 |= 0x80;

325 
c
 >>= 2;

327  
u8NibbÀ
;

328 
	}
}

330 
	$MODIFY_HIRC_166
()

332 
húcm≠0
,
húcm≠1
;

333 
åimvÆue16bô
;

335 i‡((
PCON
&
SET_BIT4
)==SET_BIT4) {

336 
húcm≠0
 = 
RCTRIM0
;

337 
húcm≠1
 = 
RCTRIM1
;

338 
åimvÆue16bô
 = ((
húcm≠0
<<1)+(
húcm≠1
&0x01));

339 
åimvÆue16bô
 =Årimvalue16bit - 15;

340 
húcm≠1
 = 
åimvÆue16bô
&0x01;

341 
húcm≠0
 = 
åimvÆue16bô
>>1;

342 
TA
=0XAA;

343 
TA
=0X55;

344 
RCTRIM0
 = 
húcm≠0
;

345 
TA
=0XAA;

346 
TA
=0X55;

347 
RCTRIM1
 = 
húcm≠1
;

349 
PCON
 &
CLR_BIT4
;

351 
	}
}

352 
	$di•_hñp
(
UINT8
 
au8Code
)

354 
gu8UART
 = 1;

355 
au8Code
) {

361 
	`¥ötf_Á°_f
("IdleÖreamble on/off\r\n");

366 
	`¥ötf_Á°_f
("LineFi Power Off\r\n");

369 
	`¥ötf_Á°_f
("LineFi Power On\r\n");

372 
	`¥ötf_Á°_f
("LineFi Uart Tx Low\r\n");

375 
	`¥ötf_Á°_f
("LineFi Uart Tx High\r\n");

378 
	`¥ötf_Á°_f
("LineFi CSCÑx FSM Off\r\n");

381 
	`¥ötf_Á°_f
("LineFi CSCÑx FSM ON\r\n");

384 
	`¥ötf_Á°_f
(
__VERSION__
);

387 
	`¥ötf_Á°_f
("1: downlinkÖacket 1\r\n");

388 
	`¥ötf_Á°_f
("2: downlinkÖacket 2\r\n");

389 
	`¥ötf_Á°_f
("3: uplink idleÖreamble on/off\r\n");

390 
	`¥ötf_Á°_f
("p/P: LineFi Power off/on\r\n");

391 
	`¥ötf_Á°_f
("t/T: LineFi Uart Tx Low/High\r\n");

392 
	`¥ötf_Á°_f
("s/S: LineFie CSC Rx FSM off/on\r\n");

393 
	`¥ötf_Á°_f
("testÖrocedure:Ö -> P -> T -> S -> 1 or 2\r\n");

396 
	}
}

398 
	$gpio_£tup
()

417 
Së_AŒ_GPIO_Quasi_Mode
;

419 
P15_I≈ut_Mode
;

420 
P02_I≈ut_Mode
;

421 
P07_I≈ut_Mode
;

423 
P16_PushPuŒ_Mode
;

424 
P13_PushPuŒ_Mode
;

425 
P14_PushPuŒ_Mode
;

426 
P12_PushPuŒ_Mode
;

427 
P11_PushPuŒ_Mode
;

428 
P10_PushPuŒ_Mode
;

429 
P00_PushPuŒ_Mode
;

430 
P01_PushPuŒ_Mode
;

431 
P04_PushPuŒ_Mode
;

432 
P03_PushPuŒ_Mode
;

434 
UART_TX
 = 0;

435 
LED_B
 = 1;

436 
LED_G
 = 1;

437 
LED_R
 = 1;

438 
MOTOR_EN
 = 0;

439 
MOTOR_CW
 = 0;

440 
MOTOR_CCW
 = 0;

441 
SEL_RX_POL
 = 0;

442 
PWR_OUT
 = 0;

443 
	}
}

446 
	mSTATE_SW_NO_ACTION
,

447 
	mSTATE_SW1_OFF
,

448 
	mSTATE_SW2_OFF
,

449 
	mSTATE_SW3_OFF
,

450 
	mSTATE_SW4_OFF
,

451 
	mSTATE_SW1_ON
,

452 
	mSTATE_SW2_ON
,

453 
	mSTATE_SW3_ON
,

454 
	mSTATE_SW4_ON
,

455 
	mSTATE_SW_DUAL_ON
,

456 
	mSTATE_SW_DUAL_WAIT
,

457 
	mSTATE_SW_DUAL_OFF
,

458 
	mSTATE_SW_END


461 
UINT8
 
	$°©e_swôches
(
UINT8
 
au8SW
, UINT8 *
≠u8SwNum
)

463 
UINT8
 
su8PªvSW
 = 0;

464 
UINT8
 
i
;

466 
UINT8
 
u8Resu…
 = 
SW_NONE
;

467 i‡(
su8PªvSW
 =
au8SW
) {

468 *
≠u8SwNum
 = 0;

469  
SW_NONE
;

477 *
≠u8SwNum
 = 0;

479 
i
=0;i<5;i++) {

480 (
su8PªvSW
>>
i
)&1) {

481 
SW_ON
 :

482 (
au8SW
>>
i
)&1) {

483 
SW_ON
 :

485 
SW_OFF
 :

486 
su8PªvSW
 = 
au8SW
;

487 *
≠u8SwNum
 |1<<
i
;

488 
u8Resu…
 = 
SW_OFF
;

493 
SW_OFF
 :

494 (
au8SW
>>
i
)&1) {

495 
SW_ON
 :

496 
su8PªvSW
 = 
au8SW
;

497 *
≠u8SwNum
 |1<<
i
;

498 
u8Resu…
 = 
SW_ON
;

502 
SW_OFF
 :

510  
u8Resu…
;

512 
su8C¡
++;

513 
UINT8
 
u8Resu…
;

514 
UINT8
 
u8PªvSW
 = 
su8Sèã
;

515 i‡(
au8SW
 !
u8PªvSW
) {

516 
UINT8
 
i
;

517 
i
=0;i<4;i++) {

518 i‡(((
au8SW
>>
i
)&1Ë!((
u8PªvSW
>>i)&1)) {

519 i‡((
au8SW
>>
i
)&1) {

529 i‡(((
au8SW
>>3)&1Ë!((
u8PªvSW
>>3)&1)) {

530 i‡((
au8SW
>>3)&1) {

539 i‡(
u8PªvSW
) {

541 
u8PªvSW
) {

542 
STATE_SW1_ON
 :

544 
STATE_SW2_ON
 :

546 
STATE_SW3_ON
 :

548 
STATE_SW4_ON
 :

550 
STATE_SW_DUAL_ON
 :

552 
STATE_SW_DUAL_WAIT
 :

558 
su8Sèã
) {

559 
STATE_SW1_ON
 :

560 
u8Resu…
 = 
STATE_SW1_OFF
;

562 
STATE_SW2_ON
 :

563 
u8Resu…
 = 
STATE_SW2_OFF
;

565 
STATE_SW3_ON
 :

566 
u8Resu…
 = 
STATE_SW3_OFF
;

568 
STATE_SW4_ON
 :

569 
u8Resu…
 = 
STATE_SW4_OFF
;

571 
STATE_SW_DUAL_ON
 :

572 
u8Resu…
 = 
STATE_SW_DUAL_OFF
;

578 
su8Sèã
) {

579 
STATE_SW1_ON
 :

580 
STATE_SW2_ON
 :

581 
STATE_SW3_ON
 :

582 
STATE_SW4_ON
 :

583 
STATE_SW1_OFF
 :

584 
STATE_SW2_OFF
 :

585 
STATE_SW3_OFF
 :

586 
STATE_SW4_OFF
 :

587 
STATE_SW_DUAL_ON
 :

588 
STATE_SW_DUAL_OFF
 :

589 
u8Resu…
 = 
STATE_SW_NO_ACTION
;

595 
su8Sèã
 = 
au8SW
;

598 
	}
}

601 
	$˘æ_rgbÀd
(
UINT8
 
u8RxUART
)

605 i‡(
u8RxUART
) {

606 i‡(
u8RxUART
&0x1) {

607 
LED_R
 = 
LED_ON
;

610 
LED_R
 = 
LED_OFF
;

612 i‡(
u8RxUART
&0x2) {

613 
LED_G
 = 
LED_ON
;

616 
LED_G
 = 
LED_OFF
;

618 i‡(
u8RxUART
&0x4) {

619 
LED_B
 = 
LED_ON
;

622 
LED_B
 = 
LED_OFF
;

626 
LED_R
 = 
LED_OFF
;

627 
LED_G
 = 
LED_OFF
;

628 
LED_B
 = 
LED_OFF
;

630 
	}
}

632 
UINT8
 
	$chk_my_addr
(
UINT8
 
au8MyAddr
, UINT8 
au8RxD©a
)

634 i‡–(
au8RxD©a
>>4Ë=(
au8MyAddr
&0x0F)) {

638 
	}
}

640 
	$¥o˚ss_my_∑ckë
(
löefi_∑ckë_t
 * 
≠°LöeFiPkt
)

642 
≠°LöeFiPkt
->
u8Ty≥
) {

643 
Ty≥_SëAddr
 :

645 
Ty≥_Bˇ°
 :

647 
Ty≥_Mˇ°
 :

649 
Ty≥_Uˇ°
 :

651 
Ty≥_SëLED
 :

652 
LED_R
 = 
≠°LöeFiPkt
->
pu8D©a
[0];

653 
LED_G
 = 
≠°LöeFiPkt
->
pu8D©a
[1];

654 
LED_B
 = 
≠°LöeFiPkt
->
pu8D©a
[2];

656 
Ty≥_CålMŸ‹
 :

657 
MOTOR_EN
 = 
≠°LöeFiPkt
->
pu8D©a
[0];

658 
MOTOR_CW
 = 
≠°LöeFiPkt
->
pu8D©a
[1];

659 
MOTOR_CCW
 = 
≠°LöeFiPkt
->
pu8D©a
[2];

661 
Ty≥_RódAddr
 :

662 
	`¥ötf_Á°_f
("Myáddªs†i†0x%x\r\n", 
gu8MyAddr
);

665 
	}
}

667 
	$¥o˚ss_Æl_∑ckë
(
löefi_∑ckë_t
 * 
≠°LöeFiPkt
)

669 
≠°LöeFiPkt
->
u8Ty≥
) {

670 
Ty≥_SëAddr
 :

671 i‡(
SWITCH
 =
SW_ON
) {

672 
	`¥ötf_Á°_f
("£àaddªs†a†%d\r\n", 
≠°LöeFiPkt
->
u8Addr
);

673 
gu8MyAddr
 = 
≠°LöeFiPkt
->
u8Addr
;

674 
	`Eø£_APROM_Page
(
BASE_ADDRESS
);

675 
	`Wrôe_APROM_BYTE
(
BASE_ADDRESS
+0, 
gu8MyAddr
);

678 
Ty≥_Bˇ°
 :

680 
Ty≥_Mˇ°
 :

682 
Ty≥_Uˇ°
 :

683 i‡(
gu8MyAddr
 =
≠°LöeFiPkt
->
u8Addr
) {

684 
	`¥o˚ss_my_∑ckë
(
≠°LöeFiPkt
);

687 
Ty≥_RódAddr
 :

688 
	`¥ötf_Á°_f
("Myáddªs†i†%d\r\n", 
gu8MyAddr
);

691 i‡(
gu8MyAddr
 =
≠°LöeFiPkt
->
u8Addr
) {

692 
	`¥o˚ss_my_∑ckë
(
≠°LöeFiPkt
);

696 
	}
}

698 
	$¥öt_⁄e_o˘ë_löefi
(
UINT8
 
au8D©a
)

700 
	`¥ötf_Á°_f
("addªss:%u\r\n", 
au8D©a
>>4);

701 
	`¥ötf_Á°_f
("comm™d:%u\r\n", 
au8D©a
&0xF);

702 
	}
}

707 
	$maö
 ()

716 
UINT8
 
u8PªvSwôch
 = 0;

717 
UINT8
 
u8U¨tRx
 = 0;

718 
UINT8
 
u8RŸSí£
 = 0;

719 
UINT8
 
u8RxUART
;

720 
UINT16
 
u16C¡
 = 0;

721 
UINT8
 
u8OuçutSèã
 = 
STATE_SELF
;

722 
UINT8
 
u8LöeFiAddr
 = 1;

723 
UINT8
 
u8LöeFiS≥ed
 = 1;

724 
UINT8
 
u8D©a
 = 0;

725 
UINT8
 
u8LöeFiCmd
 = 1;

726 
UINT8
 
u8PwrOnFú°Fœg
 = 1;

727 
UINT8
 
u8SèãRxLFP
 = 
STATE_RxLFP_INIT
;

729 
UINT8
 
__xd©a
 
pu8RxUART
[30];

731 
löefi_∑ckë_t
 
°LöeFiPkt
 = {

737 
gpu8D©a


741 
uöt8
 
u8MŸ‹Sèã
 = 
MS_STOP
;

743 
UINT8
 
u8RxIdx
 = 0;

744 
	#MAX_RX_BUF_LEN
 10

	)

745 
UINT8
 
pu8LöeFiRx
[
MAX_RX_BUF_LEN
];

746 
UINT8
 
u8LöeFiRxIdx
 = 0;

748 
	`gpio_£tup
();

749 
	`u¨t_£tup
();

750 
	`InôülUART1_Timî3
(57600);

752 
	`MODIFY_HIRC_166
();

754 
˛r_T0M
;

757 
£t_ET0
;

758 
£t_TR0
;

760 
gu8UART
 = 0;

761 
	`¥ötf_Á°_f
("This is UART0\n\r");

762 
	`¥ötf_Á°_f
("LineFi Sniffer\n\r");

763 
gu8UART
 = 1;

764 
	`¥ötf_Á°_f
("This is UART1\n\r");

765 
UINT16
 
u8Cou¡2
 = 0;

766 
UINT8
 
u8RxPktC¡
 = 0;

767 
UINT8
 
u8PªambÀC¡
 = 0;

769 
u16C¡
 = 0 ; u16Cnt < 30000; u16Cnt++) {

770 
n›
;Çop;Çop;Çop;Çop;

772 
gu8UART
 = 0;

774 
u8U¨tRx
 = 
UART_RX
;

775 
u8PªvSwôch
 = 
SWITCH
;

777 
£t_EPI
;

778 
£t_EA
;

780 i‡(
UART_RX
 == 0) {

781 
SEL_RX_POL
 = 1;

783 
MOTOR_EN
 = 1;

785 
gu8MyAddr
 = 
gpcEEPROM
[0];

790 i‡(
	`Re˚ive_D©a_From_UART0_nb
(&
u8RxUART
)) {

791 
u8RxUART
) {

793 
	`TOGGLE
(
UART_TX
);

794 
	`¥ötf_Á°_f
("UART_TX=");

795 
	`¥ötf_Á°_f
("%d\n\r", 
UART_TX
);

798 
	`TOGGLE
(
LED_R
);

799 
	`¥ötf_Á°_f
("LED_R=");

800 
	`¥ötf_Á°_f
("%d\n\r", 
LED_R
);

803 
	`TOGGLE
(
LED_G
);

804 
	`¥ötf_Á°_f
("LED_G=");

805 
	`¥ötf_Á°_f
("%d\n\r", 
LED_G
);

808 
	`TOGGLE
(
LED_B
);

809 
	`¥ötf_Á°_f
("LED_B=");

810 
	`¥ötf_Á°_f
("%d\n\r", 
LED_B
);

813 
	`TOGGLE
(
MOTOR_EN
);

814 
	`¥ötf_Á°_f
("MOTOR_EN=");

815 
	`¥ötf_Á°_f
("%d\n\r", 
MOTOR_EN
);

818 
	`TOGGLE
(
MOTOR_CW
);

819 
	`¥ötf_Á°_f
("MOTOR_CW=");

820 
	`¥ötf_Á°_f
("%d\n\r", 
MOTOR_CW
);

823 
	`TOGGLE
(
MOTOR_CCW
);

824 
	`¥ötf_Á°_f
("MOTOR_CCW=");

825 
	`¥ötf_Á°_f
("%d\n\r", 
MOTOR_CCW
);

828 
	`TOGGLE
(
SEL_RX_POL
);

829 
	`¥ötf_Á°_f
("SEL_RX_POL=");

830 
	`¥ötf_Á°_f
("%d\n\r", 
SEL_RX_POL
);

833 
	`¥ötf_Á°_f
("cou¡:%d\r\n", 
gu16TimeC¡
);

834 
gu16TimeC¡
 = 0;

839 i‡(
u8PªvSwôch
 !
SWITCH
) {

840 
	`¥ötf_Á°_f
("SWITCH:%d\n\r", 
SWITCH
);

841 i‡(
SWITCH
) {

844 
uöt8
 
su8C¡
 = 0;

845 
su8C¡
++;

846 
LED_R
 = 
su8C¡
&1;

847 
LED_G
 = (
su8C¡
>>1)&1;

848 
LED_B
 = (
su8C¡
>>2)&1;

850 
MOTOR_EN
 = 
su8C¡
&1;

851 
MOTOR_CW
 = (
su8C¡
>>1)&1;

852 
MOTOR_CCW
 = (
su8C¡
>>2)&1;

855 
u8PªvSwôch
 = 
SWITCH
;

858 i‡(
SWITCH
) {

861 i‡(
u8U¨tRx
 !
UART_RX
) {

866 
u8SèãRxLFP
) {

867 
STATE_RxLFP_INIT
 :

868 i‡(
	`Re˚ive_D©a_From_UART1_nb
(&
u8RxUART
)) {

869 
gu16TimeC¡
 = 0;

870 
u8RxIdx
 = 0;

871 
pu8RxUART
[
u8RxIdx
++] = 
u8RxUART
;

872 
u8SèãRxLFP
 = 
STATE_RxLFP_START
;

875 
STATE_RxLFP_START
 :

876 i‡(
	`Re˚ive_D©a_From_UART1_nb
(&
u8RxUART
)) {

877 
gu16TimeC¡
 = 0;

878 
pu8RxUART
[
u8RxIdx
++] = 
u8RxUART
;

880 i‡(
gu16TimeC¡
 > 1000) {

881 
u8SèãRxLFP
 = 
STATE_RxLFP_END
;

885 
STATE_RxLFP_END
 :

886 
	`¥öt_øw_∑ckë
(
u8RxIdx
, 
pu8RxUART
);

887 
	`˝_buf2löefùackë
(
u8RxIdx
, 
pu8RxUART
, &
°LöeFiPkt
)) {

888 
CONV_OK
 :

889 
	`¥öt_löefùackë
(&
°LöeFiPkt
);

891 
CONV_ERR_CRC
 :

892 
	`¥ötf_Á°_f
("ERROR: CRC!!\r\n");

894 
CONV_ERR_TOO_SMALLSIZE
 :

895 
u8RxIdx
) {

897 
	`¥öt_⁄e_o˘ë_löefi
(
pu8RxUART
[0]);

900 
	`¥ötf_Á°_f
("ERROR:Åoo smallÜength!!\r\n");

905 
u8SèãRxLFP
 = 
STATE_RxLFP_INIT
;

909 
	}
}

	@sniffer/src/main.h

1 #i‚de‡
__maö__


2 
	#__maö__


	)

4 
	~"Comm⁄.h
"

5 
	~"Dñay.h
"

6 
	~"Fun˘i⁄_deföe.h
"

7 
	~"N76E003.h
"

8 
	~"SFR_Ma¸o.h
"

9 
	~"u¨t.h
"

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	#__√ed___va_li°


	)

36 
	~<°d¨g.h
>

38 
	~<bôs/ty≥s.h
>

39 
	~<bôs/ty≥s/__Âos_t.h
>

40 
	~<bôs/ty≥s/__Âos64_t.h
>

41 
	~<bôs/ty≥s/__FILE.h
>

42 
	~<bôs/ty≥s/FILE.h
>

43 
	~<bôs/ty≥s/°ru˘_FILE.h
>

45 #ifde‡
__USE_GNU


46 
	~<bôs/ty≥s/cookõ_io_fun˘i⁄s_t.h
>

49 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


50 #ifde‡
__GNUC__


51 #i‚de‡
_VA_LIST_DEFINED


52 
__gnuc_va_li°
 
	tva_li°
;

53 
	#_VA_LIST_DEFINED


	)

56 
	~<°d¨g.h
>

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__off_t_deföed


62 #i‚de‡
__USE_FILE_OFFSET64


63 
__off_t
 
	toff_t
;

65 
__off64_t
 
	toff_t
;

67 
	#__off_t_deföed


	)

69 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


70 
__off64_t
 
	toff64_t
;

71 
	#__off64_t_deföed


	)

75 #ifde‡
__USE_XOPEN2K8


76 #i‚de‡
__ssize_t_deföed


77 
__ssize_t
 
	tssize_t
;

78 
	#__ssize_t_deföed


	)

83 #i‚de‡
__USE_FILE_OFFSET64


84 
__Âos_t
 
	tÂos_t
;

86 
__Âos64_t
 
	tÂos_t
;

88 #ifde‡
__USE_LARGEFILE64


89 
__Âos64_t
 
	tÂos64_t
;

93 
	#_IOFBF
 0

	)

94 
	#_IOLBF
 1

	)

95 
	#_IONBF
 2

	)

99 
	#BUFSIZ
 8192

	)

104 
	#EOF
 (-1)

	)

109 
	#SEEK_SET
 0

	)

110 
	#SEEK_CUR
 1

	)

111 
	#SEEK_END
 2

	)

112 #ifde‡
__USE_GNU


113 
	#SEEK_DATA
 3

	)

114 
	#SEEK_HOLE
 4

	)

118 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


120 
	#P_tmpdú
 "/tmp"

	)

133 
	~<bôs/°dio_lim.h
>

136 #i‡
__GLIBC_USE
 (
ISOC2X
)

138 
	#_PRINTF_NAN_LEN_MAX
 4

	)

143 
FILE
 *
°dö
;

144 
FILE
 *
°dout
;

145 
FILE
 *
°dîr
;

147 
	#°dö
 
°dö


	)

148 
	#°dout
 
°dout


	)

149 
	#°dîr
 
°dîr


	)

152 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

154 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

156 #ifde‡
__USE_ATFILE


158 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

159 c⁄° *
__√w
Ë
__THROW
;

162 #ifde‡
__USE_GNU


164 
	#RENAME_NOREPLACE
 (1 << 0)

	)

165 
	#RENAME_EXCHANGE
 (1 << 1)

	)

166 
	#RENAME_WHITEOUT
 (1 << 2)

	)

170 
	$ª«mót2
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

171 c⁄° *
__√w
, 
__Êags
Ë
__THROW
;

178 
	`f˛o£
 (
FILE
 *
__°ªam
);

180 #unde‡
__©å_dóŒoc_f˛o£


181 
	#__©å_dóŒoc_f˛o£
 
	`__©å_dóŒoc
 (
f˛o£
, 1)

	)

187 #i‚de‡
__USE_FILE_OFFSET64


188 
FILE
 *
	$tmpfûe
 ()

189 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

191 #ifde‡
__REDIRECT


192 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
)

193 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

195 
	#tmpfûe
 
tmpfûe64


	)

199 #ifde‡
__USE_LARGEFILE64


200 
FILE
 *
	$tmpfûe64
 ()

201 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

205 *
	$tm≤am
 ([
L_tm≤am
]Ë
__THROW
 
__wur
;

207 #ifde‡
__USE_MISC


210 *
	$tm≤am_r
 (
__s
[
L_tm≤am
]Ë
__THROW
 
__wur
;

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


222 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

223 
__THROW
 
__©åibuã_mÆloc__
 
__wur
 
__©å_dóŒoc_‰ì
;

230 
	`fÊush
 (
FILE
 *
__°ªam
);

232 #ifde‡
__USE_MISC


239 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

242 #ifde‡
__USE_GNU


249 
	`f˛o£Æl
 ();

253 #i‚de‡
__USE_FILE_OFFSET64


258 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

259 c⁄° *
__ª°ri˘
 
__modes
)

260 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

265 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

266 c⁄° *
__ª°ri˘
 
__modes
,

267 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 #ifde‡
__REDIRECT


270 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

271 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

272 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

273 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

274 c⁄° *
__ª°ri˘
 
__modes
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

276 
__wur
;

278 
	#f›í
 
f›í64


	)

279 
	#‰e›í
 
‰e›í64


	)

282 #ifde‡
__USE_LARGEFILE64


283 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
)

285 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

286 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

291 #ifdef 
__USE_POSIX


293 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW


294 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

297 #ifdef 
__USE_GNU


300 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

301 c⁄° *
__ª°ri˘
 
__modes
,

302 
cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW


303 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

306 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

308 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

309 
__THROW
 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

314 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW


315 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

317 #ifde‡
_WCHAR_H


321 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW


322 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
;

328 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

332 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

333 
__modes
, 
size_t
 
__n
Ë
__THROW
;

335 #ifdef 
__USE_MISC


338 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

339 
size_t
 
__size
Ë
__THROW
;

342 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

350 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

351 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

356 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

358 
	$•rötf
 (*
__ª°ri˘
 
__s
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

365 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

366 
__gnuc_va_li°
 
__¨g
);

371 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
);

373 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

374 
__gnuc_va_li°
 
__¨g
Ë
__THROWNL
;

376 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


378 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

379 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

380 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

382 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

383 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

384 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

387 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

390 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

391 
__gnuc_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

393 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

394 c⁄° *
__ª°ri˘
 
__fmt
, ...)

395 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

396 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

397 c⁄° *
__ª°ri˘
 
__fmt
, ...)

398 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

401 #ifde‡
__USE_XOPEN2K8


403 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

404 
__gnuc_va_li°
 
__¨g
)

405 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

406 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

415 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

416 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

421 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

423 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

424 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

430 
	~<bôs/Êﬂä.h
>

431 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
Ë&& !
deföed
 
__LDBL_COMPAT
 \

432 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

433 #ifde‡
__REDIRECT


434 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

435 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

436 
__isoc99_fsˇnf
Ë
__wur
;

437 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

438 
__isoc99_sˇnf
Ë
__wur
;

439 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

440 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

441 
__isoc99_ssˇnf
);

443 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

445 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

446 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

447 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

448 
	#fsˇnf
 
__isoc99_fsˇnf


	)

449 
	#sˇnf
 
__isoc99_sˇnf


	)

450 
	#ssˇnf
 
__isoc99_ssˇnf


	)

454 #ifdef 
__USE_ISOC99


459 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

460 
__gnuc_va_li°
 
__¨g
)

461 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

467 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

468 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

471 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

472 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

473 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

476 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

477 #i‡
deföed
 
__REDIRECT
 && !deföed 
__LDBL_COMPAT
 \

478 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

479 
	`__REDIRECT
 (
vfsˇnf
,

480 (
FILE
 *
__ª°ri˘
 
__s
,

481 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

482 
__isoc99_vfsˇnf
)

483 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

484 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

485 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

487 
	`__REDIRECT_NTH
 (
vssˇnf
,

488 (c⁄° *
__ª°ri˘
 
__s
,

489 c⁄° *
__ª°ri˘
 
__f‹m©
,

490 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

491 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

492 #ñi‡!
deföed
 
__REDIRECT


493 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

494 c⁄° *
__ª°ri˘
 
__f‹m©
,

495 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

496 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

497 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

498 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

499 c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

501 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

502 
	#vsˇnf
 
__isoc99_vsˇnf


	)

503 
	#vssˇnf
 
__isoc99_vssˇnf


	)

513 
	`fgëc
 (
FILE
 *
__°ªam
);

514 
	`gëc
 (
FILE
 *
__°ªam
);

520 
	`gëch¨
 ();

522 #ifde‡
__USE_POSIX199506


527 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

528 
	`gëch¨_u∆ocked
 ();

531 #ifde‡
__USE_MISC


538 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

549 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

550 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

556 
	`putch¨
 (
__c
);

558 #ifde‡
__USE_MISC


565 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

568 #ifde‡
__USE_POSIX199506


573 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putch¨_u∆ocked
 (
__c
);

578 #i‡
deföed
 
__USE_MISC
 \

579 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

581 
	`gëw
 (
FILE
 *
__°ªam
);

584 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

592 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

593 
__wur
 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

595 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

605 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

608 #ifde‡
__USE_GNU


615 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

616 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur


617 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

621 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

632 
__ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

633 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

634 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

635 
__ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

636 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

637 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

645 
__ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

646 
size_t
 *
__ª°ri˘
 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

655 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

661 
	`puts
 (c⁄° *
__s
);

668 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

675 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

682 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

684 #ifde‡
__USE_GNU


691 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

692 
FILE
 *
__ª°ri˘
 
__°ªam
);

695 #ifde‡
__USE_MISC


702 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

703 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

704 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

705 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

713 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

718 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

723 
	`ªwöd
 (
FILE
 *
__°ªam
);

730 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


731 #i‚de‡
__USE_FILE_OFFSET64


736 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

741 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

743 #ifde‡
__REDIRECT


744 
	`__REDIRECT
 (
f£eko
,

745 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

746 
f£eko64
);

747 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

749 
	#f£eko
 
f£eko64


	)

750 
	#·ñlo
 
·ñlo64


	)

755 #i‚de‡
__USE_FILE_OFFSET64


760 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

765 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

767 #ifde‡
__REDIRECT


768 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

769 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

770 
	`__REDIRECT
 (
f£ços
,

771 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

773 
	#fgëpos
 
fgëpos64


	)

774 
	#f£ços
 
f£ços64


	)

778 #ifde‡
__USE_LARGEFILE64


779 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

780 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

781 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

782 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

786 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

788 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

790 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

792 #ifde‡
__USE_MISC


794 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

795 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

796 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

804 
	`≥º‹
 (c⁄° *
__s
);

807 #ifdef 
__USE_POSIX


809 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

812 #ifde‡
__USE_MISC


814 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

818 #ifde‡
__USE_POSIX2


823 
	`p˛o£
 (
FILE
 *
__°ªam
);

829 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
)

830 
__©åibuã_mÆloc__
 
	$__©å_dóŒoc
 (
p˛o£
, 1Ë
__wur
;

835 #ifdef 
__USE_POSIX


837 *
	$˘îmid
 (*
__s
Ë
__THROW


838 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

842 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


844 *
	$cu£rid
 (*
__s
)

845 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

849 #ifdef 
__USE_GNU


850 
ob°ack
;

853 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

854 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

855 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

856 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

857 c⁄° *
__ª°ri˘
 
__f‹m©
,

858 
__gnuc_va_li°
 
__¨gs
)

859 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

863 #ifde‡
__USE_POSIX199506


867 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

871 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

874 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

877 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


880 
	~<bôs/gë›t_posix.h
>

885 
	`__uÊow
 (
FILE
 *);

886 
	`__ovîÊow
 (
FILE
 *, );

888 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


890 
	~<bôs/°dio2-de˛.h
>

895 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

896 
	~<bôs/°dio-ldbl.h
>

901 #ifde‡
__USE_EXTERN_INLINES


902 
	~<bôs/°dio.h
>

904 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


906 
	~<bôs/°dio2.h
>

909 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 
	#_STDLIB_H
 1

	)

38 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


40 
	~<bôs/waôÊags.h
>

41 
	~<bôs/waô°©us.h
>

44 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

45 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

46 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

47 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

48 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

49 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

50 #ifde‡
__WIFCONTINUED


51 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

56 
	~<bôs/Êﬂä.h
>

61 
	mquŸ
;

62 
	mªm
;

63 } 
	tdiv_t
;

66 #i‚de‡
__ldiv_t_deföed


69 
	mquŸ
;

70 
	mªm
;

71 } 
	tldiv_t
;

72 
	#__ldiv_t_deföed
 1

	)

75 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


77 
__exãnsi⁄__
 struct

79 
	mquŸ
;

80 
	mªm
;

81 } 
	tŒdiv_t
;

82 
	#__Œdiv_t_deföed
 1

	)

87 
	#RAND_MAX
 2147483647

	)

92 
	#EXIT_FAILURE
 1

	)

93 
	#EXIT_SUCCESS
 0

	)

97 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

98 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

102 
	$©of
 (c⁄° *
__≈å
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

105 
	$©oi
 (c⁄° *
__≈å
)

106 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

108 
	$©ﬁ
 (c⁄° *
__≈å
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

111 #ifde‡
__USE_ISOC99


113 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

114 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

118 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

119 **
__ª°ri˘
 
__íd±r
)

120 
__THROW
 
	`__n⁄nuŒ
 ((1));

122 #ifdef 
__USE_ISOC99


124 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

125 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

127 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

128 **
__ª°ri˘
 
__íd±r
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1));

134 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

135 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

136 **
__ª°ri˘
 
__íd±r
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1));

140 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

141 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

142 **
__ª°ri˘
 
__íd±r
)

143 
__THROW
 
	`__n⁄nuŒ
 ((1));

146 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

147 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

148 **
__ª°ri˘
 
__íd±r
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1));

152 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

153 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

154 **
__ª°ri˘
 
__íd±r
)

155 
__THROW
 
	`__n⁄nuŒ
 ((1));

158 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

159 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

160 **
__ª°ri˘
 
__íd±r
)

161 
__THROW
 
	`__n⁄nuŒ
 ((1));

164 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

165 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1));

170 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

171 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

172 **
__ª°ri˘
 
__íd±r
)

173 
__THROW
 
	`__n⁄nuŒ
 ((1));

177 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

178 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

179 
__THROW
 
	`__n⁄nuŒ
 ((1));

181 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

182 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

183 
__THROW
 
	`__n⁄nuŒ
 ((1));

185 #ifde‡
__USE_MISC


187 
__exãnsi⁄__


188 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1));

192 
__exãnsi⁄__


193 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

194 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

195 
__THROW
 
	`__n⁄nuŒ
 ((1));

198 #ifde‡
__USE_ISOC99


200 
__exãnsi⁄__


201 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 
__exãnsi⁄__


206 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

207 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

208 
__THROW
 
	`__n⁄nuŒ
 ((1));

212 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

213 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

214 
__f
)

215 
__THROW
 
	`__n⁄nuŒ
 ((3));

217 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

218 
__f
)

219 
__THROW
 
	`__n⁄nuŒ
 ((3));

221 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

222 
__f
)

223 
__THROW
 
	`__n⁄nuŒ
 ((3));

226 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

227 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

228 
_Flﬂt16
 
__f
)

229 
__THROW
 
	`__n⁄nuŒ
 ((3));

232 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

233 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

234 
_Flﬂt32
 
__f
)

235 
__THROW
 
	`__n⁄nuŒ
 ((3));

238 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

239 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

240 
_Flﬂt64
 
__f
)

241 
__THROW
 
	`__n⁄nuŒ
 ((3));

244 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

245 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

246 
_Flﬂt128
 
__f
)

247 
__THROW
 
	`__n⁄nuŒ
 ((3));

250 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

251 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

252 
_Flﬂt32x
 
__f
)

253 
__THROW
 
	`__n⁄nuŒ
 ((3));

256 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

257 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

258 
_Flﬂt64x
 
__f
)

259 
__THROW
 
	`__n⁄nuŒ
 ((3));

262 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

263 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

264 
_Flﬂt128x
 
__f
)

265 
__THROW
 
	`__n⁄nuŒ
 ((3));

269 #ifde‡
__USE_GNU


273 
	~<bôs/ty≥s/loˇÀ_t.h
>

275 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

276 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

277 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

279 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

280 **
__ª°ri˘
 
__íd±r
,

281 
__ba£
, 
loˇÀ_t
 
__loc
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

284 
__exãnsi⁄__


285 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

286 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

287 
loˇÀ_t
 
__loc
)

288 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

290 
__exãnsi⁄__


291 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

292 **
__ª°ri˘
 
__íd±r
,

293 
__ba£
, 
loˇÀ_t
 
__loc
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

296 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

297 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

300 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

301 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

304 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

305 **
__ª°ri˘
 
__íd±r
,

306 
loˇÀ_t
 
__loc
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

309 #i‡
__HAVE_FLOAT16


310 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

311 **
__ª°ri˘
 
__íd±r
,

312 
loˇÀ_t
 
__loc
)

313 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

316 #i‡
__HAVE_FLOAT32


317 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

318 **
__ª°ri˘
 
__íd±r
,

319 
loˇÀ_t
 
__loc
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

323 #i‡
__HAVE_FLOAT64


324 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

325 **
__ª°ri˘
 
__íd±r
,

326 
loˇÀ_t
 
__loc
)

327 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

330 #i‡
__HAVE_FLOAT128


331 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

332 **
__ª°ri˘
 
__íd±r
,

333 
loˇÀ_t
 
__loc
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

337 #i‡
__HAVE_FLOAT32X


338 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

339 **
__ª°ri˘
 
__íd±r
,

340 
loˇÀ_t
 
__loc
)

341 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

344 #i‡
__HAVE_FLOAT64X


345 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

346 **
__ª°ri˘
 
__íd±r
,

347 
loˇÀ_t
 
__loc
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

351 #i‡
__HAVE_FLOAT128X


352 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

353 **
__ª°ri˘
 
__íd±r
,

354 
loˇÀ_t
 
__loc
)

355 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

360 #ifde‡
__USE_EXTERN_INLINES


361 
__exã∫_ölöe
 

362 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

364  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

365 
	}
}

366 
__exã∫_ölöe
 

367 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

369  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

370 
	}
}

372 #ifde‡
__USE_ISOC99


373 
__exãnsi⁄__
 
__exã∫_ölöe
 

374 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

376  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

377 
	}
}

382 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


386 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

389 
	$a64l
 (c⁄° *
__s
)

390 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

394 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


395 
	~<sys/ty≥s.h
>

402 
	$øndom
 (Ë
__THROW
;

405 
	$§™dom
 (
__£ed
Ë
__THROW
;

411 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

412 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

416 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

419 #ifde‡
__USE_MISC


424 
	søndom_d©a


426 
öt32_t
 *
Âå
;

427 
öt32_t
 *
Ωå
;

428 
öt32_t
 *
°©e
;

429 
ønd_ty≥
;

430 
ønd_deg
;

431 
ønd_£p
;

432 
öt32_t
 *
íd_±r
;

435 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

436 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

441 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

442 
size_t
 
__°©ñí
,

443 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

444 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

446 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

447 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

448 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$ønd
 (Ë
__THROW
;

456 
	$§™d
 (
__£ed
Ë
__THROW
;

458 #ifde‡
__USE_POSIX199506


460 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

464 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


468 
	$dønd48
 (Ë
__THROW
;

469 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

472 
	$Ã™d48
 (Ë
__THROW
;

473 
	$ƒ™d48
 (
__xsubi
[3])

474 
__THROW
 
	`__n⁄nuŒ
 ((1));

477 
	$mønd48
 (Ë
__THROW
;

478 
	$jønd48
 (
__xsubi
[3])

479 
__THROW
 
	`__n⁄nuŒ
 ((1));

482 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

483 *
	$£ed48
 (
__£ed16v
[3])

484 
__THROW
 
	`__n⁄nuŒ
 ((1));

485 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

487 #ifde‡
__USE_MISC


491 
	sdønd48_d©a


493 
__x
[3];

494 
__ﬁd_x
[3];

495 
__c
;

496 
__öô
;

497 
__exãnsi⁄__
 
__a
;

502 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

503 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

504 
	$î™d48_r
 (
__xsubi
[3],

505 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

506 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

509 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

510 *
__ª°ri˘
 
__ªsu…
)

511 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

512 
	$ƒ™d48_r
 (
__xsubi
[3],

513 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

514 *
__ª°ri˘
 
__ªsu…
)

515 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

518 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

519 *
__ª°ri˘
 
__ªsu…
)

520 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

521 
	$jønd48_r
 (
__xsubi
[3],

522 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

523 *
__ª°ri˘
 
__ªsu…
)

524 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

527 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

528 
__THROW
 
	`__n⁄nuŒ
 ((2));

530 
	$£ed48_r
 (
__£ed16v
[3],

531 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$lc⁄g48_r
 (
__∑øm
[7],

534 
dønd48_d©a
 *
__buf„r
)

535 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

538 
__uöt32_t
 
	$¨c4øndom
 ()

539 
__THROW
 
__wur
;

542 
	$¨c4øndom_buf
 (*
__buf
, 
size_t
 
__size
)

543 
__THROW
 
	`__n⁄nuŒ
 ((1));

547 
__uöt32_t
 
	$¨c4øndom_unif‹m
 (
__uöt32_t
 
__uµî_bound
)

548 
__THROW
 
__wur
;

553 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


554 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

556 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

557 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((1, 2)Ë
__wur
;

564 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

565 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2));

568 
	$‰ì
 (*
__±r
Ë
__THROW
;

570 #ifde‡
__USE_MISC


576 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

577 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__


578 
	`__©åibuã_Æloc_size__
 ((2, 3))

579 
__©å_dóŒoc_‰ì
;

582 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

583 
__THROW
 
	`__©å_dóŒoc
 (
ªÆloˇºay
, 1);

586 #ifde‡
__USE_MISC


587 
	~<Æloˇ.h
>

590 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

591 || 
deföed
 
__USE_MISC


593 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


594 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

597 #ifde‡
__USE_XOPEN2K


599 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

600 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

603 #ifde‡
__USE_ISOC11


605 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

606 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_Æign__
 ((1))

607 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

611 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

615 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

617 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


619 #ifde‡
__˝lu•lus


620 "C++" 
	$©_quick_exô
 ((*
__func
) ())

621 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

623 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

627 #ifdef 
__USE_MISC


630 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

631 
__THROW
 
	`__n⁄nuŒ
 ((1));

637 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

639 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


643 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

646 #ifde‡
__USE_ISOC99


649 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

654 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_GNU


659 *
	$£cuª_gëív
 (c⁄° *
__«me
)

660 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

663 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


667 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

670 #ifde‡
__USE_XOPEN2K


673 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

674 
__THROW
 
	`__n⁄nuŒ
 ((2));

677 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

680 #ifdef 
__USE_MISC


684 
	$˛óªnv
 (Ë
__THROW
;

688 #i‡
deföed
 
__USE_MISC
 \

689 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

695 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

698 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


707 #i‚de‡
__USE_FILE_OFFSET64


708 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

710 #ifde‡
__REDIRECT


711 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

712 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

714 
	#mk°emp
 
mk°emp64


	)

717 #ifde‡
__USE_LARGEFILE64


718 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

722 #ifde‡
__USE_MISC


729 #i‚de‡
__USE_FILE_OFFSET64


730 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

732 #ifde‡
__REDIRECT


733 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

734 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

736 
	#mk°emps
 
mk°emps64


	)

739 #ifde‡
__USE_LARGEFILE64


740 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

741 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

745 #ifde‡
__USE_XOPEN2K8


751 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

754 #ifde‡
__USE_GNU


761 #i‚de‡
__USE_FILE_OFFSET64


762 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

764 #ifde‡
__REDIRECT


765 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

766 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

768 
	#mko°emp
 
mko°emp64


	)

771 #ifde‡
__USE_LARGEFILE64


772 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

781 #i‚de‡
__USE_FILE_OFFSET64


782 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

783 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

785 #ifde‡
__REDIRECT


786 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

787 
__Êags
), 
mko°emps64
)

788 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

790 
	#mko°emps
 
mko°emps64


	)

793 #ifde‡
__USE_LARGEFILE64


794 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

795 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

804 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

807 #ifdef 
__USE_GNU


810 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_mÆloc__


812 
__©å_dóŒoc_‰ì
 
__wur
;

815 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


821 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

822 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

827 #i‚de‡
__COMPAR_FN_T


828 
	#__COMPAR_FN_T


	)

829 (*
	t__com∑r_‚_t
) (const *, const *);

831 #ifdef 
__USE_GNU


832 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

835 #ifde‡
__USE_GNU


836 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

841 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

842 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

843 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

845 #ifde‡
__USE_EXTERN_INLINES


846 
	~<bôs/°dlib-b£¨ch.h
>

851 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

852 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

853 #ifde‡
__USE_GNU


854 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

855 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

856 
	`__n⁄nuŒ
 ((1, 4));

861 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

862 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

864 #ifde‡
__USE_ISOC99


865 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

866 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

873 
div_t
 
	$div
 (
__numî
, 
__díom
)

874 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

875 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

876 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

878 #ifde‡
__USE_ISOC99


879 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

880 
__díom
)

881 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

885 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

886 || 
deföed
 
__USE_MISC


893 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

894 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

899 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

900 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

905 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

906 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

909 #ifde‡
__USE_MISC


911 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

912 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

913 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

914 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

915 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

916 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

917 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

918 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

923 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

924 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

925 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

926 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

927 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

928 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

930 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

931 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

932 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

933 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

934 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

935 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

936 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

937 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

943 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

946 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

947 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

950 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

954 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

955 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW


956 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2));

958 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

959 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

960 
__THROW


961 
	$__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 3)

962 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2));

964 #ifde‡
__USE_MISC


969 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

973 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


980 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

981 *c⁄° *
__ª°ri˘
 
__tokís
,

982 **
__ª°ri˘
 
__vÆuï
)

983 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

989 #ifde‡
__USE_XOPEN2KXSI


991 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

994 #ifde‡
__USE_XOPEN_EXTENDED


999 
	$gø¡±
 (
__fd
Ë
__THROW
;

1003 
	$u∆ock±
 (
__fd
Ë
__THROW
;

1008 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

1011 #ifde‡
__USE_GNU


1015 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

1016 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

1019 
	`gë±
 ();

1022 #ifde‡
__USE_MISC


1026 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1027 
__THROW
 
	`__n⁄nuŒ
 ((1));

1030 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1033 
	$ây¶Ÿ
 (Ë
__THROW
;

1036 
	~<bôs/°dlib-Êﬂt.h
>

1039 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1040 
	~<bôs/°dlib.h
>

1043 
	~<bôs/Êﬂä.h
>

1044 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

1045 
	~<bôs/°dlib-ldbl.h
>

1048 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

126 #unde‡
__USE_ISOC11


127 #unde‡
__USE_ISOC99


128 #unde‡
__USE_ISOC95


129 #unde‡
__USE_ISOCXX11


130 #unde‡
__USE_POSIX


131 #unde‡
__USE_POSIX2


132 #unde‡
__USE_POSIX199309


133 #unde‡
__USE_POSIX199506


134 #unde‡
__USE_XOPEN


135 #unde‡
__USE_XOPEN_EXTENDED


136 #unde‡
__USE_UNIX98


137 #unde‡
__USE_XOPEN2K


138 #unde‡
__USE_XOPEN2KXSI


139 #unde‡
__USE_XOPEN2K8


140 #unde‡
__USE_XOPEN2K8XSI


141 #unde‡
__USE_LARGEFILE


142 #unde‡
__USE_LARGEFILE64


143 #unde‡
__USE_FILE_OFFSET64


144 #unde‡
__USE_MISC


145 #unde‡
__USE_ATFILE


146 #unde‡
__USE_DYNAMIC_STACK_SIZE


147 #unde‡
__USE_GNU


148 #unde‡
__USE_FORTIFY_LEVEL


149 #unde‡
__KERNEL_STRICT_NAMES


150 #unde‡
__GLIBC_USE_ISOC2X


151 #unde‡
__GLIBC_USE_DEPRECATED_GETS


152 #unde‡
__GLIBC_USE_DEPRECATED_SCANF


156 #i‚de‡
_LOOSE_KERNEL_NAMES


157 
	#__KERNEL_STRICT_NAMES


	)

167 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


168 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

169 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

171 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

178 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


179 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

180 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

182 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

186 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

192 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

193 && !
deföed
 
	g_DEFAULT_SOURCE


195 #unde‡
_DEFAULT_SOURCE


196 
	#_DEFAULT_SOURCE
 1

	)

200 #ifde‡
_GNU_SOURCE


201 #unde‡
_ISOC95_SOURCE


202 
	#_ISOC95_SOURCE
 1

	)

203 #unde‡
_ISOC99_SOURCE


204 
	#_ISOC99_SOURCE
 1

	)

205 #unde‡
_ISOC11_SOURCE


206 
	#_ISOC11_SOURCE
 1

	)

207 #unde‡
_ISOC2X_SOURCE


208 
	#_ISOC2X_SOURCE
 1

	)

209 #unde‡
_POSIX_SOURCE


210 
	#_POSIX_SOURCE
 1

	)

211 #unde‡
_POSIX_C_SOURCE


212 
	#_POSIX_C_SOURCE
 200809L

	)

213 #unde‡
_XOPEN_SOURCE


214 
	#_XOPEN_SOURCE
 700

	)

215 #unde‡
_XOPEN_SOURCE_EXTENDED


216 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

217 #unde‡
_LARGEFILE64_SOURCE


218 
	#_LARGEFILE64_SOURCE
 1

	)

219 #unde‡
_DEFAULT_SOURCE


220 
	#_DEFAULT_SOURCE
 1

	)

221 #unde‡
_ATFILE_SOURCE


222 
	#_ATFILE_SOURCE
 1

	)

223 #unde‡
_DYNAMIC_STACK_SIZE_SOURCE


224 
	#_DYNAMIC_STACK_SIZE_SOURCE
 1

	)

229 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

230 || (!
deföed
 
	g__STRICT_ANSI__
 \

231 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

232 && !
deföed
 
	g_ISOC2X_SOURCE
 \

233 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

234 && !
deföed
 
	g_XOPEN_SOURCE
))

235 #unde‡
_DEFAULT_SOURCE


236 
	#_DEFAULT_SOURCE
 1

	)

240 #i‡(
deföed
 
_ISOC2X_SOURCE
 \

241 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 201710L))

242 
	#__GLIBC_USE_ISOC2X
 1

	)

244 
	#__GLIBC_USE_ISOC2X
 0

	)

248 #i‡(
deföed
 
_ISOC11_SOURCE
 || deföed 
_ISOC2X_SOURCE
 \

249 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

250 
	#__USE_ISOC11
 1

	)

254 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

255 || 
deföed
 
_ISOC2X_SOURCE
 \

256 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

257 
	#__USE_ISOC99
 1

	)

261 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

262 || 
deföed
 
_ISOC2X_SOURCE
 \

263 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

264 
	#__USE_ISOC95
 1

	)

267 #ifde‡
__˝lu•lus


269 #i‡
__˝lu•lus
 >= 201703L

270 
	#__USE_ISOC11
 1

	)

274 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


275 
	#__USE_ISOCXX11
 1

	)

276 
	#__USE_ISOC99
 1

	)

283 #ifde‡
_DEFAULT_SOURCE


284 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


285 
	#__USE_POSIX_IMPLICITLY
 1

	)

287 #unde‡
_POSIX_SOURCE


288 
	#_POSIX_SOURCE
 1

	)

289 #unde‡
_POSIX_C_SOURCE


290 
	#_POSIX_C_SOURCE
 200809L

	)

293 #i‡((!
deföed
 
__STRICT_ANSI__
 \

294 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

295 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

296 
	#_POSIX_SOURCE
 1

	)

297 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

298 
	#_POSIX_C_SOURCE
 2

	)

299 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

300 
	#_POSIX_C_SOURCE
 199506L

	)

301 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

302 
	#_POSIX_C_SOURCE
 200112L

	)

304 
	#_POSIX_C_SOURCE
 200809L

	)

306 
	#__USE_POSIX_IMPLICITLY
 1

	)

315 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

316 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

317 
	#_POSIX_SOURCE
 1

	)

318 #unde‡
_POSIX_C_SOURCE


319 
	#_POSIX_C_SOURCE
 199506L

	)

322 #i‡(
deföed
 
_POSIX_SOURCE
 \

323 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

324 || 
deföed
 
_XOPEN_SOURCE
)

325 
	#__USE_POSIX
 1

	)

328 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


329 
	#__USE_POSIX2
 1

	)

332 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

333 
	#__USE_POSIX199309
 1

	)

336 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

337 
	#__USE_POSIX199506
 1

	)

340 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

341 
	#__USE_XOPEN2K
 1

	)

342 #unde‡
__USE_ISOC95


343 
	#__USE_ISOC95
 1

	)

344 #unde‡
__USE_ISOC99


345 
	#__USE_ISOC99
 1

	)

348 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

349 
	#__USE_XOPEN2K8
 1

	)

350 #unde‡
_ATFILE_SOURCE


351 
	#_ATFILE_SOURCE
 1

	)

354 #ifdef 
_XOPEN_SOURCE


355 
	#__USE_XOPEN
 1

	)

356 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

357 
	#__USE_XOPEN_EXTENDED
 1

	)

358 
	#__USE_UNIX98
 1

	)

359 #unde‡
_LARGEFILE_SOURCE


360 
	#_LARGEFILE_SOURCE
 1

	)

361 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

362 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

363 
	#__USE_XOPEN2K8
 1

	)

364 
	#__USE_XOPEN2K8XSI
 1

	)

366 
	#__USE_XOPEN2K
 1

	)

367 
	#__USE_XOPEN2KXSI
 1

	)

368 #unde‡
__USE_ISOC95


369 
	#__USE_ISOC95
 1

	)

370 #unde‡
__USE_ISOC99


371 
	#__USE_ISOC99
 1

	)

374 #ifde‡
_XOPEN_SOURCE_EXTENDED


375 
	#__USE_XOPEN_EXTENDED
 1

	)

380 #ifde‡
_LARGEFILE_SOURCE


381 
	#__USE_LARGEFILE
 1

	)

384 #ifde‡
_LARGEFILE64_SOURCE


385 
	#__USE_LARGEFILE64
 1

	)

388 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

389 
	#__USE_FILE_OFFSET64
 1

	)

392 
	~<„©uªs-time64.h
>

394 #i‡
deföed
 
_DEFAULT_SOURCE


395 
	#__USE_MISC
 1

	)

398 #ifdef 
_ATFILE_SOURCE


399 
	#__USE_ATFILE
 1

	)

402 #ifdef 
_DYNAMIC_STACK_SIZE_SOURCE


403 
	#__USE_DYNAMIC_STACK_SIZE
 1

	)

406 #ifdef 
_GNU_SOURCE


407 
	#__USE_GNU
 1

	)

410 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

411 && 
deföed
 
__OPTIMIZE__
 && __OPTIMIZE__ > 0

412 #i‡!
__GNUC_PREREQ
 (4, 1)

413 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


414 #ñi‡
_FORTIFY_SOURCE
 > 2 && (
__glibc_˛™g_¥îeq
 (9, 0) \

415 || 
	$__GNUC_PREREQ
 (12, 0))

417 #i‡
_FORTIFY_SOURCE
 > 3

418 #w¨nög 
_FORTIFY_SOURCE
 > 3 
is
 
åóãd
 
like
 3 
⁄
 
this
 
∂©f‹m


420 
	#__USE_FORTIFY_LEVEL
 3

	)

421 #ñi‡
_FORTIFY_SOURCE
 > 1

422 #i‡
_FORTIFY_SOURCE
 > 2

423 #w¨nög 
_FORTIFY_SOURCE
 > 2 
is
 
åóãd
 
like
 2 
⁄
 
this
 
∂©f‹m


425 
	#__USE_FORTIFY_LEVEL
 2

	)

427 
	#__USE_FORTIFY_LEVEL
 1

	)

430 #i‚de‡
__USE_FORTIFY_LEVEL


431 
	#__USE_FORTIFY_LEVEL
 0

	)

438 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


439 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

441 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

456 #i‡(
deföed
 
__USE_GNU
 \

457 && (
deföed
 
__˝lu•lus
 \

458 ? (
__˝lu•lus
 < 201103L && !
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
) \

459 : (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

460 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

462 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

467 
	~<°dc-¥edef.h
>

475 #unde‡
__GNU_LIBRARY__


476 
	#__GNU_LIBRARY__
 6

	)

480 
	#__GLIBC__
 2

	)

481 
	#__GLIBC_MINOR__
 36

	)

483 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

484 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

487 #i‚de‡
__ASSEMBLER__


488 #i‚de‡
_SYS_CDEFS_H


489 
	~<sys/cdefs.h
>

494 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


495 
	#__USE_LARGEFILE
 1

	)

496 
	#__USE_LARGEFILE64
 1

	)

502 #i‡
	`__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

503 && !
deföed
 
__OPTIMIZE_SIZE__
 && !deföed 
__NO_INLINE__
 \

504 && 
deföed
 
__exã∫_ölöe


505 
	#__USE_EXTERN_INLINES
 1

	)

513 
	~<gnu/°ubs.h
>

	@/usr/include/features-time64.h

20 
	~<bôs/w‹dsize.h
>

21 
	~<bôs/timesize.h
>

23 #i‡
deföed
 
_TIME_BITS


24 #i‡
_TIME_BITS
 == 64

25 #i‡! 
deföed
 (
_FILE_OFFSET_BITS
) || _FILE_OFFSET_BITS != 64

27 #ñi‡
__TIMESIZE
 == 32

28 
	#__USE_TIME_BITS64
 1

	)

30 #ñi‡
_TIME_BITS
 == 32

31 #i‡
__TIMESIZE
 > 32

35 #îr‹ 
InvÆid
 
_TIME_BITS
 
vÆue
 (
ˇn
 
⁄ly
 
be
 32 
‹
 64-
bô
)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

39 
	#__STDC_IEC_60559_BFP__
 201404L

	)

42 
	#__STDC_IEC_559__
 1

	)

43 
	#__STDC_IEC_60559_BFP__
 201404L

	)

46 #ifde‡
__GCC_IEC_559_COMPLEX


47 #i‡
__GCC_IEC_559_COMPLEX
 > 0

48 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_60559_COMPLEX__
 201404L

	)

52 
	#__STDC_IEC_559_COMPLEX__
 1

	)

53 
	#__STDC_IEC_60559_COMPLEX__
 201404L

	)

62 
	#__STDC_ISO_10646__
 201706L

	)

	@
1
.
1
/usr/include
30
560
eals_signal/src/main.c
eals_signal/src/ws2812b.c
eals_signal/src/ws2812b.h
inc/Common.h
inc/Delay.h
inc/Function_define.h
inc/N76E003.h
inc/SFR_Macro.h
inc/eeprom_iap.h
inc/linefi_packet.h
inc/uart.h
lib/Common.c
lib/Delay.c
lib/eeprom_iap.c
lib/linefi_packet.c
lib/uart.c
master/src/main.c
master/src/main.h
pump/src/main.c
pump/src/main.h
slave/src/main.c
slave/src/main.h
sniffer/src/main.c
sniffer/src/main.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/alloca.h
/usr/include/features.h
/usr/include/features-time64.h
/usr/include/stdc-predef.h
