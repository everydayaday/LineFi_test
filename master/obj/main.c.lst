                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _state_switches_PARM_2
                                     12 	.globl _main
                                     13 	.globl _act_by_one_key
                                     14 	.globl _print_help
                                     15 	.globl _printoutbuf
                                     16 	.globl _state_switches
                                     17 	.globl _gpio_setup
                                     18 	.globl _disp_help
                                     19 	.globl _MODIFY_HIRC_166
                                     20 	.globl _conv_manchester2highnibble
                                     21 	.globl _conv_manchester2nibble
                                     22 	.globl _chk_manchester
                                     23 	.globl _pin_interrupt_isr
                                     24 	.globl _Timer0_ISR
                                     25 	.globl _state_machine
                                     26 	.globl _print_char
                                     27 	.globl _print_esc
                                     28 	.globl _print_linefipacket
                                     29 	.globl _send_linefi_packet
                                     30 	.globl _send_octet_to_linefi
                                     31 	.globl _uart_setup
                                     32 	.globl _Receive_Data_From_UART0_nb
                                     33 	.globl _InitialUART1_Timer3
                                     34 	.globl _printf_fast_f
                                     35 	.globl _printf
                                     36 	.globl _MOSI
                                     37 	.globl _P00
                                     38 	.globl _MISO
                                     39 	.globl _P01
                                     40 	.globl _RXD_1
                                     41 	.globl _P02
                                     42 	.globl _P03
                                     43 	.globl _STADC
                                     44 	.globl _P04
                                     45 	.globl _P05
                                     46 	.globl _TXD
                                     47 	.globl _P06
                                     48 	.globl _RXD
                                     49 	.globl _P07
                                     50 	.globl _IT0
                                     51 	.globl _IE0
                                     52 	.globl _IT1
                                     53 	.globl _IE1
                                     54 	.globl _TR0
                                     55 	.globl _TF0
                                     56 	.globl _TR1
                                     57 	.globl _TF1
                                     58 	.globl _P10
                                     59 	.globl _P11
                                     60 	.globl _P12
                                     61 	.globl _SCL
                                     62 	.globl _P13
                                     63 	.globl _SDA
                                     64 	.globl _P14
                                     65 	.globl _P15
                                     66 	.globl _TXD_1
                                     67 	.globl _P16
                                     68 	.globl _P17
                                     69 	.globl _RI
                                     70 	.globl _TI
                                     71 	.globl _RB8
                                     72 	.globl _TB8
                                     73 	.globl _REN
                                     74 	.globl _SM2
                                     75 	.globl _SM1
                                     76 	.globl _FE
                                     77 	.globl _SM0
                                     78 	.globl _P20
                                     79 	.globl _EX0
                                     80 	.globl _ET0
                                     81 	.globl _EX1
                                     82 	.globl _ET1
                                     83 	.globl _ES
                                     84 	.globl _EBOD
                                     85 	.globl _EADC
                                     86 	.globl _EA
                                     87 	.globl _P30
                                     88 	.globl _PX0
                                     89 	.globl _PT0
                                     90 	.globl _PX1
                                     91 	.globl _PT1
                                     92 	.globl _PS
                                     93 	.globl _PBOD
                                     94 	.globl _PADC
                                     95 	.globl _I2CPX
                                     96 	.globl _AA
                                     97 	.globl _SI
                                     98 	.globl _STO
                                     99 	.globl _STA
                                    100 	.globl _I2CEN
                                    101 	.globl _CM_RL2
                                    102 	.globl _TR2
                                    103 	.globl _TF2
                                    104 	.globl _P
                                    105 	.globl _OV
                                    106 	.globl _RS0
                                    107 	.globl _RS1
                                    108 	.globl _F0
                                    109 	.globl _AC
                                    110 	.globl _CY
                                    111 	.globl _CLRPWM
                                    112 	.globl _PWMF
                                    113 	.globl _LOAD
                                    114 	.globl _PWMRUN
                                    115 	.globl _ADCHS0
                                    116 	.globl _ADCHS1
                                    117 	.globl _ADCHS2
                                    118 	.globl _ADCHS3
                                    119 	.globl _ETGSEL0
                                    120 	.globl _ETGSEL1
                                    121 	.globl _ADCS
                                    122 	.globl _ADCF
                                    123 	.globl _RI_1
                                    124 	.globl _TI_1
                                    125 	.globl _RB8_1
                                    126 	.globl _TB8_1
                                    127 	.globl _REN_1
                                    128 	.globl _SM2_1
                                    129 	.globl _SM1_1
                                    130 	.globl _FE_1
                                    131 	.globl _SM0_1
                                    132 	.globl _EIPH1
                                    133 	.globl _EIP1
                                    134 	.globl _PMD
                                    135 	.globl _PMEN
                                    136 	.globl _PDTCNT
                                    137 	.globl _PDTEN
                                    138 	.globl _SCON_1
                                    139 	.globl _EIPH
                                    140 	.globl _AINDIDS
                                    141 	.globl _SPDR
                                    142 	.globl _SPSR
                                    143 	.globl _SPCR2
                                    144 	.globl _SPCR
                                    145 	.globl _CAPCON4
                                    146 	.globl _CAPCON3
                                    147 	.globl _B
                                    148 	.globl _EIP
                                    149 	.globl _C2H
                                    150 	.globl _C2L
                                    151 	.globl _PIF
                                    152 	.globl _PIPEN
                                    153 	.globl _PINEN
                                    154 	.globl _PICON
                                    155 	.globl _ADCCON0
                                    156 	.globl _C1H
                                    157 	.globl _C1L
                                    158 	.globl _C0H
                                    159 	.globl _C0L
                                    160 	.globl _ADCDLY
                                    161 	.globl _ADCCON2
                                    162 	.globl _ADCCON1
                                    163 	.globl _ACC
                                    164 	.globl _PWMCON1
                                    165 	.globl _PIOCON0
                                    166 	.globl _PWM3L
                                    167 	.globl _PWM2L
                                    168 	.globl _PWM1L
                                    169 	.globl _PWM0L
                                    170 	.globl _PWMPL
                                    171 	.globl _PWMCON0
                                    172 	.globl _FBD
                                    173 	.globl _PNP
                                    174 	.globl _PWM3H
                                    175 	.globl _PWM2H
                                    176 	.globl _PWM1H
                                    177 	.globl _PWM0H
                                    178 	.globl _PWMPH
                                    179 	.globl _PSW
                                    180 	.globl _ADCMPH
                                    181 	.globl _ADCMPL
                                    182 	.globl _PWM5L
                                    183 	.globl _TH2
                                    184 	.globl _PWM4L
                                    185 	.globl _TL2
                                    186 	.globl _RCMP2H
                                    187 	.globl _RCMP2L
                                    188 	.globl _T2MOD
                                    189 	.globl _T2CON
                                    190 	.globl _TA
                                    191 	.globl _PIOCON1
                                    192 	.globl _RH3
                                    193 	.globl _PWM5H
                                    194 	.globl _RL3
                                    195 	.globl _PWM4H
                                    196 	.globl _T3CON
                                    197 	.globl _ADCRH
                                    198 	.globl _ADCRL
                                    199 	.globl _I2ADDR
                                    200 	.globl _I2CON
                                    201 	.globl _I2TOC
                                    202 	.globl _I2CLK
                                    203 	.globl _I2STAT
                                    204 	.globl _I2DAT
                                    205 	.globl _SADDR_1
                                    206 	.globl _SADEN_1
                                    207 	.globl _SADEN
                                    208 	.globl _IP
                                    209 	.globl _PWMINTC
                                    210 	.globl _IPH
                                    211 	.globl _P2S
                                    212 	.globl _P1SR
                                    213 	.globl _P1M2
                                    214 	.globl _P1S
                                    215 	.globl _P1M1
                                    216 	.globl _P0SR
                                    217 	.globl _P0M2
                                    218 	.globl _P0S
                                    219 	.globl _P0M1
                                    220 	.globl _P3
                                    221 	.globl _IAPCN
                                    222 	.globl _IAPFD
                                    223 	.globl _P3SR
                                    224 	.globl _P3M2
                                    225 	.globl _P3S
                                    226 	.globl _P3M1
                                    227 	.globl _BODCON1
                                    228 	.globl _WDCON
                                    229 	.globl _SADDR
                                    230 	.globl _IE
                                    231 	.globl _IAPAH
                                    232 	.globl _IAPAL
                                    233 	.globl _IAPUEN
                                    234 	.globl _IAPTRG
                                    235 	.globl _BODCON0
                                    236 	.globl _AUXR1
                                    237 	.globl _P2
                                    238 	.globl _CHPCON
                                    239 	.globl _EIE1
                                    240 	.globl _EIE
                                    241 	.globl _SBUF_1
                                    242 	.globl _SBUF
                                    243 	.globl _SCON
                                    244 	.globl _CKEN
                                    245 	.globl _CKSWT
                                    246 	.globl _CKDIV
                                    247 	.globl _CAPCON2
                                    248 	.globl _CAPCON1
                                    249 	.globl _CAPCON0
                                    250 	.globl _SFRS
                                    251 	.globl _P1
                                    252 	.globl _WKCON
                                    253 	.globl _CKCON
                                    254 	.globl _TH1
                                    255 	.globl _TH0
                                    256 	.globl _TL1
                                    257 	.globl _TL0
                                    258 	.globl _TMOD
                                    259 	.globl _TCON
                                    260 	.globl _PCON
                                    261 	.globl _RWK
                                    262 	.globl _RCTRIM1
                                    263 	.globl _RCTRIM0
                                    264 	.globl _DPH
                                    265 	.globl _DPL
                                    266 	.globl _SP
                                    267 	.globl _P0
                                    268 	.globl _gpu32UartSpeed
                                    269 	.globl _gu16TimeCnt
                                    270 	.globl _gpu8Data2
                                    271 	.globl _gpu8Data
                                    272 	.globl _gcUartInputMode
                                    273 	.globl _act_by_one_key_PARM_3
                                    274 	.globl _act_by_one_key_PARM_2
                                    275 	.globl _printoutbuf_PARM_2
                                    276 	.globl _state_machine_PARM_4
                                    277 	.globl _state_machine_PARM_3
                                    278 	.globl _state_machine_PARM_2
                                    279 	.globl _gu8UART
                                    280 	.globl _putchar
                                    281 ;--------------------------------------------------------
                                    282 ; special function registers
                                    283 ;--------------------------------------------------------
                                    284 	.area RSEG    (ABS,DATA)
      000000                        285 	.org 0x0000
                           000080   286 _P0	=	0x0080
                           000081   287 _SP	=	0x0081
                           000082   288 _DPL	=	0x0082
                           000083   289 _DPH	=	0x0083
                           000084   290 _RCTRIM0	=	0x0084
                           000085   291 _RCTRIM1	=	0x0085
                           000086   292 _RWK	=	0x0086
                           000087   293 _PCON	=	0x0087
                           000088   294 _TCON	=	0x0088
                           000089   295 _TMOD	=	0x0089
                           00008A   296 _TL0	=	0x008a
                           00008B   297 _TL1	=	0x008b
                           00008C   298 _TH0	=	0x008c
                           00008D   299 _TH1	=	0x008d
                           00008E   300 _CKCON	=	0x008e
                           00008F   301 _WKCON	=	0x008f
                           000090   302 _P1	=	0x0090
                           000091   303 _SFRS	=	0x0091
                           000092   304 _CAPCON0	=	0x0092
                           000093   305 _CAPCON1	=	0x0093
                           000094   306 _CAPCON2	=	0x0094
                           000095   307 _CKDIV	=	0x0095
                           000096   308 _CKSWT	=	0x0096
                           000097   309 _CKEN	=	0x0097
                           000098   310 _SCON	=	0x0098
                           000099   311 _SBUF	=	0x0099
                           00009A   312 _SBUF_1	=	0x009a
                           00009B   313 _EIE	=	0x009b
                           00009C   314 _EIE1	=	0x009c
                           00009F   315 _CHPCON	=	0x009f
                           0000A0   316 _P2	=	0x00a0
                           0000A2   317 _AUXR1	=	0x00a2
                           0000A3   318 _BODCON0	=	0x00a3
                           0000A4   319 _IAPTRG	=	0x00a4
                           0000A5   320 _IAPUEN	=	0x00a5
                           0000A6   321 _IAPAL	=	0x00a6
                           0000A7   322 _IAPAH	=	0x00a7
                           0000A8   323 _IE	=	0x00a8
                           0000A9   324 _SADDR	=	0x00a9
                           0000AA   325 _WDCON	=	0x00aa
                           0000AB   326 _BODCON1	=	0x00ab
                           0000AC   327 _P3M1	=	0x00ac
                           0000AC   328 _P3S	=	0x00ac
                           0000AD   329 _P3M2	=	0x00ad
                           0000AD   330 _P3SR	=	0x00ad
                           0000AE   331 _IAPFD	=	0x00ae
                           0000AF   332 _IAPCN	=	0x00af
                           0000B0   333 _P3	=	0x00b0
                           0000B1   334 _P0M1	=	0x00b1
                           0000B1   335 _P0S	=	0x00b1
                           0000B2   336 _P0M2	=	0x00b2
                           0000B2   337 _P0SR	=	0x00b2
                           0000B3   338 _P1M1	=	0x00b3
                           0000B3   339 _P1S	=	0x00b3
                           0000B4   340 _P1M2	=	0x00b4
                           0000B4   341 _P1SR	=	0x00b4
                           0000B5   342 _P2S	=	0x00b5
                           0000B7   343 _IPH	=	0x00b7
                           0000B7   344 _PWMINTC	=	0x00b7
                           0000B8   345 _IP	=	0x00b8
                           0000B9   346 _SADEN	=	0x00b9
                           0000BA   347 _SADEN_1	=	0x00ba
                           0000BB   348 _SADDR_1	=	0x00bb
                           0000BC   349 _I2DAT	=	0x00bc
                           0000BD   350 _I2STAT	=	0x00bd
                           0000BE   351 _I2CLK	=	0x00be
                           0000BF   352 _I2TOC	=	0x00bf
                           0000C0   353 _I2CON	=	0x00c0
                           0000C1   354 _I2ADDR	=	0x00c1
                           0000C2   355 _ADCRL	=	0x00c2
                           0000C3   356 _ADCRH	=	0x00c3
                           0000C4   357 _T3CON	=	0x00c4
                           0000C4   358 _PWM4H	=	0x00c4
                           0000C5   359 _RL3	=	0x00c5
                           0000C5   360 _PWM5H	=	0x00c5
                           0000C6   361 _RH3	=	0x00c6
                           0000C6   362 _PIOCON1	=	0x00c6
                           0000C7   363 _TA	=	0x00c7
                           0000C8   364 _T2CON	=	0x00c8
                           0000C9   365 _T2MOD	=	0x00c9
                           0000CA   366 _RCMP2L	=	0x00ca
                           0000CB   367 _RCMP2H	=	0x00cb
                           0000CC   368 _TL2	=	0x00cc
                           0000CC   369 _PWM4L	=	0x00cc
                           0000CD   370 _TH2	=	0x00cd
                           0000CD   371 _PWM5L	=	0x00cd
                           0000CE   372 _ADCMPL	=	0x00ce
                           0000CF   373 _ADCMPH	=	0x00cf
                           0000D0   374 _PSW	=	0x00d0
                           0000D1   375 _PWMPH	=	0x00d1
                           0000D2   376 _PWM0H	=	0x00d2
                           0000D3   377 _PWM1H	=	0x00d3
                           0000D4   378 _PWM2H	=	0x00d4
                           0000D5   379 _PWM3H	=	0x00d5
                           0000D6   380 _PNP	=	0x00d6
                           0000D7   381 _FBD	=	0x00d7
                           0000D8   382 _PWMCON0	=	0x00d8
                           0000D9   383 _PWMPL	=	0x00d9
                           0000DA   384 _PWM0L	=	0x00da
                           0000DB   385 _PWM1L	=	0x00db
                           0000DC   386 _PWM2L	=	0x00dc
                           0000DD   387 _PWM3L	=	0x00dd
                           0000DE   388 _PIOCON0	=	0x00de
                           0000DF   389 _PWMCON1	=	0x00df
                           0000E0   390 _ACC	=	0x00e0
                           0000E1   391 _ADCCON1	=	0x00e1
                           0000E2   392 _ADCCON2	=	0x00e2
                           0000E3   393 _ADCDLY	=	0x00e3
                           0000E4   394 _C0L	=	0x00e4
                           0000E5   395 _C0H	=	0x00e5
                           0000E6   396 _C1L	=	0x00e6
                           0000E7   397 _C1H	=	0x00e7
                           0000E8   398 _ADCCON0	=	0x00e8
                           0000E9   399 _PICON	=	0x00e9
                           0000EA   400 _PINEN	=	0x00ea
                           0000EB   401 _PIPEN	=	0x00eb
                           0000EC   402 _PIF	=	0x00ec
                           0000ED   403 _C2L	=	0x00ed
                           0000EE   404 _C2H	=	0x00ee
                           0000EF   405 _EIP	=	0x00ef
                           0000F0   406 _B	=	0x00f0
                           0000F1   407 _CAPCON3	=	0x00f1
                           0000F2   408 _CAPCON4	=	0x00f2
                           0000F3   409 _SPCR	=	0x00f3
                           0000F3   410 _SPCR2	=	0x00f3
                           0000F4   411 _SPSR	=	0x00f4
                           0000F5   412 _SPDR	=	0x00f5
                           0000F6   413 _AINDIDS	=	0x00f6
                           0000F7   414 _EIPH	=	0x00f7
                           0000F8   415 _SCON_1	=	0x00f8
                           0000F9   416 _PDTEN	=	0x00f9
                           0000FA   417 _PDTCNT	=	0x00fa
                           0000FB   418 _PMEN	=	0x00fb
                           0000FC   419 _PMD	=	0x00fc
                           0000FE   420 _EIP1	=	0x00fe
                           0000FF   421 _EIPH1	=	0x00ff
                                    422 ;--------------------------------------------------------
                                    423 ; special function bits
                                    424 ;--------------------------------------------------------
                                    425 	.area RSEG    (ABS,DATA)
      000000                        426 	.org 0x0000
                           0000FF   427 _SM0_1	=	0x00ff
                           0000FF   428 _FE_1	=	0x00ff
                           0000FE   429 _SM1_1	=	0x00fe
                           0000FD   430 _SM2_1	=	0x00fd
                           0000FC   431 _REN_1	=	0x00fc
                           0000FB   432 _TB8_1	=	0x00fb
                           0000FA   433 _RB8_1	=	0x00fa
                           0000F9   434 _TI_1	=	0x00f9
                           0000F8   435 _RI_1	=	0x00f8
                           0000EF   436 _ADCF	=	0x00ef
                           0000EE   437 _ADCS	=	0x00ee
                           0000ED   438 _ETGSEL1	=	0x00ed
                           0000EC   439 _ETGSEL0	=	0x00ec
                           0000EB   440 _ADCHS3	=	0x00eb
                           0000EA   441 _ADCHS2	=	0x00ea
                           0000E9   442 _ADCHS1	=	0x00e9
                           0000E8   443 _ADCHS0	=	0x00e8
                           0000DF   444 _PWMRUN	=	0x00df
                           0000DE   445 _LOAD	=	0x00de
                           0000DD   446 _PWMF	=	0x00dd
                           0000DC   447 _CLRPWM	=	0x00dc
                           0000D7   448 _CY	=	0x00d7
                           0000D6   449 _AC	=	0x00d6
                           0000D5   450 _F0	=	0x00d5
                           0000D4   451 _RS1	=	0x00d4
                           0000D3   452 _RS0	=	0x00d3
                           0000D2   453 _OV	=	0x00d2
                           0000D0   454 _P	=	0x00d0
                           0000CF   455 _TF2	=	0x00cf
                           0000CA   456 _TR2	=	0x00ca
                           0000C8   457 _CM_RL2	=	0x00c8
                           0000C6   458 _I2CEN	=	0x00c6
                           0000C5   459 _STA	=	0x00c5
                           0000C4   460 _STO	=	0x00c4
                           0000C3   461 _SI	=	0x00c3
                           0000C2   462 _AA	=	0x00c2
                           0000C0   463 _I2CPX	=	0x00c0
                           0000BE   464 _PADC	=	0x00be
                           0000BD   465 _PBOD	=	0x00bd
                           0000BC   466 _PS	=	0x00bc
                           0000BB   467 _PT1	=	0x00bb
                           0000BA   468 _PX1	=	0x00ba
                           0000B9   469 _PT0	=	0x00b9
                           0000B8   470 _PX0	=	0x00b8
                           0000B0   471 _P30	=	0x00b0
                           0000AF   472 _EA	=	0x00af
                           0000AE   473 _EADC	=	0x00ae
                           0000AD   474 _EBOD	=	0x00ad
                           0000AC   475 _ES	=	0x00ac
                           0000AB   476 _ET1	=	0x00ab
                           0000AA   477 _EX1	=	0x00aa
                           0000A9   478 _ET0	=	0x00a9
                           0000A8   479 _EX0	=	0x00a8
                           0000A0   480 _P20	=	0x00a0
                           00009F   481 _SM0	=	0x009f
                           00009F   482 _FE	=	0x009f
                           00009E   483 _SM1	=	0x009e
                           00009D   484 _SM2	=	0x009d
                           00009C   485 _REN	=	0x009c
                           00009B   486 _TB8	=	0x009b
                           00009A   487 _RB8	=	0x009a
                           000099   488 _TI	=	0x0099
                           000098   489 _RI	=	0x0098
                           000097   490 _P17	=	0x0097
                           000096   491 _P16	=	0x0096
                           000096   492 _TXD_1	=	0x0096
                           000095   493 _P15	=	0x0095
                           000094   494 _P14	=	0x0094
                           000094   495 _SDA	=	0x0094
                           000093   496 _P13	=	0x0093
                           000093   497 _SCL	=	0x0093
                           000092   498 _P12	=	0x0092
                           000091   499 _P11	=	0x0091
                           000090   500 _P10	=	0x0090
                           00008F   501 _TF1	=	0x008f
                           00008E   502 _TR1	=	0x008e
                           00008D   503 _TF0	=	0x008d
                           00008C   504 _TR0	=	0x008c
                           00008B   505 _IE1	=	0x008b
                           00008A   506 _IT1	=	0x008a
                           000089   507 _IE0	=	0x0089
                           000088   508 _IT0	=	0x0088
                           000087   509 _P07	=	0x0087
                           000087   510 _RXD	=	0x0087
                           000086   511 _P06	=	0x0086
                           000086   512 _TXD	=	0x0086
                           000085   513 _P05	=	0x0085
                           000084   514 _P04	=	0x0084
                           000084   515 _STADC	=	0x0084
                           000083   516 _P03	=	0x0083
                           000082   517 _P02	=	0x0082
                           000082   518 _RXD_1	=	0x0082
                           000081   519 _P01	=	0x0081
                           000081   520 _MISO	=	0x0081
                           000080   521 _P00	=	0x0080
                           000080   522 _MOSI	=	0x0080
                                    523 ;--------------------------------------------------------
                                    524 ; overlayable register banks
                                    525 ;--------------------------------------------------------
                                    526 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        527 	.ds 8
                                    528 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        529 	.ds 8
                                    530 ;--------------------------------------------------------
                                    531 ; internal ram data
                                    532 ;--------------------------------------------------------
                                    533 	.area DSEG    (DATA)
      000000                        534 _gu8UART::
      000000                        535 	.ds 1
      000001                        536 _state_machine_PARM_2:
      000001                        537 	.ds 1
      000002                        538 _state_machine_PARM_3:
      000002                        539 	.ds 1
      000003                        540 _state_machine_PARM_4:
      000003                        541 	.ds 1
      000004                        542 _state_switches_su8PrevSW_65536_83:
      000004                        543 	.ds 1
      000005                        544 _printoutbuf_PARM_2:
      000005                        545 	.ds 3
      000008                        546 _act_by_one_key_PARM_2:
      000008                        547 	.ds 3
      00000B                        548 _act_by_one_key_PARM_3:
      00000B                        549 	.ds 3
      00000E                        550 _act_by_one_key_sloc0_1_0:
      00000E                        551 	.ds 3
      000011                        552 _main_u8RxUART_65536_105:
      000011                        553 	.ds 1
      000012                        554 _main_u8LineFiAddr_65536_105:
      000012                        555 	.ds 1
      000013                        556 _main_u8LineFiCmd_65536_105:
      000013                        557 	.ds 1
      000014                        558 _main_u8SwNum_65536_105:
      000014                        559 	.ds 1
      000015                        560 _main_stLineFiPkt_65536_105:
      000015                        561 	.ds 8
                                    562 ;--------------------------------------------------------
                                    563 ; overlayable items in internal ram
                                    564 ;--------------------------------------------------------
                                    565 	.area	OSEG    (OVR,DATA)
                                    566 	.area	OSEG    (OVR,DATA)
                                    567 	.area	OSEG    (OVR,DATA)
                                    568 	.area	OSEG    (OVR,DATA)
                                    569 	.area	OSEG    (OVR,DATA)
                                    570 	.area	OSEG    (OVR,DATA)
      000000                        571 _state_switches_PARM_2:
      000000                        572 	.ds 3
                                    573 ;--------------------------------------------------------
                                    574 ; Stack segment in internal ram
                                    575 ;--------------------------------------------------------
                                    576 	.area	SSEG
      000000                        577 __start__stack:
      000000                        578 	.ds	1
                                    579 
                                    580 ;--------------------------------------------------------
                                    581 ; indirectly addressable internal ram data
                                    582 ;--------------------------------------------------------
                                    583 	.area ISEG    (DATA)
                                    584 ;--------------------------------------------------------
                                    585 ; absolute internal ram data
                                    586 ;--------------------------------------------------------
                                    587 	.area IABS    (ABS,DATA)
                                    588 	.area IABS    (ABS,DATA)
                                    589 ;--------------------------------------------------------
                                    590 ; bit data
                                    591 ;--------------------------------------------------------
                                    592 	.area BSEG    (BIT)
                                    593 ;--------------------------------------------------------
                                    594 ; paged external ram data
                                    595 ;--------------------------------------------------------
                                    596 	.area PSEG    (PAG,XDATA)
                                    597 ;--------------------------------------------------------
                                    598 ; external ram data
                                    599 ;--------------------------------------------------------
                                    600 	.area XSEG    (XDATA)
      000000                        601 _gcUartInputMode::
      000000                        602 	.ds 12
      00000C                        603 _gpu8Data::
      00000C                        604 	.ds 20
      000020                        605 _gpu8Data2::
      000020                        606 	.ds 20
      000034                        607 _gu16TimeCnt::
      000034                        608 	.ds 2
      000036                        609 _gpu32UartSpeed::
      000036                        610 	.ds 56
      00006E                        611 _act_by_one_key_u8Data_65536_96:
      00006E                        612 	.ds 1
      00006F                        613 _main_pcBuf_65536_105:
      00006F                        614 	.ds 100
      0000D3                        615 _main_pu8Data_65536_105:
      0000D3                        616 	.ds 10
      0000DD                        617 _main_u8DataIdx_65536_105:
      0000DD                        618 	.ds 1
      0000DE                        619 _main_ucBufIdx_65536_105:
      0000DE                        620 	.ds 1
      0000DF                        621 _main_pstLineFiPkt_65536_105:
      0000DF                        622 	.ds 40
                                    623 ;--------------------------------------------------------
                                    624 ; absolute external ram data
                                    625 ;--------------------------------------------------------
                                    626 	.area XABS    (ABS,XDATA)
                                    627 ;--------------------------------------------------------
                                    628 ; external initialized ram data
                                    629 ;--------------------------------------------------------
                                    630 	.area HOME    (CODE)
                                    631 	.area GSINIT0 (CODE)
                                    632 	.area GSINIT1 (CODE)
                                    633 	.area GSINIT2 (CODE)
                                    634 	.area GSINIT3 (CODE)
                                    635 	.area GSINIT4 (CODE)
                                    636 	.area GSINIT5 (CODE)
                                    637 	.area GSINIT  (CODE)
                                    638 	.area GSFINAL (CODE)
                                    639 	.area CSEG    (CODE)
                                    640 ;--------------------------------------------------------
                                    641 ; interrupt vector
                                    642 ;--------------------------------------------------------
                                    643 	.area HOME    (CODE)
      000000                        644 __interrupt_vect:
      000000 02r00r00         [24]  645 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  646 	reti
      000004                        647 	.ds	7
      00000B 02r01r83         [24]  648 	ljmp	_Timer0_ISR
      00000E                        649 	.ds	5
      000013 32               [24]  650 	reti
      000014                        651 	.ds	7
      00001B 32               [24]  652 	reti
      00001C                        653 	.ds	7
      000023 32               [24]  654 	reti
      000024                        655 	.ds	7
      00002B 32               [24]  656 	reti
      00002C                        657 	.ds	7
      000033 32               [24]  658 	reti
      000034                        659 	.ds	7
      00003B 02r01rA6         [24]  660 	ljmp	_pin_interrupt_isr
                                    661 ;--------------------------------------------------------
                                    662 ; global & static initialisations
                                    663 ;--------------------------------------------------------
                                    664 	.area HOME    (CODE)
                                    665 	.area GSINIT  (CODE)
                                    666 	.area GSFINAL (CODE)
                                    667 	.area GSINIT  (CODE)
                                    668 	.globl __sdcc_gsinit_startup
                                    669 	.globl __sdcc_program_startup
                                    670 	.globl __start__stack
                                    671 	.globl __mcs51_genRAMCLEAR
                                    672 ;------------------------------------------------------------
                                    673 ;Allocation info for local variables in function 'state_switches'
                                    674 ;------------------------------------------------------------
                                    675 ;su8PrevSW                 Allocated with name '_state_switches_su8PrevSW_65536_83'
                                    676 ;apu8SwNum                 Allocated with name '_state_switches_PARM_2'
                                    677 ;au8SW                     Allocated to registers r7 
                                    678 ;i                         Allocated to registers r2 
                                    679 ;u8Result                  Allocated to registers r6 
                                    680 ;------------------------------------------------------------
                                    681 ;	src/main.c:428: static UINT8 su8PrevSW = 0;
      000000 75*04 00         [24]  682 	mov	_state_switches_su8PrevSW_65536_83,#0x00
                                    683 ;------------------------------------------------------------
                                    684 ;Allocation info for local variables in function 'act_by_one_key'
                                    685 ;------------------------------------------------------------
                                    686 ;apu8LineFiCmd             Allocated with name '_act_by_one_key_PARM_2'
                                    687 ;apu8LineFiAddr            Allocated with name '_act_by_one_key_PARM_3'
                                    688 ;au8RxUART                 Allocated to registers r7 
                                    689 ;sloc0                     Allocated with name '_act_by_one_key_sloc0_1_0'
                                    690 ;u8Data                    Allocated with name '_act_by_one_key_u8Data_65536_96'
                                    691 ;------------------------------------------------------------
                                    692 ;	src/main.c:597: static UINT8 __xdata u8Data = 0;
      000003 90r00r6E         [24]  693 	mov	dptr,#_act_by_one_key_u8Data_65536_96
      000006 E4               [12]  694 	clr	a
      000007 F0               [24]  695 	movx	@dptr,a
                                    696 ;	src/main.c:123: UINT8 gu8UART = 0;
      000008 75*00 00         [24]  697 	mov	_gu8UART,#0x00
                                    698 ;	src/main.c:72: const char * __xdata  gcUartInputMode[MAX_STATE_UART0_INPUT] = {
      00000B 90r00r00         [24]  699 	mov	dptr,#_gcUartInputMode
      00000E 74rA9            [12]  700 	mov	a,#___str_60
      000010 F0               [24]  701 	movx	@dptr,a
      000011 74s03            [12]  702 	mov	a,#(___str_60 >> 8)
      000013 A3               [24]  703 	inc	dptr
      000014 F0               [24]  704 	movx	@dptr,a
      000015 74 80            [12]  705 	mov	a,#0x80
      000017 A3               [24]  706 	inc	dptr
      000018 F0               [24]  707 	movx	@dptr,a
      000019 90r00r03         [24]  708 	mov	dptr,#(_gcUartInputMode + 0x0003)
      00001C 74rCB            [12]  709 	mov	a,#___str_61
      00001E F0               [24]  710 	movx	@dptr,a
      00001F 74s03            [12]  711 	mov	a,#(___str_61 >> 8)
      000021 A3               [24]  712 	inc	dptr
      000022 F0               [24]  713 	movx	@dptr,a
      000023 74 80            [12]  714 	mov	a,#0x80
      000025 A3               [24]  715 	inc	dptr
      000026 F0               [24]  716 	movx	@dptr,a
      000027 90r00r06         [24]  717 	mov	dptr,#(_gcUartInputMode + 0x0006)
      00002A 74rEA            [12]  718 	mov	a,#___str_62
      00002C F0               [24]  719 	movx	@dptr,a
      00002D 74s03            [12]  720 	mov	a,#(___str_62 >> 8)
      00002F A3               [24]  721 	inc	dptr
      000030 F0               [24]  722 	movx	@dptr,a
      000031 74 80            [12]  723 	mov	a,#0x80
      000033 A3               [24]  724 	inc	dptr
      000034 F0               [24]  725 	movx	@dptr,a
      000035 90r00r09         [24]  726 	mov	dptr,#(_gcUartInputMode + 0x0009)
      000038 74r11            [12]  727 	mov	a,#___str_63
      00003A F0               [24]  728 	movx	@dptr,a
      00003B 74s04            [12]  729 	mov	a,#(___str_63 >> 8)
      00003D A3               [24]  730 	inc	dptr
      00003E F0               [24]  731 	movx	@dptr,a
      00003F 74 80            [12]  732 	mov	a,#0x80
      000041 A3               [24]  733 	inc	dptr
      000042 F0               [24]  734 	movx	@dptr,a
                                    735 ;	src/main.c:87: UINT8 __xdata gpu8Data[20] = {
      000043 90r00r0C         [24]  736 	mov	dptr,#_gpu8Data
      000046 23               [12]  737 	rl	a
      000047 F0               [24]  738 	movx	@dptr,a
      000048 90r00r0D         [24]  739 	mov	dptr,#(_gpu8Data + 0x0001)
      00004B F0               [24]  740 	movx	@dptr,a
      00004C 90r00r0E         [24]  741 	mov	dptr,#(_gpu8Data + 0x0002)
      00004F F0               [24]  742 	movx	@dptr,a
      000050 90r00r0F         [24]  743 	mov	dptr,#(_gpu8Data + 0x0003)
      000053 F0               [24]  744 	movx	@dptr,a
      000054 90r00r10         [24]  745 	mov	dptr,#(_gpu8Data + 0x0004)
      000057 04               [12]  746 	inc	a
      000058 F0               [24]  747 	movx	@dptr,a
      000059 90r00r11         [24]  748 	mov	dptr,#(_gpu8Data + 0x0005)
      00005C F0               [24]  749 	movx	@dptr,a
      00005D 90r00r12         [24]  750 	mov	dptr,#(_gpu8Data + 0x0006)
      000060 F0               [24]  751 	movx	@dptr,a
      000061 90r00r13         [24]  752 	mov	dptr,#(_gpu8Data + 0x0007)
      000064 F0               [24]  753 	movx	@dptr,a
      000065 90r00r14         [24]  754 	mov	dptr,#(_gpu8Data + 0x0008)
      000068 04               [12]  755 	inc	a
      000069 F0               [24]  756 	movx	@dptr,a
      00006A 90r00r15         [24]  757 	mov	dptr,#(_gpu8Data + 0x0009)
      00006D F0               [24]  758 	movx	@dptr,a
      00006E 90r00r16         [24]  759 	mov	dptr,#(_gpu8Data + 0x000a)
      000071 F0               [24]  760 	movx	@dptr,a
      000072 90r00r17         [24]  761 	mov	dptr,#(_gpu8Data + 0x000b)
      000075 F0               [24]  762 	movx	@dptr,a
      000076 90r00r18         [24]  763 	mov	dptr,#(_gpu8Data + 0x000c)
      000079 04               [12]  764 	inc	a
      00007A F0               [24]  765 	movx	@dptr,a
      00007B 90r00r19         [24]  766 	mov	dptr,#(_gpu8Data + 0x000d)
      00007E F0               [24]  767 	movx	@dptr,a
      00007F 90r00r1A         [24]  768 	mov	dptr,#(_gpu8Data + 0x000e)
      000082 F0               [24]  769 	movx	@dptr,a
      000083 90r00r1B         [24]  770 	mov	dptr,#(_gpu8Data + 0x000f)
      000086 F0               [24]  771 	movx	@dptr,a
      000087 90r00r1C         [24]  772 	mov	dptr,#(_gpu8Data + 0x0010)
      00008A 04               [12]  773 	inc	a
      00008B F0               [24]  774 	movx	@dptr,a
      00008C 90r00r1D         [24]  775 	mov	dptr,#(_gpu8Data + 0x0011)
      00008F F0               [24]  776 	movx	@dptr,a
      000090 90r00r1E         [24]  777 	mov	dptr,#(_gpu8Data + 0x0012)
      000093 F0               [24]  778 	movx	@dptr,a
      000094 90r00r1F         [24]  779 	mov	dptr,#(_gpu8Data + 0x0013)
      000097 F0               [24]  780 	movx	@dptr,a
                                    781 ;	src/main.c:95: UINT8 __xdata gpu8Data2[20] = {
      000098 90r00r20         [24]  782 	mov	dptr,#_gpu8Data2
      00009B 74 02            [12]  783 	mov	a,#0x02
      00009D F0               [24]  784 	movx	@dptr,a
      00009E 90r00r21         [24]  785 	mov	dptr,#(_gpu8Data2 + 0x0001)
      0000A1 F0               [24]  786 	movx	@dptr,a
      0000A2 90r00r22         [24]  787 	mov	dptr,#(_gpu8Data2 + 0x0002)
      0000A5 F0               [24]  788 	movx	@dptr,a
      0000A6 90r00r23         [24]  789 	mov	dptr,#(_gpu8Data2 + 0x0003)
      0000A9 F0               [24]  790 	movx	@dptr,a
      0000AA 90r00r24         [24]  791 	mov	dptr,#(_gpu8Data2 + 0x0004)
      0000AD 14               [12]  792 	dec	a
      0000AE F0               [24]  793 	movx	@dptr,a
      0000AF 90r00r25         [24]  794 	mov	dptr,#(_gpu8Data2 + 0x0005)
      0000B2 F0               [24]  795 	movx	@dptr,a
      0000B3 90r00r26         [24]  796 	mov	dptr,#(_gpu8Data2 + 0x0006)
      0000B6 F0               [24]  797 	movx	@dptr,a
      0000B7 90r00r27         [24]  798 	mov	dptr,#(_gpu8Data2 + 0x0007)
      0000BA F0               [24]  799 	movx	@dptr,a
      0000BB 90r00r28         [24]  800 	mov	dptr,#(_gpu8Data2 + 0x0008)
      0000BE 74 04            [12]  801 	mov	a,#0x04
      0000C0 F0               [24]  802 	movx	@dptr,a
      0000C1 90r00r29         [24]  803 	mov	dptr,#(_gpu8Data2 + 0x0009)
      0000C4 F0               [24]  804 	movx	@dptr,a
      0000C5 90r00r2A         [24]  805 	mov	dptr,#(_gpu8Data2 + 0x000a)
      0000C8 F0               [24]  806 	movx	@dptr,a
      0000C9 90r00r2B         [24]  807 	mov	dptr,#(_gpu8Data2 + 0x000b)
      0000CC F0               [24]  808 	movx	@dptr,a
      0000CD 90r00r2C         [24]  809 	mov	dptr,#(_gpu8Data2 + 0x000c)
      0000D0 14               [12]  810 	dec	a
      0000D1 F0               [24]  811 	movx	@dptr,a
      0000D2 90r00r2D         [24]  812 	mov	dptr,#(_gpu8Data2 + 0x000d)
      0000D5 F0               [24]  813 	movx	@dptr,a
      0000D6 90r00r2E         [24]  814 	mov	dptr,#(_gpu8Data2 + 0x000e)
      0000D9 F0               [24]  815 	movx	@dptr,a
      0000DA 90r00r2F         [24]  816 	mov	dptr,#(_gpu8Data2 + 0x000f)
      0000DD F0               [24]  817 	movx	@dptr,a
      0000DE 90r00r30         [24]  818 	mov	dptr,#(_gpu8Data2 + 0x0010)
      0000E1 74 05            [12]  819 	mov	a,#0x05
      0000E3 F0               [24]  820 	movx	@dptr,a
      0000E4 90r00r31         [24]  821 	mov	dptr,#(_gpu8Data2 + 0x0011)
      0000E7 F0               [24]  822 	movx	@dptr,a
      0000E8 90r00r32         [24]  823 	mov	dptr,#(_gpu8Data2 + 0x0012)
      0000EB F0               [24]  824 	movx	@dptr,a
      0000EC 90r00r33         [24]  825 	mov	dptr,#(_gpu8Data2 + 0x0013)
      0000EF F0               [24]  826 	movx	@dptr,a
                                    827 ;	src/main.c:106: UINT32 __xdata gpu32UartSpeed[] = {
      0000F0 90r00r36         [24]  828 	mov	dptr,#_gpu32UartSpeed
      0000F3 74 60            [12]  829 	mov	a,#0x60
      0000F5 F0               [24]  830 	movx	@dptr,a
      0000F6 74 09            [12]  831 	mov	a,#0x09
      0000F8 A3               [24]  832 	inc	dptr
      0000F9 F0               [24]  833 	movx	@dptr,a
      0000FA E4               [12]  834 	clr	a
      0000FB A3               [24]  835 	inc	dptr
      0000FC F0               [24]  836 	movx	@dptr,a
      0000FD A3               [24]  837 	inc	dptr
      0000FE F0               [24]  838 	movx	@dptr,a
      0000FF 90r00r3A         [24]  839 	mov	dptr,#(_gpu32UartSpeed + 0x0004)
      000102 74 80            [12]  840 	mov	a,#0x80
      000104 F0               [24]  841 	movx	@dptr,a
      000105 74 70            [12]  842 	mov	a,#0x70
      000107 A3               [24]  843 	inc	dptr
      000108 F0               [24]  844 	movx	@dptr,a
      000109 E4               [12]  845 	clr	a
      00010A A3               [24]  846 	inc	dptr
      00010B F0               [24]  847 	movx	@dptr,a
      00010C A3               [24]  848 	inc	dptr
      00010D F0               [24]  849 	movx	@dptr,a
      00010E 90r00r3E         [24]  850 	mov	dptr,#(_gpu32UartSpeed + 0x0008)
      000111 F0               [24]  851 	movx	@dptr,a
      000112 74 96            [12]  852 	mov	a,#0x96
      000114 A3               [24]  853 	inc	dptr
      000115 F0               [24]  854 	movx	@dptr,a
      000116 E4               [12]  855 	clr	a
      000117 A3               [24]  856 	inc	dptr
      000118 F0               [24]  857 	movx	@dptr,a
      000119 A3               [24]  858 	inc	dptr
      00011A F0               [24]  859 	movx	@dptr,a
      00011B 90r00r42         [24]  860 	mov	dptr,#(_gpu32UartSpeed + 0x000c)
      00011E F0               [24]  861 	movx	@dptr,a
      00011F 74 E1            [12]  862 	mov	a,#0xe1
      000121 A3               [24]  863 	inc	dptr
      000122 F0               [24]  864 	movx	@dptr,a
      000123 E4               [12]  865 	clr	a
      000124 A3               [24]  866 	inc	dptr
      000125 F0               [24]  867 	movx	@dptr,a
      000126 A3               [24]  868 	inc	dptr
      000127 F0               [24]  869 	movx	@dptr,a
      000128 90r00r46         [24]  870 	mov	dptr,#(_gpu32UartSpeed + 0x0010)
      00012B F0               [24]  871 	movx	@dptr,a
      00012C 74 C2            [12]  872 	mov	a,#0xc2
      00012E A3               [24]  873 	inc	dptr
      00012F F0               [24]  874 	movx	@dptr,a
      000130 74 01            [12]  875 	mov	a,#0x01
      000132 A3               [24]  876 	inc	dptr
      000133 F0               [24]  877 	movx	@dptr,a
      000134 E4               [12]  878 	clr	a
      000135 A3               [24]  879 	inc	dptr
      000136 F0               [24]  880 	movx	@dptr,a
      000137 90r00r4A         [24]  881 	mov	dptr,#(_gpu32UartSpeed + 0x0014)
      00013A F0               [24]  882 	movx	@dptr,a
      00013B 74 84            [12]  883 	mov	a,#0x84
      00013D A3               [24]  884 	inc	dptr
      00013E F0               [24]  885 	movx	@dptr,a
      00013F 74 03            [12]  886 	mov	a,#0x03
      000141 A3               [24]  887 	inc	dptr
      000142 F0               [24]  888 	movx	@dptr,a
      000143 E4               [12]  889 	clr	a
      000144 A3               [24]  890 	inc	dptr
      000145 F0               [24]  891 	movx	@dptr,a
      000146 90r00r4E         [24]  892 	mov	dptr,#(_gpu32UartSpeed + 0x0018)
      000149 74 E0            [12]  893 	mov	a,#0xe0
      00014B F0               [24]  894 	movx	@dptr,a
      00014C 74 93            [12]  895 	mov	a,#0x93
      00014E A3               [24]  896 	inc	dptr
      00014F F0               [24]  897 	movx	@dptr,a
      000150 74 04            [12]  898 	mov	a,#0x04
      000152 A3               [24]  899 	inc	dptr
      000153 F0               [24]  900 	movx	@dptr,a
      000154 E4               [12]  901 	clr	a
      000155 A3               [24]  902 	inc	dptr
      000156 F0               [24]  903 	movx	@dptr,a
      000157 90r00r52         [24]  904 	mov	dptr,#(_gpu32UartSpeed + 0x001c)
      00015A F0               [24]  905 	movx	@dptr,a
      00015B 74 08            [12]  906 	mov	a,#0x08
      00015D A3               [24]  907 	inc	dptr
      00015E F0               [24]  908 	movx	@dptr,a
      00015F 14               [12]  909 	dec	a
      000160 A3               [24]  910 	inc	dptr
      000161 F0               [24]  911 	movx	@dptr,a
      000162 E4               [12]  912 	clr	a
      000163 A3               [24]  913 	inc	dptr
      000164 F0               [24]  914 	movx	@dptr,a
      000165 90r00r56         [24]  915 	mov	dptr,#(_gpu32UartSpeed + 0x0020)
      000168 74 20            [12]  916 	mov	a,#0x20
      00016A F0               [24]  917 	movx	@dptr,a
      00016B 74 A1            [12]  918 	mov	a,#0xa1
      00016D A3               [24]  919 	inc	dptr
      00016E F0               [24]  920 	movx	@dptr,a
      00016F 74 07            [12]  921 	mov	a,#0x07
      000171 A3               [24]  922 	inc	dptr
      000172 F0               [24]  923 	movx	@dptr,a
      000173 E4               [12]  924 	clr	a
      000174 A3               [24]  925 	inc	dptr
      000175 F0               [24]  926 	movx	@dptr,a
      000176 90r00r5A         [24]  927 	mov	dptr,#(_gpu32UartSpeed + 0x0024)
      000179 74 C0            [12]  928 	mov	a,#0xc0
      00017B F0               [24]  929 	movx	@dptr,a
      00017C 74 27            [12]  930 	mov	a,#0x27
      00017E A3               [24]  931 	inc	dptr
      00017F F0               [24]  932 	movx	@dptr,a
      000180 74 09            [12]  933 	mov	a,#0x09
      000182 A3               [24]  934 	inc	dptr
      000183 F0               [24]  935 	movx	@dptr,a
      000184 E4               [12]  936 	clr	a
      000185 A3               [24]  937 	inc	dptr
      000186 F0               [24]  938 	movx	@dptr,a
      000187 90r00r5E         [24]  939 	mov	dptr,#(_gpu32UartSpeed + 0x0028)
      00018A 74 60            [12]  940 	mov	a,#0x60
      00018C F0               [24]  941 	movx	@dptr,a
      00018D 74 AE            [12]  942 	mov	a,#0xae
      00018F A3               [24]  943 	inc	dptr
      000190 F0               [24]  944 	movx	@dptr,a
      000191 74 0A            [12]  945 	mov	a,#0x0a
      000193 A3               [24]  946 	inc	dptr
      000194 F0               [24]  947 	movx	@dptr,a
      000195 E4               [12]  948 	clr	a
      000196 A3               [24]  949 	inc	dptr
      000197 F0               [24]  950 	movx	@dptr,a
      000198 90r00r62         [24]  951 	mov	dptr,#(_gpu32UartSpeed + 0x002c)
      00019B F0               [24]  952 	movx	@dptr,a
      00019C 74 35            [12]  953 	mov	a,#0x35
      00019E A3               [24]  954 	inc	dptr
      00019F F0               [24]  955 	movx	@dptr,a
      0001A0 74 0C            [12]  956 	mov	a,#0x0c
      0001A2 A3               [24]  957 	inc	dptr
      0001A3 F0               [24]  958 	movx	@dptr,a
      0001A4 E4               [12]  959 	clr	a
      0001A5 A3               [24]  960 	inc	dptr
      0001A6 F0               [24]  961 	movx	@dptr,a
      0001A7 90r00r66         [24]  962 	mov	dptr,#(_gpu32UartSpeed + 0x0030)
      0001AA 74 A0            [12]  963 	mov	a,#0xa0
      0001AC F0               [24]  964 	movx	@dptr,a
      0001AD 74 BB            [12]  965 	mov	a,#0xbb
      0001AF A3               [24]  966 	inc	dptr
      0001B0 F0               [24]  967 	movx	@dptr,a
      0001B1 74 0D            [12]  968 	mov	a,#0x0d
      0001B3 A3               [24]  969 	inc	dptr
      0001B4 F0               [24]  970 	movx	@dptr,a
      0001B5 E4               [12]  971 	clr	a
      0001B6 A3               [24]  972 	inc	dptr
      0001B7 F0               [24]  973 	movx	@dptr,a
      0001B8 90r00r6A         [24]  974 	mov	dptr,#(_gpu32UartSpeed + 0x0034)
      0001BB F0               [24]  975 	movx	@dptr,a
      0001BC 74 10            [12]  976 	mov	a,#0x10
      0001BE A3               [24]  977 	inc	dptr
      0001BF F0               [24]  978 	movx	@dptr,a
      0001C0 74 0E            [12]  979 	mov	a,#0x0e
      0001C2 A3               [24]  980 	inc	dptr
      0001C3 F0               [24]  981 	movx	@dptr,a
      0001C4 E4               [12]  982 	clr	a
      0001C5 A3               [24]  983 	inc	dptr
      0001C6 F0               [24]  984 	movx	@dptr,a
                                    985 	.area GSFINAL (CODE)
      000000 02r00r3E         [24]  986 	ljmp	__sdcc_program_startup
                                    987 ;--------------------------------------------------------
                                    988 ; Home
                                    989 ;--------------------------------------------------------
                                    990 	.area HOME    (CODE)
                                    991 	.area HOME    (CODE)
      00003E                        992 __sdcc_program_startup:
      00003E 02r0Cr1A         [24]  993 	ljmp	_main
                                    994 ;	return from main will return to caller
                                    995 ;--------------------------------------------------------
                                    996 ; code
                                    997 ;--------------------------------------------------------
                                    998 	.area CSEG    (CODE)
                                    999 ;------------------------------------------------------------
                                   1000 ;Allocation info for local variables in function 'putchar'
                                   1001 ;------------------------------------------------------------
                                   1002 ;c                         Allocated to registers r7 
                                   1003 ;------------------------------------------------------------
                                   1004 ;	src/main.c:126: void putchar (char c) 
                                   1005 ;	-----------------------------------------
                                   1006 ;	 function putchar
                                   1007 ;	-----------------------------------------
      000000                       1008 _putchar:
                           000007  1009 	ar7 = 0x07
                           000006  1010 	ar6 = 0x06
                           000005  1011 	ar5 = 0x05
                           000004  1012 	ar4 = 0x04
                           000003  1013 	ar3 = 0x03
                           000002  1014 	ar2 = 0x02
                           000001  1015 	ar1 = 0x01
                           000000  1016 	ar0 = 0x00
      000000 AF 82            [24] 1017 	mov	r7,dpl
                                   1018 ;	src/main.c:128: if (gu8UART == 0)  {
      000002 E5*00            [12] 1019 	mov	a,_gu8UART
      000004 70 09            [24] 1020 	jnz	00108$
                                   1021 ;	src/main.c:129: TI = 0;
                                   1022 ;	assignBit
      000006 C2 99            [12] 1023 	clr	_TI
                                   1024 ;	src/main.c:130: SBUF = c;
      000008 8F 99            [24] 1025 	mov	_SBUF,r7
                                   1026 ;	src/main.c:131: while(TI==0);
      00000A                       1027 00101$:
      00000A 20 99 09         [24] 1028 	jb	_TI,00110$
      00000D 80 FB            [24] 1029 	sjmp	00101$
      00000F                       1030 00108$:
                                   1031 ;	src/main.c:134: TI_1 = 0;
                                   1032 ;	assignBit
      00000F C2 F9            [12] 1033 	clr	_TI_1
                                   1034 ;	src/main.c:135: SBUF_1 = c;
      000011 8F 9A            [24] 1035 	mov	_SBUF_1,r7
                                   1036 ;	src/main.c:136: while(TI_1==0);
      000013                       1037 00104$:
      000013 30 F9 FD         [24] 1038 	jnb	_TI_1,00104$
      000016                       1039 00110$:
                                   1040 ;	src/main.c:138: }
      000016 22               [24] 1041 	ret
                                   1042 ;------------------------------------------------------------
                                   1043 ;Allocation info for local variables in function 'print_esc'
                                   1044 ;------------------------------------------------------------
                                   1045 ;au8State                  Allocated to registers r7 
                                   1046 ;------------------------------------------------------------
                                   1047 ;	src/main.c:155: void print_esc(UINT8 au8State)
                                   1048 ;	-----------------------------------------
                                   1049 ;	 function print_esc
                                   1050 ;	-----------------------------------------
      000017                       1051 _print_esc:
      000017 AF 82            [24] 1052 	mov	r7,dpl
                                   1053 ;	src/main.c:157: printf_fast_f("\n\r");
      000019 C0 07            [24] 1054 	push	ar7
      00001B 74r00            [12] 1055 	mov	a,#___str_0
      00001D C0 E0            [24] 1056 	push	acc
      00001F 74s00            [12] 1057 	mov	a,#(___str_0 >> 8)
      000021 C0 E0            [24] 1058 	push	acc
      000023 12r00r00         [24] 1059 	lcall	_printf_fast_f
      000026 15 81            [12] 1060 	dec	sp
      000028 15 81            [12] 1061 	dec	sp
      00002A D0 07            [24] 1062 	pop	ar7
                                   1063 ;	src/main.c:158: switch(au8State) {
      00002C BF 00 02         [24] 1064 	cjne	r7,#0x00,00119$
      00002F 80 0A            [24] 1065 	sjmp	00101$
      000031                       1066 00119$:
      000031 BF 01 02         [24] 1067 	cjne	r7,#0x01,00120$
      000034 80 16            [24] 1068 	sjmp	00102$
      000036                       1069 00120$:
                                   1070 ;	src/main.c:159: case STATE_SELF :
      000036 BF 02 33         [24] 1071 	cjne	r7,#0x02,00104$
      000039 80 22            [24] 1072 	sjmp	00103$
      00003B                       1073 00101$:
                                   1074 ;	src/main.c:160: printf_fast_f("self ");
      00003B 74r03            [12] 1075 	mov	a,#___str_1
      00003D C0 E0            [24] 1076 	push	acc
      00003F 74s00            [12] 1077 	mov	a,#(___str_1 >> 8)
      000041 C0 E0            [24] 1078 	push	acc
      000043 12r00r00         [24] 1079 	lcall	_printf_fast_f
      000046 15 81            [12] 1080 	dec	sp
      000048 15 81            [12] 1081 	dec	sp
                                   1082 ;	src/main.c:161: break;
                                   1083 ;	src/main.c:162: case STATE_CROSS :
      00004A 80 20            [24] 1084 	sjmp	00104$
      00004C                       1085 00102$:
                                   1086 ;	src/main.c:163: printf_fast_f("cross");
      00004C 74r09            [12] 1087 	mov	a,#___str_2
      00004E C0 E0            [24] 1088 	push	acc
      000050 74s00            [12] 1089 	mov	a,#(___str_2 >> 8)
      000052 C0 E0            [24] 1090 	push	acc
      000054 12r00r00         [24] 1091 	lcall	_printf_fast_f
      000057 15 81            [12] 1092 	dec	sp
      000059 15 81            [12] 1093 	dec	sp
                                   1094 ;	src/main.c:164: break;
                                   1095 ;	src/main.c:165: case STATE_BOTH :
      00005B 80 0F            [24] 1096 	sjmp	00104$
      00005D                       1097 00103$:
                                   1098 ;	src/main.c:166: printf_fast_f("both ");
      00005D 74r0F            [12] 1099 	mov	a,#___str_3
      00005F C0 E0            [24] 1100 	push	acc
      000061 74s00            [12] 1101 	mov	a,#(___str_3 >> 8)
      000063 C0 E0            [24] 1102 	push	acc
      000065 12r00r00         [24] 1103 	lcall	_printf_fast_f
      000068 15 81            [12] 1104 	dec	sp
      00006A 15 81            [12] 1105 	dec	sp
                                   1106 ;	src/main.c:168: }
      00006C                       1107 00104$:
                                   1108 ;	src/main.c:169: printf_fast_f(" output:This is UART%d\n\r", gu8UART);
      00006C AE*00            [24] 1109 	mov	r6,_gu8UART
      00006E 7F 00            [12] 1110 	mov	r7,#0x00
      000070 C0 06            [24] 1111 	push	ar6
      000072 C0 07            [24] 1112 	push	ar7
      000074 74r15            [12] 1113 	mov	a,#___str_4
      000076 C0 E0            [24] 1114 	push	acc
      000078 74s00            [12] 1115 	mov	a,#(___str_4 >> 8)
      00007A C0 E0            [24] 1116 	push	acc
      00007C 12r00r00         [24] 1117 	lcall	_printf_fast_f
      00007F E5 81            [12] 1118 	mov	a,sp
      000081 24 FC            [12] 1119 	add	a,#0xfc
      000083 F5 81            [12] 1120 	mov	sp,a
                                   1121 ;	src/main.c:170: }
      000085 22               [24] 1122 	ret
                                   1123 ;------------------------------------------------------------
                                   1124 ;Allocation info for local variables in function 'print_char'
                                   1125 ;------------------------------------------------------------
                                   1126 ;au8Data                   Allocated to registers r7 
                                   1127 ;------------------------------------------------------------
                                   1128 ;	src/main.c:172: void print_char(char au8Data)
                                   1129 ;	-----------------------------------------
                                   1130 ;	 function print_char
                                   1131 ;	-----------------------------------------
      000086                       1132 _print_char:
      000086 AF 82            [24] 1133 	mov	r7,dpl
                                   1134 ;	src/main.c:174: switch(au8Data) {
      000088 BF 0D 02         [24] 1135 	cjne	r7,#0x0d,00115$
      00008B 80 04            [24] 1136 	sjmp	00102$
      00008D                       1137 00115$:
      00008D BF 1B 11         [24] 1138 	cjne	r7,#0x1b,00103$
                                   1139 ;	src/main.c:176: break;
                                   1140 ;	src/main.c:177: case '\r' :
      000090 22               [24] 1141 	ret
      000091                       1142 00102$:
                                   1143 ;	src/main.c:178: printf_fast_f("\r\n");
      000091 74r2E            [12] 1144 	mov	a,#___str_5
      000093 C0 E0            [24] 1145 	push	acc
      000095 74s00            [12] 1146 	mov	a,#(___str_5 >> 8)
      000097 C0 E0            [24] 1147 	push	acc
      000099 12r00r00         [24] 1148 	lcall	_printf_fast_f
      00009C 15 81            [12] 1149 	dec	sp
      00009E 15 81            [12] 1150 	dec	sp
                                   1151 ;	src/main.c:179: break;
                                   1152 ;	src/main.c:180: default :
      0000A0 22               [24] 1153 	ret
      0000A1                       1154 00103$:
                                   1155 ;	src/main.c:181: printf_fast_f("%c",au8Data);
      0000A1 7E 00            [12] 1156 	mov	r6,#0x00
      0000A3 C0 07            [24] 1157 	push	ar7
      0000A5 C0 06            [24] 1158 	push	ar6
      0000A7 74r31            [12] 1159 	mov	a,#___str_6
      0000A9 C0 E0            [24] 1160 	push	acc
      0000AB 74s00            [12] 1161 	mov	a,#(___str_6 >> 8)
      0000AD C0 E0            [24] 1162 	push	acc
      0000AF 12r00r00         [24] 1163 	lcall	_printf_fast_f
      0000B2 E5 81            [12] 1164 	mov	a,sp
      0000B4 24 FC            [12] 1165 	add	a,#0xfc
      0000B6 F5 81            [12] 1166 	mov	sp,a
                                   1167 ;	src/main.c:182: }
                                   1168 ;	src/main.c:183: }
      0000B8 22               [24] 1169 	ret
                                   1170 ;------------------------------------------------------------
                                   1171 ;Allocation info for local variables in function 'state_machine'
                                   1172 ;------------------------------------------------------------
                                   1173 ;au8RxUART                 Allocated with name '_state_machine_PARM_2'
                                   1174 ;au8SelfID                 Allocated with name '_state_machine_PARM_3'
                                   1175 ;au8OtherID                Allocated with name '_state_machine_PARM_4'
                                   1176 ;au8State                  Allocated to registers r7 
                                   1177 ;------------------------------------------------------------
                                   1178 ;	src/main.c:185: UINT8 state_machine(UINT8 au8State, UINT8 au8RxUART, UINT8 au8SelfID, UINT8 au8OtherID)
                                   1179 ;	-----------------------------------------
                                   1180 ;	 function state_machine
                                   1181 ;	-----------------------------------------
      0000B9                       1182 _state_machine:
      0000B9 AF 82            [24] 1183 	mov	r7,dpl
                                   1184 ;	src/main.c:187: if(au8RxUART == KEY_ESC) {
      0000BB 74 1B            [12] 1185 	mov	a,#0x1b
      0000BD B5*01 02         [24] 1186 	cjne	a,_state_machine_PARM_2,00142$
      0000C0 80 02            [24] 1187 	sjmp	00143$
      0000C2                       1188 00142$:
      0000C2 80 79            [24] 1189 	sjmp	00110$
      0000C4                       1190 00143$:
                                   1191 ;	src/main.c:188: gu8UART = au8SelfID;
      0000C4 AE*02            [24] 1192 	mov	r6,_state_machine_PARM_3
      0000C6 8E*00            [24] 1193 	mov	_gu8UART,r6
                                   1194 ;	src/main.c:189: printf_fast_f("\r\ninput:This is UART%d", gu8UART);
      0000C8 AC*00            [24] 1195 	mov	r4,_gu8UART
      0000CA 7D 00            [12] 1196 	mov	r5,#0x00
      0000CC C0 07            [24] 1197 	push	ar7
      0000CE C0 06            [24] 1198 	push	ar6
      0000D0 C0 04            [24] 1199 	push	ar4
      0000D2 C0 05            [24] 1200 	push	ar5
      0000D4 74r34            [12] 1201 	mov	a,#___str_7
      0000D6 C0 E0            [24] 1202 	push	acc
      0000D8 74s00            [12] 1203 	mov	a,#(___str_7 >> 8)
      0000DA C0 E0            [24] 1204 	push	acc
      0000DC 12r00r00         [24] 1205 	lcall	_printf_fast_f
      0000DF E5 81            [12] 1206 	mov	a,sp
      0000E1 24 FC            [12] 1207 	add	a,#0xfc
      0000E3 F5 81            [12] 1208 	mov	sp,a
      0000E5 D0 06            [24] 1209 	pop	ar6
      0000E7 D0 07            [24] 1210 	pop	ar7
                                   1211 ;	src/main.c:190: switch(au8State) {
      0000E9 BF 00 02         [24] 1212 	cjne	r7,#0x00,00144$
      0000EC 80 0D            [24] 1213 	sjmp	00101$
      0000EE                       1214 00144$:
      0000EE BF 01 02         [24] 1215 	cjne	r7,#0x01,00145$
      0000F1 80 21            [24] 1216 	sjmp	00102$
      0000F3                       1217 00145$:
      0000F3 BF 02 02         [24] 1218 	cjne	r7,#0x02,00146$
      0000F6 80 35            [24] 1219 	sjmp	00103$
      0000F8                       1220 00146$:
      0000F8 02r01r80         [24] 1221 	ljmp	00111$
                                   1222 ;	src/main.c:191: case STATE_SELF :
      0000FB                       1223 00101$:
                                   1224 ;	src/main.c:192: au8State = STATE_CROSS;
      0000FB 7F 01            [12] 1225 	mov	r7,#0x01
                                   1226 ;	src/main.c:193: gu8UART = au8SelfID;
      0000FD 8E*00            [24] 1227 	mov	_gu8UART,r6
                                   1228 ;	src/main.c:194: print_esc(au8State);
      0000FF 75 82 01         [24] 1229 	mov	dpl,#0x01
      000102 C0 07            [24] 1230 	push	ar7
      000104 12r00r17         [24] 1231 	lcall	_print_esc
                                   1232 ;	src/main.c:195: gu8UART = au8OtherID;
      000107 85*03*00         [24] 1233 	mov	_gu8UART,_state_machine_PARM_4
                                   1234 ;	src/main.c:196: print_esc(au8State);
      00010A 75 82 01         [24] 1235 	mov	dpl,#0x01
      00010D 12r00r17         [24] 1236 	lcall	_print_esc
      000110 D0 07            [24] 1237 	pop	ar7
                                   1238 ;	src/main.c:197: break;
                                   1239 ;	src/main.c:198: case STATE_CROSS :
      000112 80 6C            [24] 1240 	sjmp	00111$
      000114                       1241 00102$:
                                   1242 ;	src/main.c:199: au8State = STATE_BOTH;
      000114 7F 02            [12] 1243 	mov	r7,#0x02
                                   1244 ;	src/main.c:200: gu8UART = au8SelfID;
      000116 8E*00            [24] 1245 	mov	_gu8UART,r6
                                   1246 ;	src/main.c:201: print_esc(au8State);
      000118 75 82 02         [24] 1247 	mov	dpl,#0x02
      00011B C0 07            [24] 1248 	push	ar7
      00011D 12r00r17         [24] 1249 	lcall	_print_esc
                                   1250 ;	src/main.c:202: gu8UART = au8OtherID;
      000120 85*03*00         [24] 1251 	mov	_gu8UART,_state_machine_PARM_4
                                   1252 ;	src/main.c:203: print_esc(au8State);
      000123 75 82 02         [24] 1253 	mov	dpl,#0x02
      000126 12r00r17         [24] 1254 	lcall	_print_esc
      000129 D0 07            [24] 1255 	pop	ar7
                                   1256 ;	src/main.c:204: break;
                                   1257 ;	src/main.c:205: case STATE_BOTH :
      00012B 80 53            [24] 1258 	sjmp	00111$
      00012D                       1259 00103$:
                                   1260 ;	src/main.c:206: au8State = STATE_SELF;
      00012D 7F 00            [12] 1261 	mov	r7,#0x00
                                   1262 ;	src/main.c:207: gu8UART = au8SelfID;
      00012F 8E*00            [24] 1263 	mov	_gu8UART,r6
                                   1264 ;	src/main.c:208: print_esc(au8State);
      000131 75 82 00         [24] 1265 	mov	dpl,#0x00
      000134 C0 07            [24] 1266 	push	ar7
      000136 12r00r17         [24] 1267 	lcall	_print_esc
      000139 D0 07            [24] 1268 	pop	ar7
                                   1269 ;	src/main.c:210: }
      00013B 80 43            [24] 1270 	sjmp	00111$
      00013D                       1271 00110$:
                                   1272 ;	src/main.c:213: switch(au8State) {
      00013D BF 00 02         [24] 1273 	cjne	r7,#0x00,00147$
      000140 80 0A            [24] 1274 	sjmp	00105$
      000142                       1275 00147$:
      000142 BF 01 02         [24] 1276 	cjne	r7,#0x01,00148$
      000145 80 14            [24] 1277 	sjmp	00106$
      000147                       1278 00148$:
                                   1279 ;	src/main.c:214: case STATE_SELF :
      000147 BF 02 36         [24] 1280 	cjne	r7,#0x02,00111$
      00014A 80 1E            [24] 1281 	sjmp	00107$
      00014C                       1282 00105$:
                                   1283 ;	src/main.c:215: gu8UART = au8SelfID;
      00014C 85*02*00         [24] 1284 	mov	_gu8UART,_state_machine_PARM_3
                                   1285 ;	src/main.c:216: print_char(au8RxUART);
      00014F 85*01 82         [24] 1286 	mov	dpl,_state_machine_PARM_2
      000152 C0 07            [24] 1287 	push	ar7
      000154 12r00r86         [24] 1288 	lcall	_print_char
      000157 D0 07            [24] 1289 	pop	ar7
                                   1290 ;	src/main.c:217: break;
                                   1291 ;	src/main.c:218: case STATE_CROSS :
      000159 80 25            [24] 1292 	sjmp	00111$
      00015B                       1293 00106$:
                                   1294 ;	src/main.c:219: gu8UART = au8OtherID;
      00015B 85*03*00         [24] 1295 	mov	_gu8UART,_state_machine_PARM_4
                                   1296 ;	src/main.c:220: print_char(au8RxUART);
      00015E 85*01 82         [24] 1297 	mov	dpl,_state_machine_PARM_2
      000161 C0 07            [24] 1298 	push	ar7
      000163 12r00r86         [24] 1299 	lcall	_print_char
      000166 D0 07            [24] 1300 	pop	ar7
                                   1301 ;	src/main.c:221: break;
                                   1302 ;	src/main.c:222: case STATE_BOTH :
      000168 80 16            [24] 1303 	sjmp	00111$
      00016A                       1304 00107$:
                                   1305 ;	src/main.c:223: gu8UART = au8SelfID;
      00016A 85*02*00         [24] 1306 	mov	_gu8UART,_state_machine_PARM_3
                                   1307 ;	src/main.c:224: print_char(au8RxUART);
      00016D 85*01 82         [24] 1308 	mov	dpl,_state_machine_PARM_2
      000170 C0 07            [24] 1309 	push	ar7
      000172 12r00r86         [24] 1310 	lcall	_print_char
                                   1311 ;	src/main.c:225: gu8UART = au8OtherID;
      000175 85*03*00         [24] 1312 	mov	_gu8UART,_state_machine_PARM_4
                                   1313 ;	src/main.c:226: print_char(au8RxUART);
      000178 85*01 82         [24] 1314 	mov	dpl,_state_machine_PARM_2
      00017B 12r00r86         [24] 1315 	lcall	_print_char
      00017E D0 07            [24] 1316 	pop	ar7
                                   1317 ;	src/main.c:228: }
      000180                       1318 00111$:
                                   1319 ;	src/main.c:230: return au8State;
      000180 8F 82            [24] 1320 	mov	dpl,r7
                                   1321 ;	src/main.c:231: }
      000182 22               [24] 1322 	ret
                                   1323 ;------------------------------------------------------------
                                   1324 ;Allocation info for local variables in function 'Timer0_ISR'
                                   1325 ;------------------------------------------------------------
                                   1326 ;	src/main.c:233: void Timer0_ISR (void) interrupt(1)  //interrupt address is 0x000B
                                   1327 ;	-----------------------------------------
                                   1328 ;	 function Timer0_ISR
                                   1329 ;	-----------------------------------------
      000183                       1330 _Timer0_ISR:
                           00000F  1331 	ar7 = 0x0f
                           00000E  1332 	ar6 = 0x0e
                           00000D  1333 	ar5 = 0x0d
                           00000C  1334 	ar4 = 0x0c
                           00000B  1335 	ar3 = 0x0b
                           00000A  1336 	ar2 = 0x0a
                           000009  1337 	ar1 = 0x09
                           000008  1338 	ar0 = 0x08
      000183 C0 E0            [24] 1339 	push	acc
      000185 C0 82            [24] 1340 	push	dpl
      000187 C0 83            [24] 1341 	push	dph
      000189 C0 D0            [24] 1342 	push	psw
                                   1343 ;	src/main.c:235: TH0 = TH0_INIT;
      00018B 75 8C D4         [24] 1344 	mov	_TH0,#0xd4
                                   1345 ;	src/main.c:236: TL0 = TL0_INIT;
      00018E 75 8A 13         [24] 1346 	mov	_TL0,#0x13
                                   1347 ;	src/main.c:237: gu16TimeCnt++;
      000191 90r00r34         [24] 1348 	mov	dptr,#_gu16TimeCnt
      000194 E0               [24] 1349 	movx	a,@dptr
      000195 24 01            [12] 1350 	add	a,#0x01
      000197 F0               [24] 1351 	movx	@dptr,a
      000198 A3               [24] 1352 	inc	dptr
      000199 E0               [24] 1353 	movx	a,@dptr
      00019A 34 00            [12] 1354 	addc	a,#0x00
      00019C F0               [24] 1355 	movx	@dptr,a
                                   1356 ;	src/main.c:246: } //void Timer0_ISR (void) __interrupt 1  //interrupt address is 0x000B
      00019D D0 D0            [24] 1357 	pop	psw
      00019F D0 83            [24] 1358 	pop	dph
      0001A1 D0 82            [24] 1359 	pop	dpl
      0001A3 D0 E0            [24] 1360 	pop	acc
      0001A5 32               [24] 1361 	reti
                                   1362 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1363 ;	eliminated unneeded push/pop b
                                   1364 ;------------------------------------------------------------
                                   1365 ;Allocation info for local variables in function 'pin_interrupt_isr'
                                   1366 ;------------------------------------------------------------
                                   1367 ;	src/main.c:248: void pin_interrupt_isr(void) interrupt(7)
                                   1368 ;	-----------------------------------------
                                   1369 ;	 function pin_interrupt_isr
                                   1370 ;	-----------------------------------------
      0001A6                       1371 _pin_interrupt_isr:
      0001A6 C0 E0            [24] 1372 	push	acc
                                   1373 ;	src/main.c:250: if (PIF == 0x10) {
      0001A8 E5 EC            [12] 1374 	mov	a,_PIF
                                   1375 ;	src/main.c:252: PIF = 0;
      0001AA 75 EC 00         [24] 1376 	mov	_PIF,#0x00
                                   1377 ;	src/main.c:253: }// void pin_interrupt_isr (void) interrupt(7)
      0001AD D0 E0            [24] 1378 	pop	acc
      0001AF 32               [24] 1379 	reti
                                   1380 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1381 ;	eliminated unneeded push/pop not_psw
                                   1382 ;	eliminated unneeded push/pop dpl
                                   1383 ;	eliminated unneeded push/pop dph
                                   1384 ;	eliminated unneeded push/pop b
                                   1385 ;------------------------------------------------------------
                                   1386 ;Allocation info for local variables in function 'chk_manchester'
                                   1387 ;------------------------------------------------------------
                                   1388 ;c                         Allocated to registers r7 
                                   1389 ;i                         Allocated to registers r6 
                                   1390 ;------------------------------------------------------------
                                   1391 ;	src/main.c:255: UINT8 chk_manchester(UINT8 c)
                                   1392 ;	-----------------------------------------
                                   1393 ;	 function chk_manchester
                                   1394 ;	-----------------------------------------
      0001B0                       1395 _chk_manchester:
                           000007  1396 	ar7 = 0x07
                           000006  1397 	ar6 = 0x06
                           000005  1398 	ar5 = 0x05
                           000004  1399 	ar4 = 0x04
                           000003  1400 	ar3 = 0x03
                           000002  1401 	ar2 = 0x02
                           000001  1402 	ar1 = 0x01
                           000000  1403 	ar0 = 0x00
      0001B0 AF 82            [24] 1404 	mov	r7,dpl
                                   1405 ;	src/main.c:258: for (i=0;i<4;i++) {
      0001B2 7E 00            [12] 1406 	mov	r6,#0x00
      0001B4                       1407 00104$:
                                   1408 ;	src/main.c:259: if (((c>>(2*i)) & 1) == ((c>>((2*i+1)))&1)) {
      0001B4 EE               [12] 1409 	mov	a,r6
      0001B5 2E               [12] 1410 	add	a,r6
      0001B6 FD               [12] 1411 	mov	r5,a
      0001B7 8D F0            [24] 1412 	mov	b,r5
      0001B9 05 F0            [12] 1413 	inc	b
      0001BB EF               [12] 1414 	mov	a,r7
      0001BC 80 02            [24] 1415 	sjmp	00121$
      0001BE                       1416 00120$:
      0001BE C3               [12] 1417 	clr	c
      0001BF 13               [12] 1418 	rrc	a
      0001C0                       1419 00121$:
      0001C0 D5 F0 FB         [24] 1420 	djnz	b,00120$
      0001C3 FC               [12] 1421 	mov	r4,a
      0001C4 53 04 01         [24] 1422 	anl	ar4,#0x01
      0001C7 7B 00            [12] 1423 	mov	r3,#0x00
      0001C9 ED               [12] 1424 	mov	a,r5
      0001CA 04               [12] 1425 	inc	a
      0001CB F5 F0            [12] 1426 	mov	b,a
      0001CD 05 F0            [12] 1427 	inc	b
      0001CF EF               [12] 1428 	mov	a,r7
      0001D0 80 02            [24] 1429 	sjmp	00123$
      0001D2                       1430 00122$:
      0001D2 C3               [12] 1431 	clr	c
      0001D3 13               [12] 1432 	rrc	a
      0001D4                       1433 00123$:
      0001D4 D5 F0 FB         [24] 1434 	djnz	b,00122$
      0001D7 FD               [12] 1435 	mov	r5,a
      0001D8 53 05 01         [24] 1436 	anl	ar5,#0x01
      0001DB 7A 00            [12] 1437 	mov	r2,#0x00
      0001DD EC               [12] 1438 	mov	a,r4
      0001DE B5 05 08         [24] 1439 	cjne	a,ar5,00105$
      0001E1 EB               [12] 1440 	mov	a,r3
      0001E2 B5 02 04         [24] 1441 	cjne	a,ar2,00105$
                                   1442 ;	src/main.c:261: return 0;
      0001E5 75 82 00         [24] 1443 	mov	dpl,#0x00
      0001E8 22               [24] 1444 	ret
      0001E9                       1445 00105$:
                                   1446 ;	src/main.c:258: for (i=0;i<4;i++) {
      0001E9 0E               [12] 1447 	inc	r6
      0001EA BE 04 00         [24] 1448 	cjne	r6,#0x04,00126$
      0001ED                       1449 00126$:
      0001ED 40 C5            [24] 1450 	jc	00104$
                                   1451 ;	src/main.c:264: return 1;
      0001EF 75 82 01         [24] 1452 	mov	dpl,#0x01
                                   1453 ;	src/main.c:265: }
      0001F2 22               [24] 1454 	ret
                                   1455 ;------------------------------------------------------------
                                   1456 ;Allocation info for local variables in function 'conv_manchester2nibble'
                                   1457 ;------------------------------------------------------------
                                   1458 ;c                         Allocated to registers r7 
                                   1459 ;i                         Allocated to registers r5 
                                   1460 ;u8Nibble                  Allocated to registers r6 
                                   1461 ;------------------------------------------------------------
                                   1462 ;	src/main.c:267: UINT8 conv_manchester2nibble(UINT8 c)
                                   1463 ;	-----------------------------------------
                                   1464 ;	 function conv_manchester2nibble
                                   1465 ;	-----------------------------------------
      0001F3                       1466 _conv_manchester2nibble:
      0001F3 AF 82            [24] 1467 	mov	r7,dpl
                                   1468 ;	src/main.c:270: UINT8 u8Nibble = 0;
      0001F5 7E 00            [12] 1469 	mov	r6,#0x00
                                   1470 ;	src/main.c:271: for (i=0;i<4;i++) {
      0001F7 7D 04            [12] 1471 	mov	r5,#0x04
      0001F9                       1472 00106$:
                                   1473 ;	src/main.c:272: if (c & 1) {
      0001F9 EF               [12] 1474 	mov	a,r7
      0001FA 30 E0 03         [24] 1475 	jnb	acc.0,00102$
                                   1476 ;	src/main.c:273: u8Nibble |= 0x80;
      0001FD 43 06 80         [24] 1477 	orl	ar6,#0x80
      000200                       1478 00102$:
                                   1479 ;	src/main.c:275: c >>= 2;
      000200 EF               [12] 1480 	mov	a,r7
      000201 03               [12] 1481 	rr	a
      000202 03               [12] 1482 	rr	a
      000203 54 3F            [12] 1483 	anl	a,#0x3f
      000205 FF               [12] 1484 	mov	r7,a
                                   1485 ;	src/main.c:276: u8Nibble >>= 1;
      000206 EE               [12] 1486 	mov	a,r6
      000207 C3               [12] 1487 	clr	c
      000208 13               [12] 1488 	rrc	a
      000209 FE               [12] 1489 	mov	r6,a
                                   1490 ;	src/main.c:271: for (i=0;i<4;i++) {
      00020A DD ED            [24] 1491 	djnz	r5,00106$
                                   1492 ;	src/main.c:278: return u8Nibble;
      00020C 8E 82            [24] 1493 	mov	dpl,r6
                                   1494 ;	src/main.c:279: }
      00020E 22               [24] 1495 	ret
                                   1496 ;------------------------------------------------------------
                                   1497 ;Allocation info for local variables in function 'conv_manchester2highnibble'
                                   1498 ;------------------------------------------------------------
                                   1499 ;c                         Allocated to registers r7 
                                   1500 ;i                         Allocated to registers r5 
                                   1501 ;u8Nibble                  Allocated to registers r6 
                                   1502 ;------------------------------------------------------------
                                   1503 ;	src/main.c:281: UINT8 conv_manchester2highnibble(UINT8 c)
                                   1504 ;	-----------------------------------------
                                   1505 ;	 function conv_manchester2highnibble
                                   1506 ;	-----------------------------------------
      00020F                       1507 _conv_manchester2highnibble:
      00020F AF 82            [24] 1508 	mov	r7,dpl
                                   1509 ;	src/main.c:284: UINT8 u8Nibble = 0;
      000211 7E 00            [12] 1510 	mov	r6,#0x00
                                   1511 ;	src/main.c:285: for (i=0;i<4;i++) {
      000213 7D 04            [12] 1512 	mov	r5,#0x04
      000215                       1513 00106$:
                                   1514 ;	src/main.c:286: u8Nibble >>= 1;
      000215 EE               [12] 1515 	mov	a,r6
      000216 C3               [12] 1516 	clr	c
      000217 13               [12] 1517 	rrc	a
      000218 FE               [12] 1518 	mov	r6,a
                                   1519 ;	src/main.c:287: if (c & 1) {
      000219 EF               [12] 1520 	mov	a,r7
      00021A 30 E0 03         [24] 1521 	jnb	acc.0,00102$
                                   1522 ;	src/main.c:288: u8Nibble |= 0x80;
      00021D 43 06 80         [24] 1523 	orl	ar6,#0x80
      000220                       1524 00102$:
                                   1525 ;	src/main.c:290: c >>= 2;
      000220 EF               [12] 1526 	mov	a,r7
      000221 03               [12] 1527 	rr	a
      000222 03               [12] 1528 	rr	a
      000223 54 3F            [12] 1529 	anl	a,#0x3f
      000225 FF               [12] 1530 	mov	r7,a
                                   1531 ;	src/main.c:285: for (i=0;i<4;i++) {
      000226 DD ED            [24] 1532 	djnz	r5,00106$
                                   1533 ;	src/main.c:292: return u8Nibble;
      000228 8E 82            [24] 1534 	mov	dpl,r6
                                   1535 ;	src/main.c:293: }
      00022A 22               [24] 1536 	ret
                                   1537 ;------------------------------------------------------------
                                   1538 ;Allocation info for local variables in function 'MODIFY_HIRC_166'
                                   1539 ;------------------------------------------------------------
                                   1540 ;hircmap0                  Allocated to registers r7 
                                   1541 ;hircmap1                  Allocated to registers r6 
                                   1542 ;trimvalue16bit            Allocated to registers r7 r5 
                                   1543 ;------------------------------------------------------------
                                   1544 ;	src/main.c:295: void MODIFY_HIRC_166(void)
                                   1545 ;	-----------------------------------------
                                   1546 ;	 function MODIFY_HIRC_166
                                   1547 ;	-----------------------------------------
      00022B                       1548 _MODIFY_HIRC_166:
                                   1549 ;	src/main.c:300: if ((PCON&SET_BIT4)==SET_BIT4) {
      00022B AE 87            [24] 1550 	mov	r6,_PCON
      00022D 53 06 10         [24] 1551 	anl	ar6,#0x10
      000230 7F 00            [12] 1552 	mov	r7,#0x00
      000232 BE 10 41         [24] 1553 	cjne	r6,#0x10,00103$
      000235 BF 00 3E         [24] 1554 	cjne	r7,#0x00,00103$
                                   1555 ;	src/main.c:301: hircmap0 = RCTRIM0;
      000238 AF 84            [24] 1556 	mov	r7,_RCTRIM0
                                   1557 ;	src/main.c:302: hircmap1 = RCTRIM1;
      00023A AE 85            [24] 1558 	mov	r6,_RCTRIM1
                                   1559 ;	src/main.c:303: trimvalue16bit = ((hircmap0<<1)+(hircmap1&0x01));
      00023C 7D 00            [12] 1560 	mov	r5,#0x00
      00023E EF               [12] 1561 	mov	a,r7
      00023F 2F               [12] 1562 	add	a,r7
      000240 FF               [12] 1563 	mov	r7,a
      000241 ED               [12] 1564 	mov	a,r5
      000242 33               [12] 1565 	rlc	a
      000243 FD               [12] 1566 	mov	r5,a
      000244 53 06 01         [24] 1567 	anl	ar6,#0x01
      000247 7C 00            [12] 1568 	mov	r4,#0x00
      000249 EE               [12] 1569 	mov	a,r6
      00024A 2F               [12] 1570 	add	a,r7
      00024B FF               [12] 1571 	mov	r7,a
      00024C EC               [12] 1572 	mov	a,r4
      00024D 3D               [12] 1573 	addc	a,r5
      00024E FD               [12] 1574 	mov	r5,a
                                   1575 ;	src/main.c:304: trimvalue16bit = trimvalue16bit - 15;
      00024F EF               [12] 1576 	mov	a,r7
      000250 24 F1            [12] 1577 	add	a,#0xf1
      000252 FF               [12] 1578 	mov	r7,a
      000253 ED               [12] 1579 	mov	a,r5
      000254 34 FF            [12] 1580 	addc	a,#0xff
      000256 FD               [12] 1581 	mov	r5,a
                                   1582 ;	src/main.c:305: hircmap1 = trimvalue16bit&0x01;
      000257 8F 06            [24] 1583 	mov	ar6,r7
      000259 53 06 01         [24] 1584 	anl	ar6,#0x01
                                   1585 ;	src/main.c:306: hircmap0 = trimvalue16bit>>1;
      00025C ED               [12] 1586 	mov	a,r5
      00025D C3               [12] 1587 	clr	c
      00025E 13               [12] 1588 	rrc	a
      00025F CF               [12] 1589 	xch	a,r7
      000260 13               [12] 1590 	rrc	a
      000261 CF               [12] 1591 	xch	a,r7
      000262 FD               [12] 1592 	mov	r5,a
                                   1593 ;	src/main.c:307: TA=0XAA;
      000263 75 C7 AA         [24] 1594 	mov	_TA,#0xaa
                                   1595 ;	src/main.c:308: TA=0X55;
      000266 75 C7 55         [24] 1596 	mov	_TA,#0x55
                                   1597 ;	src/main.c:309: RCTRIM0 = hircmap0;
      000269 8F 84            [24] 1598 	mov	_RCTRIM0,r7
                                   1599 ;	src/main.c:310: TA=0XAA;
      00026B 75 C7 AA         [24] 1600 	mov	_TA,#0xaa
                                   1601 ;	src/main.c:311: TA=0X55;
      00026E 75 C7 55         [24] 1602 	mov	_TA,#0x55
                                   1603 ;	src/main.c:312: RCTRIM1 = hircmap1;
      000271 8E 85            [24] 1604 	mov	_RCTRIM1,r6
                                   1605 ;	src/main.c:314: PCON &= CLR_BIT4;
      000273 53 87 EF         [24] 1606 	anl	_PCON,#0xef
      000276                       1607 00103$:
                                   1608 ;	src/main.c:316: }
      000276 22               [24] 1609 	ret
                                   1610 ;------------------------------------------------------------
                                   1611 ;Allocation info for local variables in function 'disp_help'
                                   1612 ;------------------------------------------------------------
                                   1613 ;au8Code                   Allocated to registers r7 
                                   1614 ;------------------------------------------------------------
                                   1615 ;	src/main.c:317: void disp_help(UINT8 au8Code)
                                   1616 ;	-----------------------------------------
                                   1617 ;	 function disp_help
                                   1618 ;	-----------------------------------------
      000277                       1619 _disp_help:
      000277 AF 82            [24] 1620 	mov	r7,dpl
                                   1621 ;	src/main.c:319: gu8UART = 1;
      000279 75*00 01         [24] 1622 	mov	_gu8UART,#0x01
                                   1623 ;	src/main.c:320: switch(au8Code) {
      00027C BF 31 01         [24] 1624 	cjne	r7,#0x31,00165$
      00027F 22               [24] 1625 	ret
      000280                       1626 00165$:
      000280 BF 32 01         [24] 1627 	cjne	r7,#0x32,00166$
      000283 22               [24] 1628 	ret
      000284                       1629 00166$:
      000284 BF 33 02         [24] 1630 	cjne	r7,#0x33,00167$
      000287 80 32            [24] 1631 	sjmp	00103$
      000289                       1632 00167$:
      000289 BF 34 01         [24] 1633 	cjne	r7,#0x34,00168$
      00028C 22               [24] 1634 	ret
      00028D                       1635 00168$:
      00028D BF 50 02         [24] 1636 	cjne	r7,#0x50,00169$
      000290 80 49            [24] 1637 	sjmp	00106$
      000292                       1638 00169$:
      000292 BF 53 03         [24] 1639 	cjne	r7,#0x53,00170$
      000295 02r03r1B         [24] 1640 	ljmp	00110$
      000298                       1641 00170$:
      000298 BF 54 02         [24] 1642 	cjne	r7,#0x54,00171$
      00029B 80 5E            [24] 1643 	sjmp	00108$
      00029D                       1644 00171$:
      00029D BF 56 03         [24] 1645 	cjne	r7,#0x56,00172$
      0002A0 02r03r2B         [24] 1646 	ljmp	00112$
      0002A3                       1647 00172$:
      0002A3 BF 70 02         [24] 1648 	cjne	r7,#0x70,00173$
      0002A6 80 23            [24] 1649 	sjmp	00105$
      0002A8                       1650 00173$:
      0002A8 BF 73 02         [24] 1651 	cjne	r7,#0x73,00174$
      0002AB 80 5E            [24] 1652 	sjmp	00109$
      0002AD                       1653 00174$:
      0002AD BF 74 02         [24] 1654 	cjne	r7,#0x74,00175$
      0002B0 80 39            [24] 1655 	sjmp	00107$
      0002B2                       1656 00175$:
      0002B2 BF 76 03         [24] 1657 	cjne	r7,#0x76,00176$
      0002B5 02r03r2B         [24] 1658 	ljmp	00112$
      0002B8                       1659 00176$:
      0002B8 02r03r3B         [24] 1660 	ljmp	00113$
                                   1661 ;	src/main.c:325: case '3' :
      0002BB                       1662 00103$:
                                   1663 ;	src/main.c:326: printf_fast_f("Idle preamble on/off\r\n");
      0002BB 74r4B            [12] 1664 	mov	a,#___str_8
      0002BD C0 E0            [24] 1665 	push	acc
      0002BF 74s00            [12] 1666 	mov	a,#(___str_8 >> 8)
      0002C1 C0 E0            [24] 1667 	push	acc
      0002C3 12r00r00         [24] 1668 	lcall	_printf_fast_f
      0002C6 15 81            [12] 1669 	dec	sp
      0002C8 15 81            [12] 1670 	dec	sp
                                   1671 ;	src/main.c:327: break;
      0002CA 22               [24] 1672 	ret
                                   1673 ;	src/main.c:330: case 'p' :
      0002CB                       1674 00105$:
                                   1675 ;	src/main.c:331: printf_fast_f("LineFi Power Off\r\n");
      0002CB 74r62            [12] 1676 	mov	a,#___str_9
      0002CD C0 E0            [24] 1677 	push	acc
      0002CF 74s00            [12] 1678 	mov	a,#(___str_9 >> 8)
      0002D1 C0 E0            [24] 1679 	push	acc
      0002D3 12r00r00         [24] 1680 	lcall	_printf_fast_f
      0002D6 15 81            [12] 1681 	dec	sp
      0002D8 15 81            [12] 1682 	dec	sp
                                   1683 ;	src/main.c:332: break;
      0002DA 22               [24] 1684 	ret
                                   1685 ;	src/main.c:333: case 'P' :
      0002DB                       1686 00106$:
                                   1687 ;	src/main.c:334: printf_fast_f("LineFi Power On\r\n");
      0002DB 74r75            [12] 1688 	mov	a,#___str_10
      0002DD C0 E0            [24] 1689 	push	acc
      0002DF 74s00            [12] 1690 	mov	a,#(___str_10 >> 8)
      0002E1 C0 E0            [24] 1691 	push	acc
      0002E3 12r00r00         [24] 1692 	lcall	_printf_fast_f
      0002E6 15 81            [12] 1693 	dec	sp
      0002E8 15 81            [12] 1694 	dec	sp
                                   1695 ;	src/main.c:335: break;
      0002EA 22               [24] 1696 	ret
                                   1697 ;	src/main.c:336: case 't' :
      0002EB                       1698 00107$:
                                   1699 ;	src/main.c:337: printf_fast_f("LineFi Uart Tx Low\r\n");
      0002EB 74r87            [12] 1700 	mov	a,#___str_11
      0002ED C0 E0            [24] 1701 	push	acc
      0002EF 74s00            [12] 1702 	mov	a,#(___str_11 >> 8)
      0002F1 C0 E0            [24] 1703 	push	acc
      0002F3 12r00r00         [24] 1704 	lcall	_printf_fast_f
      0002F6 15 81            [12] 1705 	dec	sp
      0002F8 15 81            [12] 1706 	dec	sp
                                   1707 ;	src/main.c:338: break;
      0002FA 22               [24] 1708 	ret
                                   1709 ;	src/main.c:339: case 'T' :
      0002FB                       1710 00108$:
                                   1711 ;	src/main.c:340: printf_fast_f("LineFi Uart Tx High\r\n");
      0002FB 74r9C            [12] 1712 	mov	a,#___str_12
      0002FD C0 E0            [24] 1713 	push	acc
      0002FF 74s00            [12] 1714 	mov	a,#(___str_12 >> 8)
      000301 C0 E0            [24] 1715 	push	acc
      000303 12r00r00         [24] 1716 	lcall	_printf_fast_f
      000306 15 81            [12] 1717 	dec	sp
      000308 15 81            [12] 1718 	dec	sp
                                   1719 ;	src/main.c:341: break;
      00030A 22               [24] 1720 	ret
                                   1721 ;	src/main.c:342: case 's' :
      00030B                       1722 00109$:
                                   1723 ;	src/main.c:343: printf_fast_f("LineFi CSC rx FSM Off\r\n");
      00030B 74rB2            [12] 1724 	mov	a,#___str_13
      00030D C0 E0            [24] 1725 	push	acc
      00030F 74s00            [12] 1726 	mov	a,#(___str_13 >> 8)
      000311 C0 E0            [24] 1727 	push	acc
      000313 12r00r00         [24] 1728 	lcall	_printf_fast_f
      000316 15 81            [12] 1729 	dec	sp
      000318 15 81            [12] 1730 	dec	sp
                                   1731 ;	src/main.c:344: break;
      00031A 22               [24] 1732 	ret
                                   1733 ;	src/main.c:345: case 'S' :
      00031B                       1734 00110$:
                                   1735 ;	src/main.c:346: printf_fast_f("LineFi CSC rx FSM ON\r\n");
      00031B 74rCA            [12] 1736 	mov	a,#___str_14
      00031D C0 E0            [24] 1737 	push	acc
      00031F 74s00            [12] 1738 	mov	a,#(___str_14 >> 8)
      000321 C0 E0            [24] 1739 	push	acc
      000323 12r00r00         [24] 1740 	lcall	_printf_fast_f
      000326 15 81            [12] 1741 	dec	sp
      000328 15 81            [12] 1742 	dec	sp
                                   1743 ;	src/main.c:347: break;
                                   1744 ;	src/main.c:348: case 'v' : case 'V' :
      00032A 22               [24] 1745 	ret
      00032B                       1746 00112$:
                                   1747 ;	src/main.c:349: printf_fast_f(__VERSION__);
      00032B 74rE1            [12] 1748 	mov	a,#___str_15
      00032D C0 E0            [24] 1749 	push	acc
      00032F 74s00            [12] 1750 	mov	a,#(___str_15 >> 8)
      000331 C0 E0            [24] 1751 	push	acc
      000333 12r00r00         [24] 1752 	lcall	_printf_fast_f
      000336 15 81            [12] 1753 	dec	sp
      000338 15 81            [12] 1754 	dec	sp
                                   1755 ;	src/main.c:350: break;
                                   1756 ;	src/main.c:351: default :
      00033A 22               [24] 1757 	ret
      00033B                       1758 00113$:
                                   1759 ;	src/main.c:352: printf_fast_f("1: downlink packet 1\r\n");
      00033B 74rFB            [12] 1760 	mov	a,#___str_16
      00033D C0 E0            [24] 1761 	push	acc
      00033F 74s00            [12] 1762 	mov	a,#(___str_16 >> 8)
      000341 C0 E0            [24] 1763 	push	acc
      000343 12r00r00         [24] 1764 	lcall	_printf_fast_f
      000346 15 81            [12] 1765 	dec	sp
      000348 15 81            [12] 1766 	dec	sp
                                   1767 ;	src/main.c:353: printf_fast_f("2: downlink packet 2\r\n");
      00034A 74r12            [12] 1768 	mov	a,#___str_17
      00034C C0 E0            [24] 1769 	push	acc
      00034E 74s01            [12] 1770 	mov	a,#(___str_17 >> 8)
      000350 C0 E0            [24] 1771 	push	acc
      000352 12r00r00         [24] 1772 	lcall	_printf_fast_f
      000355 15 81            [12] 1773 	dec	sp
      000357 15 81            [12] 1774 	dec	sp
                                   1775 ;	src/main.c:354: printf_fast_f("3: uplink idle preamble on/off\r\n");
      000359 74r29            [12] 1776 	mov	a,#___str_18
      00035B C0 E0            [24] 1777 	push	acc
      00035D 74s01            [12] 1778 	mov	a,#(___str_18 >> 8)
      00035F C0 E0            [24] 1779 	push	acc
      000361 12r00r00         [24] 1780 	lcall	_printf_fast_f
      000364 15 81            [12] 1781 	dec	sp
      000366 15 81            [12] 1782 	dec	sp
                                   1783 ;	src/main.c:355: printf_fast_f("p/P: LineFi Power off/on\r\n");
      000368 74r4A            [12] 1784 	mov	a,#___str_19
      00036A C0 E0            [24] 1785 	push	acc
      00036C 74s01            [12] 1786 	mov	a,#(___str_19 >> 8)
      00036E C0 E0            [24] 1787 	push	acc
      000370 12r00r00         [24] 1788 	lcall	_printf_fast_f
      000373 15 81            [12] 1789 	dec	sp
      000375 15 81            [12] 1790 	dec	sp
                                   1791 ;	src/main.c:356: printf_fast_f("t/T: LineFi Uart Tx Low/High\r\n");
      000377 74r65            [12] 1792 	mov	a,#___str_20
      000379 C0 E0            [24] 1793 	push	acc
      00037B 74s01            [12] 1794 	mov	a,#(___str_20 >> 8)
      00037D C0 E0            [24] 1795 	push	acc
      00037F 12r00r00         [24] 1796 	lcall	_printf_fast_f
      000382 15 81            [12] 1797 	dec	sp
      000384 15 81            [12] 1798 	dec	sp
                                   1799 ;	src/main.c:357: printf_fast_f("s/S: LineFie CSC Rx FSM off/on\r\n");
      000386 74r84            [12] 1800 	mov	a,#___str_21
      000388 C0 E0            [24] 1801 	push	acc
      00038A 74s01            [12] 1802 	mov	a,#(___str_21 >> 8)
      00038C C0 E0            [24] 1803 	push	acc
      00038E 12r00r00         [24] 1804 	lcall	_printf_fast_f
      000391 15 81            [12] 1805 	dec	sp
      000393 15 81            [12] 1806 	dec	sp
                                   1807 ;	src/main.c:358: printf_fast_f("test procedure: p -> P -> T -> S -> 1 or 2\r\n");
      000395 74rA5            [12] 1808 	mov	a,#___str_22
      000397 C0 E0            [24] 1809 	push	acc
      000399 74s01            [12] 1810 	mov	a,#(___str_22 >> 8)
      00039B C0 E0            [24] 1811 	push	acc
      00039D 12r00r00         [24] 1812 	lcall	_printf_fast_f
      0003A0 15 81            [12] 1813 	dec	sp
      0003A2 15 81            [12] 1814 	dec	sp
                                   1815 ;	src/main.c:360: }
                                   1816 ;	src/main.c:361: }
      0003A4 22               [24] 1817 	ret
                                   1818 ;------------------------------------------------------------
                                   1819 ;Allocation info for local variables in function 'gpio_setup'
                                   1820 ;------------------------------------------------------------
                                   1821 ;	src/main.c:363: void gpio_setup()
                                   1822 ;	-----------------------------------------
                                   1823 ;	 function gpio_setup
                                   1824 ;	-----------------------------------------
      0003A5                       1825 _gpio_setup:
                                   1826 ;	src/main.c:391: Set_All_GPIO_Quasi_Mode;
      0003A5 75 B1 00         [24] 1827 	mov	_P0M1,#0x00
      0003A8 75 B2 00         [24] 1828 	mov	_P0M2,#0x00
      0003AB 75 B3 00         [24] 1829 	mov	_P1M1,#0x00
      0003AE 75 B4 00         [24] 1830 	mov	_P1M2,#0x00
      0003B1 75 AC 00         [24] 1831 	mov	_P3M1,#0x00
      0003B4 75 AD 00         [24] 1832 	mov	_P3M2,#0x00
                                   1833 ;	src/main.c:393: P13_Input_Mode;
      0003B7 43 B3 08         [24] 1834 	orl	_P1M1,#0x08
      0003BA 53 B4 F7         [24] 1835 	anl	_P1M2,#0xf7
                                   1836 ;	src/main.c:394: P30_Input_Mode;
      0003BD 43 AC 01         [24] 1837 	orl	_P3M1,#0x01
      0003C0 53 AD FE         [24] 1838 	anl	_P3M2,#0xfe
                                   1839 ;	src/main.c:395: P17_Input_Mode;
      0003C3 43 B3 80         [24] 1840 	orl	_P1M1,#0x80
      0003C6 53 B4 7F         [24] 1841 	anl	_P1M2,#0x7f
                                   1842 ;	src/main.c:396: P00_Input_Mode;
      0003C9 43 B1 01         [24] 1843 	orl	_P0M1,#0x01
      0003CC 53 B2 FE         [24] 1844 	anl	_P0M2,#0xfe
                                   1845 ;	src/main.c:397: P15_Input_Mode;
      0003CF 43 B3 20         [24] 1846 	orl	_P1M1,#0x20
      0003D2 53 B4 DF         [24] 1847 	anl	_P1M2,#0xdf
                                   1848 ;	src/main.c:399: P05_Input_Mode; // rx_level1
      0003D5 43 B1 20         [24] 1849 	orl	_P0M1,#0x20
      0003D8 53 B2 DF         [24] 1850 	anl	_P0M2,#0xdf
                                   1851 ;	src/main.c:400: P04_Input_Mode; // rx_level2
      0003DB 43 B1 10         [24] 1852 	orl	_P0M1,#0x10
      0003DE 53 B2 EF         [24] 1853 	anl	_P0M2,#0xef
                                   1854 ;	src/main.c:402: P10_PushPull_Mode; // line fi enable
      0003E1 53 B3 FE         [24] 1855 	anl	_P1M1,#0xfe
      0003E4 43 B4 01         [24] 1856 	orl	_P1M2,#0x01
                                   1857 ;	src/main.c:403: P11_PushPull_Mode; // line fi enable1
      0003E7 53 B3 FD         [24] 1858 	anl	_P1M1,#0xfd
      0003EA 43 B4 02         [24] 1859 	orl	_P1M2,#0x02
                                   1860 ;	src/main.c:404: P12_PushPull_Mode; // line fi enable2
      0003ED 53 B3 FB         [24] 1861 	anl	_P1M1,#0xfb
      0003F0 43 B4 04         [24] 1862 	orl	_P1M2,#0x04
                                   1863 ;	src/main.c:405: LINEFI_EN0 = 0;
                                   1864 ;	assignBit
      0003F3 C2 90            [12] 1865 	clr	_P10
                                   1866 ;	src/main.c:406: LINEFI_EN1 = 0;
                                   1867 ;	assignBit
      0003F5 C2 91            [12] 1868 	clr	_P11
                                   1869 ;	src/main.c:407: LINEFI_EN2 = 0;
                                   1870 ;	assignBit
      0003F7 C2 92            [12] 1871 	clr	_P12
                                   1872 ;	src/main.c:408: }
      0003F9 22               [24] 1873 	ret
                                   1874 ;------------------------------------------------------------
                                   1875 ;Allocation info for local variables in function 'state_switches'
                                   1876 ;------------------------------------------------------------
                                   1877 ;su8PrevSW                 Allocated with name '_state_switches_su8PrevSW_65536_83'
                                   1878 ;apu8SwNum                 Allocated with name '_state_switches_PARM_2'
                                   1879 ;au8SW                     Allocated to registers r7 
                                   1880 ;i                         Allocated to registers r2 
                                   1881 ;u8Result                  Allocated to registers r6 
                                   1882 ;------------------------------------------------------------
                                   1883 ;	src/main.c:426: UINT8 state_switches(UINT8 au8SW, UINT8 *apu8SwNum)
                                   1884 ;	-----------------------------------------
                                   1885 ;	 function state_switches
                                   1886 ;	-----------------------------------------
      0003FA                       1887 _state_switches:
      0003FA AF 82            [24] 1888 	mov	r7,dpl
                                   1889 ;	src/main.c:431: UINT8 u8Result = SW_NONE;
      0003FC 7E 04            [12] 1890 	mov	r6,#0x04
                                   1891 ;	src/main.c:432: if (su8PrevSW == au8SW) {
      0003FE EF               [12] 1892 	mov	a,r7
      0003FF B5*04 14         [24] 1893 	cjne	a,_state_switches_su8PrevSW_65536_83,00102$
                                   1894 ;	src/main.c:433: *apu8SwNum = 0;
      000402 AB*00            [24] 1895 	mov	r3,_state_switches_PARM_2
      000404 AC*01            [24] 1896 	mov	r4,(_state_switches_PARM_2 + 1)
      000406 AD*02            [24] 1897 	mov	r5,(_state_switches_PARM_2 + 2)
      000408 8B 82            [24] 1898 	mov	dpl,r3
      00040A 8C 83            [24] 1899 	mov	dph,r4
      00040C 8D F0            [24] 1900 	mov	b,r5
      00040E E4               [12] 1901 	clr	a
      00040F 12r00r00         [24] 1902 	lcall	__gptrput
                                   1903 ;	src/main.c:434: return SW_NONE;
      000412 75 82 04         [24] 1904 	mov	dpl,#0x04
      000415 22               [24] 1905 	ret
      000416                       1906 00102$:
                                   1907 ;	src/main.c:442: *apu8SwNum = 0;
      000416 AB*00            [24] 1908 	mov	r3,_state_switches_PARM_2
      000418 AC*01            [24] 1909 	mov	r4,(_state_switches_PARM_2 + 1)
      00041A AD*02            [24] 1910 	mov	r5,(_state_switches_PARM_2 + 2)
      00041C 8B 82            [24] 1911 	mov	dpl,r3
      00041E 8C 83            [24] 1912 	mov	dph,r4
      000420 8D F0            [24] 1913 	mov	b,r5
      000422 E4               [12] 1914 	clr	a
      000423 12r00r00         [24] 1915 	lcall	__gptrput
                                   1916 ;	src/main.c:444: for (i=0;i<5;i++) {
      000426 7A 00            [12] 1917 	mov	r2,#0x00
      000428                       1918 00113$:
                                   1919 ;	src/main.c:445: switch((su8PrevSW>>i)&1) {
      000428 8A F0            [24] 1920 	mov	b,r2
      00042A 05 F0            [12] 1921 	inc	b
      00042C E5*04            [12] 1922 	mov	a,_state_switches_su8PrevSW_65536_83
      00042E 80 02            [24] 1923 	sjmp	00153$
      000430                       1924 00152$:
      000430 C3               [12] 1925 	clr	c
      000431 13               [12] 1926 	rrc	a
      000432                       1927 00153$:
      000432 D5 F0 FB         [24] 1928 	djnz	b,00152$
      000435 F8               [12] 1929 	mov	r0,a
      000436 53 00 01         [24] 1930 	anl	ar0,#0x01
      000439 79 00            [12] 1931 	mov	r1,#0x00
      00043B B8 00 05         [24] 1932 	cjne	r0,#0x00,00154$
      00043E B9 00 02         [24] 1933 	cjne	r1,#0x00,00154$
      000441 80 54            [24] 1934 	sjmp	00107$
      000443                       1935 00154$:
      000443 B8 01 05         [24] 1936 	cjne	r0,#0x01,00155$
      000446 B9 00 02         [24] 1937 	cjne	r1,#0x00,00155$
      000449 80 03            [24] 1938 	sjmp	00156$
      00044B                       1939 00155$:
      00044B 02r04rE1         [24] 1940 	ljmp	00114$
      00044E                       1941 00156$:
                                   1942 ;	src/main.c:447: switch((au8SW>>i)&1) {
      00044E 8A F0            [24] 1943 	mov	b,r2
      000450 05 F0            [12] 1944 	inc	b
      000452 EF               [12] 1945 	mov	a,r7
      000453 80 02            [24] 1946 	sjmp	00158$
      000455                       1947 00157$:
      000455 C3               [12] 1948 	clr	c
      000456 13               [12] 1949 	rrc	a
      000457                       1950 00158$:
      000457 D5 F0 FB         [24] 1951 	djnz	b,00157$
      00045A F8               [12] 1952 	mov	r0,a
      00045B 53 00 01         [24] 1953 	anl	ar0,#0x01
      00045E 79 00            [12] 1954 	mov	r1,#0x00
      000460 B8 00 05         [24] 1955 	cjne	r0,#0x00,00159$
      000463 B9 00 02         [24] 1956 	cjne	r1,#0x00,00159$
      000466 80 03            [24] 1957 	sjmp	00160$
      000468                       1958 00159$:
      000468 02r04rE1         [24] 1959 	ljmp	00114$
      00046B                       1960 00160$:
                                   1961 ;	src/main.c:451: su8PrevSW = au8SW;
      00046B 8F*04            [24] 1962 	mov	_state_switches_su8PrevSW_65536_83,r7
                                   1963 ;	src/main.c:452: *apu8SwNum |= 1<<i;
      00046D 8B 82            [24] 1964 	mov	dpl,r3
      00046F 8C 83            [24] 1965 	mov	dph,r4
      000471 8D F0            [24] 1966 	mov	b,r5
      000473 12r00r00         [24] 1967 	lcall	__gptrget
      000476 F9               [12] 1968 	mov	r1,a
      000477 8A 00            [24] 1969 	mov	ar0,r2
      000479 88 F0            [24] 1970 	mov	b,r0
      00047B 05 F0            [12] 1971 	inc	b
      00047D 74 01            [12] 1972 	mov	a,#0x01
      00047F 80 02            [24] 1973 	sjmp	00163$
      000481                       1974 00161$:
      000481 25 E0            [12] 1975 	add	a,acc
      000483                       1976 00163$:
      000483 D5 F0 FB         [24] 1977 	djnz	b,00161$
      000486 F8               [12] 1978 	mov	r0,a
      000487 42 01            [12] 1979 	orl	ar1,a
      000489 8B 82            [24] 1980 	mov	dpl,r3
      00048B 8C 83            [24] 1981 	mov	dph,r4
      00048D 8D F0            [24] 1982 	mov	b,r5
      00048F E9               [12] 1983 	mov	a,r1
      000490 12r00r00         [24] 1984 	lcall	__gptrput
                                   1985 ;	src/main.c:453: u8Result = SW_OFF;
      000493 7E 00            [12] 1986 	mov	r6,#0x00
                                   1987 ;	src/main.c:457: break;
                                   1988 ;	src/main.c:458: case SW_OFF :
      000495 80 4A            [24] 1989 	sjmp	00114$
      000497                       1990 00107$:
                                   1991 ;	src/main.c:459: switch((au8SW>>i)&1) {
      000497 8A F0            [24] 1992 	mov	b,r2
      000499 05 F0            [12] 1993 	inc	b
      00049B EF               [12] 1994 	mov	a,r7
      00049C 80 02            [24] 1995 	sjmp	00165$
      00049E                       1996 00164$:
      00049E C3               [12] 1997 	clr	c
      00049F 13               [12] 1998 	rrc	a
      0004A0                       1999 00165$:
      0004A0 D5 F0 FB         [24] 2000 	djnz	b,00164$
      0004A3 F8               [12] 2001 	mov	r0,a
      0004A4 53 00 01         [24] 2002 	anl	ar0,#0x01
      0004A7 79 00            [12] 2003 	mov	r1,#0x00
      0004A9 B8 00 05         [24] 2004 	cjne	r0,#0x00,00166$
      0004AC B9 00 02         [24] 2005 	cjne	r1,#0x00,00166$
      0004AF 80 30            [24] 2006 	sjmp	00114$
      0004B1                       2007 00166$:
      0004B1 B8 01 2D         [24] 2008 	cjne	r0,#0x01,00114$
      0004B4 B9 00 2A         [24] 2009 	cjne	r1,#0x00,00114$
                                   2010 ;	src/main.c:461: su8PrevSW = au8SW;
      0004B7 8F*04            [24] 2011 	mov	_state_switches_su8PrevSW_65536_83,r7
                                   2012 ;	src/main.c:462: *apu8SwNum |= 1<<i;
      0004B9 8B 82            [24] 2013 	mov	dpl,r3
      0004BB 8C 83            [24] 2014 	mov	dph,r4
      0004BD 8D F0            [24] 2015 	mov	b,r5
      0004BF 12r00r00         [24] 2016 	lcall	__gptrget
      0004C2 F9               [12] 2017 	mov	r1,a
      0004C3 8A 00            [24] 2018 	mov	ar0,r2
      0004C5 88 F0            [24] 2019 	mov	b,r0
      0004C7 05 F0            [12] 2020 	inc	b
      0004C9 74 01            [12] 2021 	mov	a,#0x01
      0004CB 80 02            [24] 2022 	sjmp	00171$
      0004CD                       2023 00169$:
      0004CD 25 E0            [12] 2024 	add	a,acc
      0004CF                       2025 00171$:
      0004CF D5 F0 FB         [24] 2026 	djnz	b,00169$
      0004D2 F8               [12] 2027 	mov	r0,a
      0004D3 42 01            [12] 2028 	orl	ar1,a
      0004D5 8B 82            [24] 2029 	mov	dpl,r3
      0004D7 8C 83            [24] 2030 	mov	dph,r4
      0004D9 8D F0            [24] 2031 	mov	b,r5
      0004DB E9               [12] 2032 	mov	a,r1
      0004DC 12r00r00         [24] 2033 	lcall	__gptrput
                                   2034 ;	src/main.c:463: u8Result = SW_ON;
      0004DF 7E 01            [12] 2035 	mov	r6,#0x01
                                   2036 ;	src/main.c:471: }
      0004E1                       2037 00114$:
                                   2038 ;	src/main.c:444: for (i=0;i<5;i++) {
      0004E1 0A               [12] 2039 	inc	r2
      0004E2 BA 05 00         [24] 2040 	cjne	r2,#0x05,00172$
      0004E5                       2041 00172$:
      0004E5 50 03            [24] 2042 	jnc	00173$
      0004E7 02r04r28         [24] 2043 	ljmp	00113$
      0004EA                       2044 00173$:
                                   2045 ;	src/main.c:475: return u8Result;
      0004EA 8E 82            [24] 2046 	mov	dpl,r6
                                   2047 ;	src/main.c:563: }
      0004EC 22               [24] 2048 	ret
                                   2049 ;------------------------------------------------------------
                                   2050 ;Allocation info for local variables in function 'printoutbuf'
                                   2051 ;------------------------------------------------------------
                                   2052 ;apcBuf                    Allocated with name '_printoutbuf_PARM_2'
                                   2053 ;aucBufIdx                 Allocated to registers r7 
                                   2054 ;i                         Allocated with name '_printoutbuf_i_65536_91'
                                   2055 ;------------------------------------------------------------
                                   2056 ;	src/main.c:567: void printoutbuf(uint8 aucBufIdx, char * apcBuf)
                                   2057 ;	-----------------------------------------
                                   2058 ;	 function printoutbuf
                                   2059 ;	-----------------------------------------
      0004ED                       2060 _printoutbuf:
      0004ED AF 82            [24] 2061 	mov	r7,dpl
                                   2062 ;	src/main.c:570: for (i=0;i<aucBufIdx;i++) {
      0004EF AC*05            [24] 2063 	mov	r4,_printoutbuf_PARM_2
      0004F1 AD*06            [24] 2064 	mov	r5,(_printoutbuf_PARM_2 + 1)
      0004F3 AE*07            [24] 2065 	mov	r6,(_printoutbuf_PARM_2 + 2)
      0004F5 7B 00            [12] 2066 	mov	r3,#0x00
      0004F7                       2067 00103$:
      0004F7 C3               [12] 2068 	clr	c
      0004F8 EB               [12] 2069 	mov	a,r3
      0004F9 9F               [12] 2070 	subb	a,r7
      0004FA 50 3F            [24] 2071 	jnc	00101$
                                   2072 ;	src/main.c:571: printf_fast_f("%c", *apcBuf++);
      0004FC 8C 82            [24] 2073 	mov	dpl,r4
      0004FE 8D 83            [24] 2074 	mov	dph,r5
      000500 8E F0            [24] 2075 	mov	b,r6
      000502 12r00r00         [24] 2076 	lcall	__gptrget
      000505 FA               [12] 2077 	mov	r2,a
      000506 A3               [24] 2078 	inc	dptr
      000507 AC 82            [24] 2079 	mov	r4,dpl
      000509 AD 83            [24] 2080 	mov	r5,dph
      00050B 8A 01            [24] 2081 	mov	ar1,r2
      00050D 7A 00            [12] 2082 	mov	r2,#0x00
      00050F C0 07            [24] 2083 	push	ar7
      000511 C0 06            [24] 2084 	push	ar6
      000513 C0 05            [24] 2085 	push	ar5
      000515 C0 04            [24] 2086 	push	ar4
      000517 C0 03            [24] 2087 	push	ar3
      000519 C0 01            [24] 2088 	push	ar1
      00051B C0 02            [24] 2089 	push	ar2
      00051D 74r31            [12] 2090 	mov	a,#___str_6
      00051F C0 E0            [24] 2091 	push	acc
      000521 74s00            [12] 2092 	mov	a,#(___str_6 >> 8)
      000523 C0 E0            [24] 2093 	push	acc
      000525 12r00r00         [24] 2094 	lcall	_printf_fast_f
      000528 E5 81            [12] 2095 	mov	a,sp
      00052A 24 FC            [12] 2096 	add	a,#0xfc
      00052C F5 81            [12] 2097 	mov	sp,a
      00052E D0 03            [24] 2098 	pop	ar3
      000530 D0 04            [24] 2099 	pop	ar4
      000532 D0 05            [24] 2100 	pop	ar5
      000534 D0 06            [24] 2101 	pop	ar6
      000536 D0 07            [24] 2102 	pop	ar7
                                   2103 ;	src/main.c:570: for (i=0;i<aucBufIdx;i++) {
      000538 0B               [12] 2104 	inc	r3
      000539 80 BC            [24] 2105 	sjmp	00103$
      00053B                       2106 00101$:
                                   2107 ;	src/main.c:573: printf_fast_f("\r\n");
      00053B 74r2E            [12] 2108 	mov	a,#___str_5
      00053D C0 E0            [24] 2109 	push	acc
      00053F 74s00            [12] 2110 	mov	a,#(___str_5 >> 8)
      000541 C0 E0            [24] 2111 	push	acc
      000543 12r00r00         [24] 2112 	lcall	_printf_fast_f
      000546 15 81            [12] 2113 	dec	sp
      000548 15 81            [12] 2114 	dec	sp
                                   2115 ;	src/main.c:574: }
      00054A 22               [24] 2116 	ret
                                   2117 ;------------------------------------------------------------
                                   2118 ;Allocation info for local variables in function 'print_help'
                                   2119 ;------------------------------------------------------------
                                   2120 ;	src/main.c:577: void print_help()
                                   2121 ;	-----------------------------------------
                                   2122 ;	 function print_help
                                   2123 ;	-----------------------------------------
      00054B                       2124 _print_help:
                                   2125 ;	src/main.c:579: printf_fast_f("t: timer\r\n");
      00054B 74rD2            [12] 2126 	mov	a,#___str_23
      00054D C0 E0            [24] 2127 	push	acc
      00054F 74s01            [12] 2128 	mov	a,#(___str_23 >> 8)
      000551 C0 E0            [24] 2129 	push	acc
      000553 12r00r00         [24] 2130 	lcall	_printf_fast_f
      000556 15 81            [12] 2131 	dec	sp
      000558 15 81            [12] 2132 	dec	sp
                                   2133 ;	src/main.c:580: printf_fast_f("0: LineFi EN0,1,2 off\r\n");
      00055A 74rDD            [12] 2134 	mov	a,#___str_24
      00055C C0 E0            [24] 2135 	push	acc
      00055E 74s01            [12] 2136 	mov	a,#(___str_24 >> 8)
      000560 C0 E0            [24] 2137 	push	acc
      000562 12r00r00         [24] 2138 	lcall	_printf_fast_f
      000565 15 81            [12] 2139 	dec	sp
      000567 15 81            [12] 2140 	dec	sp
                                   2141 ;	src/main.c:581: printf_fast_f("1: LineFi EN0 = 1\r\n");
      000569 74rF5            [12] 2142 	mov	a,#___str_25
      00056B C0 E0            [24] 2143 	push	acc
      00056D 74s01            [12] 2144 	mov	a,#(___str_25 >> 8)
      00056F C0 E0            [24] 2145 	push	acc
      000571 12r00r00         [24] 2146 	lcall	_printf_fast_f
      000574 15 81            [12] 2147 	dec	sp
      000576 15 81            [12] 2148 	dec	sp
                                   2149 ;	src/main.c:582: printf_fast_f("2:\r\n");
      000578 74r09            [12] 2150 	mov	a,#___str_26
      00057A C0 E0            [24] 2151 	push	acc
      00057C 74s02            [12] 2152 	mov	a,#(___str_26 >> 8)
      00057E C0 E0            [24] 2153 	push	acc
      000580 12r00r00         [24] 2154 	lcall	_printf_fast_f
      000583 15 81            [12] 2155 	dec	sp
      000585 15 81            [12] 2156 	dec	sp
                                   2157 ;	src/main.c:583: printf_fast_f("3:\r\n");
      000587 74r0E            [12] 2158 	mov	a,#___str_27
      000589 C0 E0            [24] 2159 	push	acc
      00058B 74s02            [12] 2160 	mov	a,#(___str_27 >> 8)
      00058D C0 E0            [24] 2161 	push	acc
      00058F 12r00r00         [24] 2162 	lcall	_printf_fast_f
      000592 15 81            [12] 2163 	dec	sp
      000594 15 81            [12] 2164 	dec	sp
                                   2165 ;	src/main.c:584: printf_fast_f("4:\r\n");
      000596 74r13            [12] 2166 	mov	a,#___str_28
      000598 C0 E0            [24] 2167 	push	acc
      00059A 74s02            [12] 2168 	mov	a,#(___str_28 >> 8)
      00059C C0 E0            [24] 2169 	push	acc
      00059E 12r00r00         [24] 2170 	lcall	_printf_fast_f
      0005A1 15 81            [12] 2171 	dec	sp
      0005A3 15 81            [12] 2172 	dec	sp
                                   2173 ;	src/main.c:585: printf_fast_f("5:\r\n");
      0005A5 74r18            [12] 2174 	mov	a,#___str_29
      0005A7 C0 E0            [24] 2175 	push	acc
      0005A9 74s02            [12] 2176 	mov	a,#(___str_29 >> 8)
      0005AB C0 E0            [24] 2177 	push	acc
      0005AD 12r00r00         [24] 2178 	lcall	_printf_fast_f
      0005B0 15 81            [12] 2179 	dec	sp
      0005B2 15 81            [12] 2180 	dec	sp
                                   2181 ;	src/main.c:586: printf_fast_f("6:\r\n");
      0005B4 74r1D            [12] 2182 	mov	a,#___str_30
      0005B6 C0 E0            [24] 2183 	push	acc
      0005B8 74s02            [12] 2184 	mov	a,#(___str_30 >> 8)
      0005BA C0 E0            [24] 2185 	push	acc
      0005BC 12r00r00         [24] 2186 	lcall	_printf_fast_f
      0005BF 15 81            [12] 2187 	dec	sp
      0005C1 15 81            [12] 2188 	dec	sp
                                   2189 ;	src/main.c:587: printf_fast_f("7:\r\n");
      0005C3 74r22            [12] 2190 	mov	a,#___str_31
      0005C5 C0 E0            [24] 2191 	push	acc
      0005C7 74s02            [12] 2192 	mov	a,#(___str_31 >> 8)
      0005C9 C0 E0            [24] 2193 	push	acc
      0005CB 12r00r00         [24] 2194 	lcall	_printf_fast_f
      0005CE 15 81            [12] 2195 	dec	sp
      0005D0 15 81            [12] 2196 	dec	sp
                                   2197 ;	src/main.c:588: printf_fast_f("h: Addr--\r\n");
      0005D2 74r27            [12] 2198 	mov	a,#___str_32
      0005D4 C0 E0            [24] 2199 	push	acc
      0005D6 74s02            [12] 2200 	mov	a,#(___str_32 >> 8)
      0005D8 C0 E0            [24] 2201 	push	acc
      0005DA 12r00r00         [24] 2202 	lcall	_printf_fast_f
      0005DD 15 81            [12] 2203 	dec	sp
      0005DF 15 81            [12] 2204 	dec	sp
                                   2205 ;	src/main.c:589: printf_fast_f("j: Cmd--\r\n");
      0005E1 74r33            [12] 2206 	mov	a,#___str_33
      0005E3 C0 E0            [24] 2207 	push	acc
      0005E5 74s02            [12] 2208 	mov	a,#(___str_33 >> 8)
      0005E7 C0 E0            [24] 2209 	push	acc
      0005E9 12r00r00         [24] 2210 	lcall	_printf_fast_f
      0005EC 15 81            [12] 2211 	dec	sp
      0005EE 15 81            [12] 2212 	dec	sp
                                   2213 ;	src/main.c:590: printf_fast_f("k: Cmd++\r\n");
      0005F0 74r3E            [12] 2214 	mov	a,#___str_34
      0005F2 C0 E0            [24] 2215 	push	acc
      0005F4 74s02            [12] 2216 	mov	a,#(___str_34 >> 8)
      0005F6 C0 E0            [24] 2217 	push	acc
      0005F8 12r00r00         [24] 2218 	lcall	_printf_fast_f
      0005FB 15 81            [12] 2219 	dec	sp
      0005FD 15 81            [12] 2220 	dec	sp
                                   2221 ;	src/main.c:591: printf_fast_f("l: Addr++\r\n");
      0005FF 74r49            [12] 2222 	mov	a,#___str_35
      000601 C0 E0            [24] 2223 	push	acc
      000603 74s02            [12] 2224 	mov	a,#(___str_35 >> 8)
      000605 C0 E0            [24] 2225 	push	acc
      000607 12r00r00         [24] 2226 	lcall	_printf_fast_f
      00060A 15 81            [12] 2227 	dec	sp
      00060C 15 81            [12] 2228 	dec	sp
                                   2229 ;	src/main.c:592: printf_fast_f("s: sending\r\n");
      00060E 74r55            [12] 2230 	mov	a,#___str_36
      000610 C0 E0            [24] 2231 	push	acc
      000612 74s02            [12] 2232 	mov	a,#(___str_36 >> 8)
      000614 C0 E0            [24] 2233 	push	acc
      000616 12r00r00         [24] 2234 	lcall	_printf_fast_f
      000619 15 81            [12] 2235 	dec	sp
      00061B 15 81            [12] 2236 	dec	sp
                                   2237 ;	src/main.c:593: }
      00061D 22               [24] 2238 	ret
                                   2239 ;------------------------------------------------------------
                                   2240 ;Allocation info for local variables in function 'act_by_one_key'
                                   2241 ;------------------------------------------------------------
                                   2242 ;apu8LineFiCmd             Allocated with name '_act_by_one_key_PARM_2'
                                   2243 ;apu8LineFiAddr            Allocated with name '_act_by_one_key_PARM_3'
                                   2244 ;au8RxUART                 Allocated to registers r7 
                                   2245 ;sloc0                     Allocated with name '_act_by_one_key_sloc0_1_0'
                                   2246 ;u8Data                    Allocated with name '_act_by_one_key_u8Data_65536_96'
                                   2247 ;------------------------------------------------------------
                                   2248 ;	src/main.c:595: void act_by_one_key(uint8 au8RxUART, uint8 * apu8LineFiCmd, uint8 * apu8LineFiAddr)
                                   2249 ;	-----------------------------------------
                                   2250 ;	 function act_by_one_key
                                   2251 ;	-----------------------------------------
      00061E                       2252 _act_by_one_key:
      00061E AF 82            [24] 2253 	mov	r7,dpl
                                   2254 ;	src/main.c:598: switch(au8RxUART) {
      000620 BF 2B 03         [24] 2255 	cjne	r7,#0x2b,00246$
      000623 02r0BrBF         [24] 2256 	ljmp	00129$
      000626                       2257 00246$:
      000626 BF 2D 03         [24] 2258 	cjne	r7,#0x2d,00247$
      000629 02r0BrE4         [24] 2259 	ljmp	00130$
      00062C                       2260 00247$:
      00062C BF 30 03         [24] 2261 	cjne	r7,#0x30,00248$
      00062F 02r06rC7         [24] 2262 	ljmp	00102$
      000632                       2263 00248$:
      000632 BF 31 03         [24] 2264 	cjne	r7,#0x31,00249$
      000635 02r06rE0         [24] 2265 	ljmp	00103$
      000638                       2266 00249$:
      000638 BF 32 03         [24] 2267 	cjne	r7,#0x32,00250$
      00063B 02r06rF5         [24] 2268 	ljmp	00104$
      00063E                       2269 00250$:
      00063E BF 33 03         [24] 2270 	cjne	r7,#0x33,00251$
      000641 02r07r0A         [24] 2271 	ljmp	00105$
      000644                       2272 00251$:
      000644 BF 34 03         [24] 2273 	cjne	r7,#0x34,00252$
      000647 02r07r1F         [24] 2274 	ljmp	00106$
      00064A                       2275 00252$:
      00064A BF 35 03         [24] 2276 	cjne	r7,#0x35,00253$
      00064D 02r07r41         [24] 2277 	ljmp	00107$
      000650                       2278 00253$:
      000650 BF 36 03         [24] 2279 	cjne	r7,#0x36,00254$
      000653 02r07r77         [24] 2280 	ljmp	00110$
      000656                       2281 00254$:
      000656 BF 37 03         [24] 2282 	cjne	r7,#0x37,00255$
      000659 02r07rA5         [24] 2283 	ljmp	00111$
      00065C                       2284 00255$:
      00065C BF 48 03         [24] 2285 	cjne	r7,#0x48,00256$
      00065F 02r05r4B         [24] 2286 	ljmp	_print_help
      000662                       2287 00256$:
      000662 BF 53 03         [24] 2288 	cjne	r7,#0x53,00257$
      000665 02r0Br95         [24] 2289 	ljmp	00128$
      000668                       2290 00257$:
      000668 BF 61 03         [24] 2291 	cjne	r7,#0x61,00258$
      00066B 02r0Cr08         [24] 2292 	ljmp	00131$
      00066E                       2293 00258$:
      00066E BF 62 03         [24] 2294 	cjne	r7,#0x62,00259$
      000671 02r0Cr0E         [24] 2295 	ljmp	00132$
      000674                       2296 00259$:
      000674 BF 63 03         [24] 2297 	cjne	r7,#0x63,00260$
      000677 02r0Cr14         [24] 2298 	ljmp	00133$
      00067A                       2299 00260$:
      00067A BF 68 03         [24] 2300 	cjne	r7,#0x68,00261$
      00067D 02r07rD3         [24] 2301 	ljmp	00112$
      000680                       2302 00261$:
      000680 BF 6A 03         [24] 2303 	cjne	r7,#0x6a,00262$
      000683 02r08r5F         [24] 2304 	ljmp	00116$
      000686                       2305 00262$:
      000686 BF 6B 03         [24] 2306 	cjne	r7,#0x6b,00263$
      000689 02r08r92         [24] 2307 	ljmp	00117$
      00068C                       2308 00263$:
      00068C BF 6C 03         [24] 2309 	cjne	r7,#0x6c,00264$
      00068F 02r08rC5         [24] 2310 	ljmp	00118$
      000692                       2311 00264$:
      000692 BF 73 03         [24] 2312 	cjne	r7,#0x73,00265$
      000695 02r09r51         [24] 2313 	ljmp	00122$
      000698                       2314 00265$:
      000698 BF 74 02         [24] 2315 	cjne	r7,#0x74,00266$
      00069B 80 07            [24] 2316 	sjmp	00101$
      00069D                       2317 00266$:
      00069D BF 75 03         [24] 2318 	cjne	r7,#0x75,00267$
      0006A0 02r0Br1E         [24] 2319 	ljmp	00127$
      0006A3                       2320 00267$:
      0006A3 22               [24] 2321 	ret
                                   2322 ;	src/main.c:599: case 't' : // 1msec 카운터 확인, 5초에 40,000
      0006A4                       2323 00101$:
                                   2324 ;	src/main.c:600: printf_fast_f("%u\n\r", gu16TimeCnt);
      0006A4 90r00r34         [24] 2325 	mov	dptr,#_gu16TimeCnt
      0006A7 E0               [24] 2326 	movx	a,@dptr
      0006A8 C0 E0            [24] 2327 	push	acc
      0006AA A3               [24] 2328 	inc	dptr
      0006AB E0               [24] 2329 	movx	a,@dptr
      0006AC C0 E0            [24] 2330 	push	acc
      0006AE 74r62            [12] 2331 	mov	a,#___str_37
      0006B0 C0 E0            [24] 2332 	push	acc
      0006B2 74s02            [12] 2333 	mov	a,#(___str_37 >> 8)
      0006B4 C0 E0            [24] 2334 	push	acc
      0006B6 12r00r00         [24] 2335 	lcall	_printf_fast_f
      0006B9 E5 81            [12] 2336 	mov	a,sp
      0006BB 24 FC            [12] 2337 	add	a,#0xfc
      0006BD F5 81            [12] 2338 	mov	sp,a
                                   2339 ;	src/main.c:601: gu16TimeCnt = 0;
      0006BF 90r00r34         [24] 2340 	mov	dptr,#_gu16TimeCnt
      0006C2 E4               [12] 2341 	clr	a
      0006C3 F0               [24] 2342 	movx	@dptr,a
      0006C4 A3               [24] 2343 	inc	dptr
      0006C5 F0               [24] 2344 	movx	@dptr,a
                                   2345 ;	src/main.c:602: break;
      0006C6 22               [24] 2346 	ret
                                   2347 ;	src/main.c:603: case '0' :
      0006C7                       2348 00102$:
                                   2349 ;	src/main.c:604: gu8UART = 0;
      0006C7 75*00 00         [24] 2350 	mov	_gu8UART,#0x00
                                   2351 ;	src/main.c:605: LINEFI_EN0 = 0;
                                   2352 ;	assignBit
      0006CA C2 90            [12] 2353 	clr	_P10
                                   2354 ;	src/main.c:606: LINEFI_EN1 = 0;
                                   2355 ;	assignBit
      0006CC C2 91            [12] 2356 	clr	_P11
                                   2357 ;	src/main.c:607: LINEFI_EN2 = 0;
                                   2358 ;	assignBit
      0006CE C2 92            [12] 2359 	clr	_P12
                                   2360 ;	src/main.c:608: printf_fast_f("LINEFI_EN0=0\n\r");
      0006D0 74r67            [12] 2361 	mov	a,#___str_38
      0006D2 C0 E0            [24] 2362 	push	acc
      0006D4 74s02            [12] 2363 	mov	a,#(___str_38 >> 8)
      0006D6 C0 E0            [24] 2364 	push	acc
      0006D8 12r00r00         [24] 2365 	lcall	_printf_fast_f
      0006DB 15 81            [12] 2366 	dec	sp
      0006DD 15 81            [12] 2367 	dec	sp
                                   2368 ;	src/main.c:609: break;
      0006DF 22               [24] 2369 	ret
                                   2370 ;	src/main.c:610: case '1' :
      0006E0                       2371 00103$:
                                   2372 ;	src/main.c:611: gu8UART = 0;
      0006E0 75*00 00         [24] 2373 	mov	_gu8UART,#0x00
                                   2374 ;	src/main.c:612: LINEFI_EN0 = 1;
                                   2375 ;	assignBit
      0006E3 D2 90            [12] 2376 	setb	_P10
                                   2377 ;	src/main.c:613: printf_fast_f("LINEFI_EN0=1\n\r");
      0006E5 74r76            [12] 2378 	mov	a,#___str_39
      0006E7 C0 E0            [24] 2379 	push	acc
      0006E9 74s02            [12] 2380 	mov	a,#(___str_39 >> 8)
      0006EB C0 E0            [24] 2381 	push	acc
      0006ED 12r00r00         [24] 2382 	lcall	_printf_fast_f
      0006F0 15 81            [12] 2383 	dec	sp
      0006F2 15 81            [12] 2384 	dec	sp
                                   2385 ;	src/main.c:614: break;
      0006F4 22               [24] 2386 	ret
                                   2387 ;	src/main.c:615: case '2' :
      0006F5                       2388 00104$:
                                   2389 ;	src/main.c:616: gu8UART = 0;
      0006F5 75*00 00         [24] 2390 	mov	_gu8UART,#0x00
                                   2391 ;	src/main.c:617: LINEFI_TX = 0;
                                   2392 ;	assignBit
      0006F8 C2 96            [12] 2393 	clr	_P16
                                   2394 ;	src/main.c:618: printf_fast_f("LINEFI_TX=0\n\r");
      0006FA 74r85            [12] 2395 	mov	a,#___str_40
      0006FC C0 E0            [24] 2396 	push	acc
      0006FE 74s02            [12] 2397 	mov	a,#(___str_40 >> 8)
      000700 C0 E0            [24] 2398 	push	acc
      000702 12r00r00         [24] 2399 	lcall	_printf_fast_f
      000705 15 81            [12] 2400 	dec	sp
      000707 15 81            [12] 2401 	dec	sp
                                   2402 ;	src/main.c:619: break;
      000709 22               [24] 2403 	ret
                                   2404 ;	src/main.c:620: case '3' :
      00070A                       2405 00105$:
                                   2406 ;	src/main.c:621: gu8UART = 0;
      00070A 75*00 00         [24] 2407 	mov	_gu8UART,#0x00
                                   2408 ;	src/main.c:622: LINEFI_TX = 1;
                                   2409 ;	assignBit
      00070D D2 96            [12] 2410 	setb	_P16
                                   2411 ;	src/main.c:623: printf_fast_f("LINEFI_TX=1\n\r");
      00070F 74r93            [12] 2412 	mov	a,#___str_41
      000711 C0 E0            [24] 2413 	push	acc
      000713 74s02            [12] 2414 	mov	a,#(___str_41 >> 8)
      000715 C0 E0            [24] 2415 	push	acc
      000717 12r00r00         [24] 2416 	lcall	_printf_fast_f
      00071A 15 81            [12] 2417 	dec	sp
      00071C 15 81            [12] 2418 	dec	sp
                                   2419 ;	src/main.c:624: break;
      00071E 22               [24] 2420 	ret
                                   2421 ;	src/main.c:625: case '4' :
      00071F                       2422 00106$:
                                   2423 ;	src/main.c:626: gu8UART = 0;
      00071F 75*00 00         [24] 2424 	mov	_gu8UART,#0x00
                                   2425 ;	src/main.c:627: TOGGLE(LINEFI_TX);
      000722 B2 96            [12] 2426 	cpl	_P16
                                   2427 ;	src/main.c:628: printf_fast_f("LINEFI_TX=%d\n\r", LINEFI_TX);
      000724 A2 96            [12] 2428 	mov	c,_P16
      000726 E4               [12] 2429 	clr	a
      000727 33               [12] 2430 	rlc	a
      000728 FE               [12] 2431 	mov	r6,a
      000729 7F 00            [12] 2432 	mov	r7,#0x00
      00072B C0 06            [24] 2433 	push	ar6
      00072D C0 07            [24] 2434 	push	ar7
      00072F 74rA1            [12] 2435 	mov	a,#___str_42
      000731 C0 E0            [24] 2436 	push	acc
      000733 74s02            [12] 2437 	mov	a,#(___str_42 >> 8)
      000735 C0 E0            [24] 2438 	push	acc
      000737 12r00r00         [24] 2439 	lcall	_printf_fast_f
      00073A E5 81            [12] 2440 	mov	a,sp
      00073C 24 FC            [12] 2441 	add	a,#0xfc
      00073E F5 81            [12] 2442 	mov	sp,a
                                   2443 ;	src/main.c:629: break;
      000740 22               [24] 2444 	ret
                                   2445 ;	src/main.c:630: case '5' :
      000741                       2446 00107$:
                                   2447 ;	src/main.c:631: gu8UART = 0;
      000741 75*00 00         [24] 2448 	mov	_gu8UART,#0x00
                                   2449 ;	src/main.c:632: if (LINEFI_EN0 == 0) {
      000744 20 90 02         [24] 2450 	jb	_P10,00109$
                                   2451 ;	src/main.c:633: LINEFI_TX = 1;
                                   2452 ;	assignBit
      000747 D2 96            [12] 2453 	setb	_P16
      000749                       2454 00109$:
                                   2455 ;	src/main.c:635: TOGGLE(LINEFI_EN0);
      000749 B2 90            [12] 2456 	cpl	_P10
                                   2457 ;	src/main.c:636: printf_fast_f("LINEFI_EN0=");
      00074B 74rB0            [12] 2458 	mov	a,#___str_43
      00074D C0 E0            [24] 2459 	push	acc
      00074F 74s02            [12] 2460 	mov	a,#(___str_43 >> 8)
      000751 C0 E0            [24] 2461 	push	acc
      000753 12r00r00         [24] 2462 	lcall	_printf_fast_f
      000756 15 81            [12] 2463 	dec	sp
      000758 15 81            [12] 2464 	dec	sp
                                   2465 ;	src/main.c:637: printf_fast_f("%d\n\r", LINEFI_EN0);
      00075A A2 90            [12] 2466 	mov	c,_P10
      00075C E4               [12] 2467 	clr	a
      00075D 33               [12] 2468 	rlc	a
      00075E FE               [12] 2469 	mov	r6,a
      00075F 7F 00            [12] 2470 	mov	r7,#0x00
      000761 C0 06            [24] 2471 	push	ar6
      000763 C0 07            [24] 2472 	push	ar7
      000765 74rBC            [12] 2473 	mov	a,#___str_44
      000767 C0 E0            [24] 2474 	push	acc
      000769 74s02            [12] 2475 	mov	a,#(___str_44 >> 8)
      00076B C0 E0            [24] 2476 	push	acc
      00076D 12r00r00         [24] 2477 	lcall	_printf_fast_f
      000770 E5 81            [12] 2478 	mov	a,sp
      000772 24 FC            [12] 2479 	add	a,#0xfc
      000774 F5 81            [12] 2480 	mov	sp,a
                                   2481 ;	src/main.c:638: break;
      000776 22               [24] 2482 	ret
                                   2483 ;	src/main.c:639: case '6' :
      000777                       2484 00110$:
                                   2485 ;	src/main.c:640: TOGGLE(LINEFI_EN1);
      000777 B2 91            [12] 2486 	cpl	_P11
                                   2487 ;	src/main.c:641: printf_fast_f("LINEFI_EN1=");
      000779 74rC1            [12] 2488 	mov	a,#___str_45
      00077B C0 E0            [24] 2489 	push	acc
      00077D 74s02            [12] 2490 	mov	a,#(___str_45 >> 8)
      00077F C0 E0            [24] 2491 	push	acc
      000781 12r00r00         [24] 2492 	lcall	_printf_fast_f
      000784 15 81            [12] 2493 	dec	sp
      000786 15 81            [12] 2494 	dec	sp
                                   2495 ;	src/main.c:642: printf_fast_f("%d\n\r", LINEFI_EN1);
      000788 A2 91            [12] 2496 	mov	c,_P11
      00078A E4               [12] 2497 	clr	a
      00078B 33               [12] 2498 	rlc	a
      00078C FE               [12] 2499 	mov	r6,a
      00078D 7F 00            [12] 2500 	mov	r7,#0x00
      00078F C0 06            [24] 2501 	push	ar6
      000791 C0 07            [24] 2502 	push	ar7
      000793 74rBC            [12] 2503 	mov	a,#___str_44
      000795 C0 E0            [24] 2504 	push	acc
      000797 74s02            [12] 2505 	mov	a,#(___str_44 >> 8)
      000799 C0 E0            [24] 2506 	push	acc
      00079B 12r00r00         [24] 2507 	lcall	_printf_fast_f
      00079E E5 81            [12] 2508 	mov	a,sp
      0007A0 24 FC            [12] 2509 	add	a,#0xfc
      0007A2 F5 81            [12] 2510 	mov	sp,a
                                   2511 ;	src/main.c:643: break;
      0007A4 22               [24] 2512 	ret
                                   2513 ;	src/main.c:644: case '7' :
      0007A5                       2514 00111$:
                                   2515 ;	src/main.c:645: TOGGLE(LINEFI_EN2);
      0007A5 B2 92            [12] 2516 	cpl	_P12
                                   2517 ;	src/main.c:646: printf_fast_f("LINEFI_EN2=");
      0007A7 74rCD            [12] 2518 	mov	a,#___str_46
      0007A9 C0 E0            [24] 2519 	push	acc
      0007AB 74s02            [12] 2520 	mov	a,#(___str_46 >> 8)
      0007AD C0 E0            [24] 2521 	push	acc
      0007AF 12r00r00         [24] 2522 	lcall	_printf_fast_f
      0007B2 15 81            [12] 2523 	dec	sp
      0007B4 15 81            [12] 2524 	dec	sp
                                   2525 ;	src/main.c:647: printf_fast_f("%d\n\r", LINEFI_EN2);
      0007B6 A2 92            [12] 2526 	mov	c,_P12
      0007B8 E4               [12] 2527 	clr	a
      0007B9 33               [12] 2528 	rlc	a
      0007BA FE               [12] 2529 	mov	r6,a
      0007BB 7F 00            [12] 2530 	mov	r7,#0x00
      0007BD C0 06            [24] 2531 	push	ar6
      0007BF C0 07            [24] 2532 	push	ar7
      0007C1 74rBC            [12] 2533 	mov	a,#___str_44
      0007C3 C0 E0            [24] 2534 	push	acc
      0007C5 74s02            [12] 2535 	mov	a,#(___str_44 >> 8)
      0007C7 C0 E0            [24] 2536 	push	acc
      0007C9 12r00r00         [24] 2537 	lcall	_printf_fast_f
      0007CC E5 81            [12] 2538 	mov	a,sp
      0007CE 24 FC            [12] 2539 	add	a,#0xfc
      0007D0 F5 81            [12] 2540 	mov	sp,a
                                   2541 ;	src/main.c:648: break;
      0007D2 22               [24] 2542 	ret
                                   2543 ;	src/main.c:652: case 'h' : // <<
      0007D3                       2544 00112$:
                                   2545 ;	src/main.c:653: (*apu8LineFiAddr)--;
      0007D3 AD*0B            [24] 2546 	mov	r5,_act_by_one_key_PARM_3
      0007D5 AE*0C            [24] 2547 	mov	r6,(_act_by_one_key_PARM_3 + 1)
      0007D7 AF*0D            [24] 2548 	mov	r7,(_act_by_one_key_PARM_3 + 2)
      0007D9 8D 82            [24] 2549 	mov	dpl,r5
      0007DB 8E 83            [24] 2550 	mov	dph,r6
      0007DD 8F F0            [24] 2551 	mov	b,r7
      0007DF 12r00r00         [24] 2552 	lcall	__gptrget
      0007E2 FC               [12] 2553 	mov	r4,a
      0007E3 1C               [12] 2554 	dec	r4
      0007E4 8D 82            [24] 2555 	mov	dpl,r5
      0007E6 8E 83            [24] 2556 	mov	dph,r6
      0007E8 8F F0            [24] 2557 	mov	b,r7
      0007EA EC               [12] 2558 	mov	a,r4
      0007EB 12r00r00         [24] 2559 	lcall	__gptrput
                                   2560 ;	src/main.c:654: if (*apu8LineFiCmd == 1) {
      0007EE AA*08            [24] 2561 	mov	r2,_act_by_one_key_PARM_2
      0007F0 AB*09            [24] 2562 	mov	r3,(_act_by_one_key_PARM_2 + 1)
      0007F2 AC*0A            [24] 2563 	mov	r4,(_act_by_one_key_PARM_2 + 2)
      0007F4 8A 82            [24] 2564 	mov	dpl,r2
      0007F6 8B 83            [24] 2565 	mov	dph,r3
      0007F8 8C F0            [24] 2566 	mov	b,r4
      0007FA 12r00r00         [24] 2567 	lcall	__gptrget
      0007FD FA               [12] 2568 	mov	r2,a
      0007FE BA 01 3C         [24] 2569 	cjne	r2,#0x01,00114$
                                   2570 ;	src/main.c:655: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[*apu8LineFiAddr]);
      000801 8D 82            [24] 2571 	mov	dpl,r5
      000803 8E 83            [24] 2572 	mov	dph,r6
      000805 8F F0            [24] 2573 	mov	b,r7
      000807 12r00r00         [24] 2574 	lcall	__gptrget
      00080A 75 F0 04         [24] 2575 	mov	b,#0x04
      00080D A4               [48] 2576 	mul	ab
      00080E 24r36            [12] 2577 	add	a,#_gpu32UartSpeed
      000810 F5 82            [12] 2578 	mov	dpl,a
      000812 74s00            [12] 2579 	mov	a,#(_gpu32UartSpeed >> 8)
      000814 35 F0            [12] 2580 	addc	a,b
      000816 F5 83            [12] 2581 	mov	dph,a
      000818 E0               [24] 2582 	movx	a,@dptr
      000819 F9               [12] 2583 	mov	r1,a
      00081A A3               [24] 2584 	inc	dptr
      00081B E0               [24] 2585 	movx	a,@dptr
      00081C FA               [12] 2586 	mov	r2,a
      00081D A3               [24] 2587 	inc	dptr
      00081E E0               [24] 2588 	movx	a,@dptr
      00081F FB               [12] 2589 	mov	r3,a
      000820 A3               [24] 2590 	inc	dptr
      000821 E0               [24] 2591 	movx	a,@dptr
      000822 FC               [12] 2592 	mov	r4,a
      000823 C0 01            [24] 2593 	push	ar1
      000825 C0 02            [24] 2594 	push	ar2
      000827 C0 03            [24] 2595 	push	ar3
      000829 C0 04            [24] 2596 	push	ar4
      00082B 74rD9            [12] 2597 	mov	a,#___str_47
      00082D C0 E0            [24] 2598 	push	acc
      00082F 74s02            [12] 2599 	mov	a,#(___str_47 >> 8)
      000831 C0 E0            [24] 2600 	push	acc
      000833 12r00r00         [24] 2601 	lcall	_printf_fast_f
      000836 E5 81            [12] 2602 	mov	a,sp
      000838 24 FA            [12] 2603 	add	a,#0xfa
      00083A F5 81            [12] 2604 	mov	sp,a
      00083C 22               [24] 2605 	ret
      00083D                       2606 00114$:
                                   2607 ;	src/main.c:658: printf_fast_f("address: %d\n\r", *apu8LineFiAddr);
      00083D 8D 82            [24] 2608 	mov	dpl,r5
      00083F 8E 83            [24] 2609 	mov	dph,r6
      000841 8F F0            [24] 2610 	mov	b,r7
      000843 12r00r00         [24] 2611 	lcall	__gptrget
      000846 FD               [12] 2612 	mov	r5,a
      000847 7F 00            [12] 2613 	mov	r7,#0x00
      000849 C0 05            [24] 2614 	push	ar5
      00084B C0 07            [24] 2615 	push	ar7
      00084D 74rEC            [12] 2616 	mov	a,#___str_48
      00084F C0 E0            [24] 2617 	push	acc
      000851 74s02            [12] 2618 	mov	a,#(___str_48 >> 8)
      000853 C0 E0            [24] 2619 	push	acc
      000855 12r00r00         [24] 2620 	lcall	_printf_fast_f
      000858 E5 81            [12] 2621 	mov	a,sp
      00085A 24 FC            [12] 2622 	add	a,#0xfc
      00085C F5 81            [12] 2623 	mov	sp,a
                                   2624 ;	src/main.c:660: break;
      00085E 22               [24] 2625 	ret
                                   2626 ;	src/main.c:661: case 'j' : //  down
      00085F                       2627 00116$:
                                   2628 ;	src/main.c:662: (*apu8LineFiCmd)--;
      00085F AD*08            [24] 2629 	mov	r5,_act_by_one_key_PARM_2
      000861 AE*09            [24] 2630 	mov	r6,(_act_by_one_key_PARM_2 + 1)
      000863 AF*0A            [24] 2631 	mov	r7,(_act_by_one_key_PARM_2 + 2)
      000865 8D 82            [24] 2632 	mov	dpl,r5
      000867 8E 83            [24] 2633 	mov	dph,r6
      000869 8F F0            [24] 2634 	mov	b,r7
      00086B 12r00r00         [24] 2635 	lcall	__gptrget
      00086E FC               [12] 2636 	mov	r4,a
      00086F 1C               [12] 2637 	dec	r4
      000870 8D 82            [24] 2638 	mov	dpl,r5
      000872 8E 83            [24] 2639 	mov	dph,r6
      000874 8F F0            [24] 2640 	mov	b,r7
      000876 EC               [12] 2641 	mov	a,r4
      000877 12r00r00         [24] 2642 	lcall	__gptrput
                                   2643 ;	src/main.c:663: printf_fast_f("command: %d\n\r", *apu8LineFiCmd);
      00087A 7F 00            [12] 2644 	mov	r7,#0x00
      00087C C0 04            [24] 2645 	push	ar4
      00087E C0 07            [24] 2646 	push	ar7
      000880 74rFA            [12] 2647 	mov	a,#___str_49
      000882 C0 E0            [24] 2648 	push	acc
      000884 74s02            [12] 2649 	mov	a,#(___str_49 >> 8)
      000886 C0 E0            [24] 2650 	push	acc
      000888 12r00r00         [24] 2651 	lcall	_printf_fast_f
      00088B E5 81            [12] 2652 	mov	a,sp
      00088D 24 FC            [12] 2653 	add	a,#0xfc
      00088F F5 81            [12] 2654 	mov	sp,a
                                   2655 ;	src/main.c:664: break;
      000891 22               [24] 2656 	ret
                                   2657 ;	src/main.c:665: case 'k' : // up
      000892                       2658 00117$:
                                   2659 ;	src/main.c:666: (*apu8LineFiCmd)++;
      000892 AD*08            [24] 2660 	mov	r5,_act_by_one_key_PARM_2
      000894 AE*09            [24] 2661 	mov	r6,(_act_by_one_key_PARM_2 + 1)
      000896 AF*0A            [24] 2662 	mov	r7,(_act_by_one_key_PARM_2 + 2)
      000898 8D 82            [24] 2663 	mov	dpl,r5
      00089A 8E 83            [24] 2664 	mov	dph,r6
      00089C 8F F0            [24] 2665 	mov	b,r7
      00089E 12r00r00         [24] 2666 	lcall	__gptrget
      0008A1 FC               [12] 2667 	mov	r4,a
      0008A2 0C               [12] 2668 	inc	r4
      0008A3 8D 82            [24] 2669 	mov	dpl,r5
      0008A5 8E 83            [24] 2670 	mov	dph,r6
      0008A7 8F F0            [24] 2671 	mov	b,r7
      0008A9 EC               [12] 2672 	mov	a,r4
      0008AA 12r00r00         [24] 2673 	lcall	__gptrput
                                   2674 ;	src/main.c:667: printf_fast_f("command: %d\n\r", *apu8LineFiCmd);
      0008AD 7F 00            [12] 2675 	mov	r7,#0x00
      0008AF C0 04            [24] 2676 	push	ar4
      0008B1 C0 07            [24] 2677 	push	ar7
      0008B3 74rFA            [12] 2678 	mov	a,#___str_49
      0008B5 C0 E0            [24] 2679 	push	acc
      0008B7 74s02            [12] 2680 	mov	a,#(___str_49 >> 8)
      0008B9 C0 E0            [24] 2681 	push	acc
      0008BB 12r00r00         [24] 2682 	lcall	_printf_fast_f
      0008BE E5 81            [12] 2683 	mov	a,sp
      0008C0 24 FC            [12] 2684 	add	a,#0xfc
      0008C2 F5 81            [12] 2685 	mov	sp,a
                                   2686 ;	src/main.c:668: break;
      0008C4 22               [24] 2687 	ret
                                   2688 ;	src/main.c:669: case 'l' : // >>
      0008C5                       2689 00118$:
                                   2690 ;	src/main.c:670: (*apu8LineFiAddr)++;
      0008C5 AD*0B            [24] 2691 	mov	r5,_act_by_one_key_PARM_3
      0008C7 AE*0C            [24] 2692 	mov	r6,(_act_by_one_key_PARM_3 + 1)
      0008C9 AF*0D            [24] 2693 	mov	r7,(_act_by_one_key_PARM_3 + 2)
      0008CB 8D 82            [24] 2694 	mov	dpl,r5
      0008CD 8E 83            [24] 2695 	mov	dph,r6
      0008CF 8F F0            [24] 2696 	mov	b,r7
      0008D1 12r00r00         [24] 2697 	lcall	__gptrget
      0008D4 FC               [12] 2698 	mov	r4,a
      0008D5 0C               [12] 2699 	inc	r4
      0008D6 8D 82            [24] 2700 	mov	dpl,r5
      0008D8 8E 83            [24] 2701 	mov	dph,r6
      0008DA 8F F0            [24] 2702 	mov	b,r7
      0008DC EC               [12] 2703 	mov	a,r4
      0008DD 12r00r00         [24] 2704 	lcall	__gptrput
                                   2705 ;	src/main.c:671: if (*apu8LineFiCmd == 1) {
      0008E0 AA*08            [24] 2706 	mov	r2,_act_by_one_key_PARM_2
      0008E2 AB*09            [24] 2707 	mov	r3,(_act_by_one_key_PARM_2 + 1)
      0008E4 AC*0A            [24] 2708 	mov	r4,(_act_by_one_key_PARM_2 + 2)
      0008E6 8A 82            [24] 2709 	mov	dpl,r2
      0008E8 8B 83            [24] 2710 	mov	dph,r3
      0008EA 8C F0            [24] 2711 	mov	b,r4
      0008EC 12r00r00         [24] 2712 	lcall	__gptrget
      0008EF FA               [12] 2713 	mov	r2,a
      0008F0 BA 01 3C         [24] 2714 	cjne	r2,#0x01,00120$
                                   2715 ;	src/main.c:672: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[*apu8LineFiAddr]);
      0008F3 8D 82            [24] 2716 	mov	dpl,r5
      0008F5 8E 83            [24] 2717 	mov	dph,r6
      0008F7 8F F0            [24] 2718 	mov	b,r7
      0008F9 12r00r00         [24] 2719 	lcall	__gptrget
      0008FC 75 F0 04         [24] 2720 	mov	b,#0x04
      0008FF A4               [48] 2721 	mul	ab
      000900 24r36            [12] 2722 	add	a,#_gpu32UartSpeed
      000902 F5 82            [12] 2723 	mov	dpl,a
      000904 74s00            [12] 2724 	mov	a,#(_gpu32UartSpeed >> 8)
      000906 35 F0            [12] 2725 	addc	a,b
      000908 F5 83            [12] 2726 	mov	dph,a
      00090A E0               [24] 2727 	movx	a,@dptr
      00090B F9               [12] 2728 	mov	r1,a
      00090C A3               [24] 2729 	inc	dptr
      00090D E0               [24] 2730 	movx	a,@dptr
      00090E FA               [12] 2731 	mov	r2,a
      00090F A3               [24] 2732 	inc	dptr
      000910 E0               [24] 2733 	movx	a,@dptr
      000911 FB               [12] 2734 	mov	r3,a
      000912 A3               [24] 2735 	inc	dptr
      000913 E0               [24] 2736 	movx	a,@dptr
      000914 FC               [12] 2737 	mov	r4,a
      000915 C0 01            [24] 2738 	push	ar1
      000917 C0 02            [24] 2739 	push	ar2
      000919 C0 03            [24] 2740 	push	ar3
      00091B C0 04            [24] 2741 	push	ar4
      00091D 74rD9            [12] 2742 	mov	a,#___str_47
      00091F C0 E0            [24] 2743 	push	acc
      000921 74s02            [12] 2744 	mov	a,#(___str_47 >> 8)
      000923 C0 E0            [24] 2745 	push	acc
      000925 12r00r00         [24] 2746 	lcall	_printf_fast_f
      000928 E5 81            [12] 2747 	mov	a,sp
      00092A 24 FA            [12] 2748 	add	a,#0xfa
      00092C F5 81            [12] 2749 	mov	sp,a
      00092E 22               [24] 2750 	ret
      00092F                       2751 00120$:
                                   2752 ;	src/main.c:675: printf_fast_f("address: %d\n\r", *apu8LineFiAddr);
      00092F 8D 82            [24] 2753 	mov	dpl,r5
      000931 8E 83            [24] 2754 	mov	dph,r6
      000933 8F F0            [24] 2755 	mov	b,r7
      000935 12r00r00         [24] 2756 	lcall	__gptrget
      000938 FD               [12] 2757 	mov	r5,a
      000939 7F 00            [12] 2758 	mov	r7,#0x00
      00093B C0 05            [24] 2759 	push	ar5
      00093D C0 07            [24] 2760 	push	ar7
      00093F 74rEC            [12] 2761 	mov	a,#___str_48
      000941 C0 E0            [24] 2762 	push	acc
      000943 74s02            [12] 2763 	mov	a,#(___str_48 >> 8)
      000945 C0 E0            [24] 2764 	push	acc
      000947 12r00r00         [24] 2765 	lcall	_printf_fast_f
      00094A E5 81            [12] 2766 	mov	a,sp
      00094C 24 FC            [12] 2767 	add	a,#0xfc
      00094E F5 81            [12] 2768 	mov	sp,a
                                   2769 ;	src/main.c:677: break;
      000950 22               [24] 2770 	ret
                                   2771 ;	src/main.c:678: case 's' :
      000951                       2772 00122$:
                                   2773 ;	src/main.c:679: switch (*apu8LineFiCmd) {
      000951 AD*08            [24] 2774 	mov	r5,_act_by_one_key_PARM_2
      000953 AE*09            [24] 2775 	mov	r6,(_act_by_one_key_PARM_2 + 1)
      000955 AF*0A            [24] 2776 	mov	r7,(_act_by_one_key_PARM_2 + 2)
      000957 8D 82            [24] 2777 	mov	dpl,r5
      000959 8E 83            [24] 2778 	mov	dph,r6
      00095B 8F F0            [24] 2779 	mov	b,r7
      00095D 12r00r00         [24] 2780 	lcall	__gptrget
      000960 FC               [12] 2781 	mov	r4,a
      000961 60 09            [24] 2782 	jz	00123$
      000963 BC 01 03         [24] 2783 	cjne	r4,#0x01,00274$
      000966 02r09rFF         [24] 2784 	ljmp	00124$
      000969                       2785 00274$:
      000969 02r0ArAC         [24] 2786 	ljmp	00125$
                                   2787 ;	src/main.c:680: case 0 : // address setting
      00096C                       2788 00123$:
                                   2789 ;	src/main.c:681: send_octet_to_linefi((((*apu8LineFiAddr)<<4)&0xF0) | (*apu8LineFiCmd)&0x0F);
      00096C 85*0B*0E         [24] 2790 	mov	_act_by_one_key_sloc0_1_0,_act_by_one_key_PARM_3
      00096F 85*0C*0F         [24] 2791 	mov	(_act_by_one_key_sloc0_1_0 + 1),(_act_by_one_key_PARM_3 + 1)
      000972 85*0D*10         [24] 2792 	mov	(_act_by_one_key_sloc0_1_0 + 2),(_act_by_one_key_PARM_3 + 2)
      000975 85*0E 82         [24] 2793 	mov	dpl,_act_by_one_key_sloc0_1_0
      000978 85*0F 83         [24] 2794 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      00097B 85*10 F0         [24] 2795 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      00097E 12r00r00         [24] 2796 	lcall	__gptrget
      000981 C4               [12] 2797 	swap	a
      000982 54 F0            [12] 2798 	anl	a,#0xf0
      000984 F8               [12] 2799 	mov	r0,a
      000985 53 00 F0         [24] 2800 	anl	ar0,#0xf0
      000988 74 0F            [12] 2801 	mov	a,#0x0f
      00098A 5C               [12] 2802 	anl	a,r4
      00098B 48               [12] 2803 	orl	a,r0
      00098C F5 82            [12] 2804 	mov	dpl,a
      00098E C0 07            [24] 2805 	push	ar7
      000990 C0 06            [24] 2806 	push	ar6
      000992 C0 05            [24] 2807 	push	ar5
      000994 12r00r00         [24] 2808 	lcall	_send_octet_to_linefi
      000997 D0 05            [24] 2809 	pop	ar5
      000999 D0 06            [24] 2810 	pop	ar6
      00099B D0 07            [24] 2811 	pop	ar7
                                   2812 ;	src/main.c:682: printf_fast_f("LineFi Sending: 0x%x:\n\r", ((*apu8LineFiAddr)<<4) | *apu8LineFiCmd);
      00099D 85*0E 82         [24] 2813 	mov	dpl,_act_by_one_key_sloc0_1_0
      0009A0 85*0F 83         [24] 2814 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      0009A3 85*10 F0         [24] 2815 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      0009A6 12r00r00         [24] 2816 	lcall	__gptrget
      0009A9 F8               [12] 2817 	mov	r0,a
      0009AA E4               [12] 2818 	clr	a
      0009AB C8               [12] 2819 	xch	a,r0
      0009AC C4               [12] 2820 	swap	a
      0009AD C8               [12] 2821 	xch	a,r0
      0009AE 68               [12] 2822 	xrl	a,r0
      0009AF C8               [12] 2823 	xch	a,r0
      0009B0 54 F0            [12] 2824 	anl	a,#0xf0
      0009B2 C8               [12] 2825 	xch	a,r0
      0009B3 68               [12] 2826 	xrl	a,r0
      0009B4 FB               [12] 2827 	mov	r3,a
      0009B5 8D 82            [24] 2828 	mov	dpl,r5
      0009B7 8E 83            [24] 2829 	mov	dph,r6
      0009B9 8F F0            [24] 2830 	mov	b,r7
      0009BB 12r00r00         [24] 2831 	lcall	__gptrget
      0009BE 7A 00            [12] 2832 	mov	r2,#0x00
      0009C0 42 00            [12] 2833 	orl	ar0,a
      0009C2 EA               [12] 2834 	mov	a,r2
      0009C3 42 03            [12] 2835 	orl	ar3,a
      0009C5 C0 00            [24] 2836 	push	ar0
      0009C7 C0 03            [24] 2837 	push	ar3
      0009C9 74r08            [12] 2838 	mov	a,#___str_50
      0009CB C0 E0            [24] 2839 	push	acc
      0009CD 74s03            [12] 2840 	mov	a,#(___str_50 >> 8)
      0009CF C0 E0            [24] 2841 	push	acc
      0009D1 12r00r00         [24] 2842 	lcall	_printf_fast_f
      0009D4 E5 81            [12] 2843 	mov	a,sp
      0009D6 24 FC            [12] 2844 	add	a,#0xfc
      0009D8 F5 81            [12] 2845 	mov	sp,a
                                   2846 ;	src/main.c:683: printf_fast_f("address: 0x%d:\n\r", *apu8LineFiAddr);
      0009DA 85*0E 82         [24] 2847 	mov	dpl,_act_by_one_key_sloc0_1_0
      0009DD 85*0F 83         [24] 2848 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      0009E0 85*10 F0         [24] 2849 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      0009E3 12r00r00         [24] 2850 	lcall	__gptrget
      0009E6 FB               [12] 2851 	mov	r3,a
      0009E7 7A 00            [12] 2852 	mov	r2,#0x00
      0009E9 C0 03            [24] 2853 	push	ar3
      0009EB C0 02            [24] 2854 	push	ar2
      0009ED 74r20            [12] 2855 	mov	a,#___str_51
      0009EF C0 E0            [24] 2856 	push	acc
      0009F1 74s03            [12] 2857 	mov	a,#(___str_51 >> 8)
      0009F3 C0 E0            [24] 2858 	push	acc
      0009F5 12r00r00         [24] 2859 	lcall	_printf_fast_f
      0009F8 E5 81            [12] 2860 	mov	a,sp
      0009FA 24 FC            [12] 2861 	add	a,#0xfc
      0009FC F5 81            [12] 2862 	mov	sp,a
                                   2863 ;	src/main.c:684: break;
      0009FE 22               [24] 2864 	ret
                                   2865 ;	src/main.c:685: case 1 : // uart speed setting
      0009FF                       2866 00124$:
                                   2867 ;	src/main.c:686: send_octet_to_linefi((((*apu8LineFiAddr)<<4)&0xF0) | (*apu8LineFiCmd)&0x0F);
      0009FF 85*0B*0E         [24] 2868 	mov	_act_by_one_key_sloc0_1_0,_act_by_one_key_PARM_3
      000A02 85*0C*0F         [24] 2869 	mov	(_act_by_one_key_sloc0_1_0 + 1),(_act_by_one_key_PARM_3 + 1)
      000A05 85*0D*10         [24] 2870 	mov	(_act_by_one_key_sloc0_1_0 + 2),(_act_by_one_key_PARM_3 + 2)
      000A08 85*0E 82         [24] 2871 	mov	dpl,_act_by_one_key_sloc0_1_0
      000A0B 85*0F 83         [24] 2872 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      000A0E 85*10 F0         [24] 2873 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      000A11 12r00r00         [24] 2874 	lcall	__gptrget
      000A14 C4               [12] 2875 	swap	a
      000A15 54 F0            [12] 2876 	anl	a,#0xf0
      000A17 F8               [12] 2877 	mov	r0,a
      000A18 53 00 F0         [24] 2878 	anl	ar0,#0xf0
      000A1B 74 0F            [12] 2879 	mov	a,#0x0f
      000A1D 5C               [12] 2880 	anl	a,r4
      000A1E 48               [12] 2881 	orl	a,r0
      000A1F F5 82            [12] 2882 	mov	dpl,a
      000A21 C0 07            [24] 2883 	push	ar7
      000A23 C0 06            [24] 2884 	push	ar6
      000A25 C0 05            [24] 2885 	push	ar5
      000A27 12r00r00         [24] 2886 	lcall	_send_octet_to_linefi
      000A2A D0 05            [24] 2887 	pop	ar5
      000A2C D0 06            [24] 2888 	pop	ar6
      000A2E D0 07            [24] 2889 	pop	ar7
                                   2890 ;	src/main.c:687: printf_fast_f("LineFi Sending: 0x%x:\n\r", ((*apu8LineFiAddr)<<4) | *apu8LineFiCmd);
      000A30 85*0E 82         [24] 2891 	mov	dpl,_act_by_one_key_sloc0_1_0
      000A33 85*0F 83         [24] 2892 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      000A36 85*10 F0         [24] 2893 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      000A39 12r00r00         [24] 2894 	lcall	__gptrget
      000A3C F8               [12] 2895 	mov	r0,a
      000A3D E4               [12] 2896 	clr	a
      000A3E C8               [12] 2897 	xch	a,r0
      000A3F C4               [12] 2898 	swap	a
      000A40 C8               [12] 2899 	xch	a,r0
      000A41 68               [12] 2900 	xrl	a,r0
      000A42 C8               [12] 2901 	xch	a,r0
      000A43 54 F0            [12] 2902 	anl	a,#0xf0
      000A45 C8               [12] 2903 	xch	a,r0
      000A46 68               [12] 2904 	xrl	a,r0
      000A47 FB               [12] 2905 	mov	r3,a
      000A48 8D 82            [24] 2906 	mov	dpl,r5
      000A4A 8E 83            [24] 2907 	mov	dph,r6
      000A4C 8F F0            [24] 2908 	mov	b,r7
      000A4E 12r00r00         [24] 2909 	lcall	__gptrget
      000A51 7A 00            [12] 2910 	mov	r2,#0x00
      000A53 42 00            [12] 2911 	orl	ar0,a
      000A55 EA               [12] 2912 	mov	a,r2
      000A56 42 03            [12] 2913 	orl	ar3,a
      000A58 C0 00            [24] 2914 	push	ar0
      000A5A C0 03            [24] 2915 	push	ar3
      000A5C 74r08            [12] 2916 	mov	a,#___str_50
      000A5E C0 E0            [24] 2917 	push	acc
      000A60 74s03            [12] 2918 	mov	a,#(___str_50 >> 8)
      000A62 C0 E0            [24] 2919 	push	acc
      000A64 12r00r00         [24] 2920 	lcall	_printf_fast_f
      000A67 E5 81            [12] 2921 	mov	a,sp
      000A69 24 FC            [12] 2922 	add	a,#0xfc
      000A6B F5 81            [12] 2923 	mov	sp,a
                                   2924 ;	src/main.c:688: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[*apu8LineFiAddr]);
      000A6D 85*0E 82         [24] 2925 	mov	dpl,_act_by_one_key_sloc0_1_0
      000A70 85*0F 83         [24] 2926 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      000A73 85*10 F0         [24] 2927 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      000A76 12r00r00         [24] 2928 	lcall	__gptrget
      000A79 75 F0 04         [24] 2929 	mov	b,#0x04
      000A7C A4               [48] 2930 	mul	ab
      000A7D 24r36            [12] 2931 	add	a,#_gpu32UartSpeed
      000A7F F5 82            [12] 2932 	mov	dpl,a
      000A81 74s00            [12] 2933 	mov	a,#(_gpu32UartSpeed >> 8)
      000A83 35 F0            [12] 2934 	addc	a,b
      000A85 F5 83            [12] 2935 	mov	dph,a
      000A87 E0               [24] 2936 	movx	a,@dptr
      000A88 F8               [12] 2937 	mov	r0,a
      000A89 A3               [24] 2938 	inc	dptr
      000A8A E0               [24] 2939 	movx	a,@dptr
      000A8B F9               [12] 2940 	mov	r1,a
      000A8C A3               [24] 2941 	inc	dptr
      000A8D E0               [24] 2942 	movx	a,@dptr
      000A8E FA               [12] 2943 	mov	r2,a
      000A8F A3               [24] 2944 	inc	dptr
      000A90 E0               [24] 2945 	movx	a,@dptr
      000A91 FB               [12] 2946 	mov	r3,a
      000A92 C0 00            [24] 2947 	push	ar0
      000A94 C0 01            [24] 2948 	push	ar1
      000A96 C0 02            [24] 2949 	push	ar2
      000A98 C0 03            [24] 2950 	push	ar3
      000A9A 74rD9            [12] 2951 	mov	a,#___str_47
      000A9C C0 E0            [24] 2952 	push	acc
      000A9E 74s02            [12] 2953 	mov	a,#(___str_47 >> 8)
      000AA0 C0 E0            [24] 2954 	push	acc
      000AA2 12r00r00         [24] 2955 	lcall	_printf_fast_f
      000AA5 E5 81            [12] 2956 	mov	a,sp
      000AA7 24 FA            [12] 2957 	add	a,#0xfa
      000AA9 F5 81            [12] 2958 	mov	sp,a
                                   2959 ;	src/main.c:689: break;
      000AAB 22               [24] 2960 	ret
                                   2961 ;	src/main.c:690: default :
      000AAC                       2962 00125$:
                                   2963 ;	src/main.c:691: send_octet_to_linefi((((*apu8LineFiAddr)<<4)&0xF0) | (*apu8LineFiCmd)&0x0F);
      000AAC A9*0B            [24] 2964 	mov	r1,_act_by_one_key_PARM_3
      000AAE AA*0C            [24] 2965 	mov	r2,(_act_by_one_key_PARM_3 + 1)
      000AB0 AB*0D            [24] 2966 	mov	r3,(_act_by_one_key_PARM_3 + 2)
      000AB2 89 82            [24] 2967 	mov	dpl,r1
      000AB4 8A 83            [24] 2968 	mov	dph,r2
      000AB6 8B F0            [24] 2969 	mov	b,r3
      000AB8 12r00r00         [24] 2970 	lcall	__gptrget
      000ABB C4               [12] 2971 	swap	a
      000ABC 54 F0            [12] 2972 	anl	a,#0xf0
      000ABE F8               [12] 2973 	mov	r0,a
      000ABF 53 00 F0         [24] 2974 	anl	ar0,#0xf0
      000AC2 74 0F            [12] 2975 	mov	a,#0x0f
      000AC4 5C               [12] 2976 	anl	a,r4
      000AC5 48               [12] 2977 	orl	a,r0
      000AC6 F5 82            [12] 2978 	mov	dpl,a
      000AC8 C0 07            [24] 2979 	push	ar7
      000ACA C0 06            [24] 2980 	push	ar6
      000ACC C0 05            [24] 2981 	push	ar5
      000ACE C0 03            [24] 2982 	push	ar3
      000AD0 C0 02            [24] 2983 	push	ar2
      000AD2 C0 01            [24] 2984 	push	ar1
      000AD4 12r00r00         [24] 2985 	lcall	_send_octet_to_linefi
      000AD7 D0 01            [24] 2986 	pop	ar1
      000AD9 D0 02            [24] 2987 	pop	ar2
      000ADB D0 03            [24] 2988 	pop	ar3
      000ADD D0 05            [24] 2989 	pop	ar5
      000ADF D0 06            [24] 2990 	pop	ar6
      000AE1 D0 07            [24] 2991 	pop	ar7
                                   2992 ;	src/main.c:692: printf_fast_f("LineFi Sending: 0x%x:\n\r", ((*apu8LineFiAddr)<<4) | *apu8LineFiCmd);
      000AE3 89 82            [24] 2993 	mov	dpl,r1
      000AE5 8A 83            [24] 2994 	mov	dph,r2
      000AE7 8B F0            [24] 2995 	mov	b,r3
      000AE9 12r00r00         [24] 2996 	lcall	__gptrget
      000AEC F9               [12] 2997 	mov	r1,a
      000AED E4               [12] 2998 	clr	a
      000AEE C9               [12] 2999 	xch	a,r1
      000AEF C4               [12] 3000 	swap	a
      000AF0 C9               [12] 3001 	xch	a,r1
      000AF1 69               [12] 3002 	xrl	a,r1
      000AF2 C9               [12] 3003 	xch	a,r1
      000AF3 54 F0            [12] 3004 	anl	a,#0xf0
      000AF5 C9               [12] 3005 	xch	a,r1
      000AF6 69               [12] 3006 	xrl	a,r1
      000AF7 FC               [12] 3007 	mov	r4,a
      000AF8 8D 82            [24] 3008 	mov	dpl,r5
      000AFA 8E 83            [24] 3009 	mov	dph,r6
      000AFC 8F F0            [24] 3010 	mov	b,r7
      000AFE 12r00r00         [24] 3011 	lcall	__gptrget
      000B01 7F 00            [12] 3012 	mov	r7,#0x00
      000B03 42 01            [12] 3013 	orl	ar1,a
      000B05 EF               [12] 3014 	mov	a,r7
      000B06 42 04            [12] 3015 	orl	ar4,a
      000B08 C0 01            [24] 3016 	push	ar1
      000B0A C0 04            [24] 3017 	push	ar4
      000B0C 74r08            [12] 3018 	mov	a,#___str_50
      000B0E C0 E0            [24] 3019 	push	acc
      000B10 74s03            [12] 3020 	mov	a,#(___str_50 >> 8)
      000B12 C0 E0            [24] 3021 	push	acc
      000B14 12r00r00         [24] 3022 	lcall	_printf_fast_f
      000B17 E5 81            [12] 3023 	mov	a,sp
      000B19 24 FC            [12] 3024 	add	a,#0xfc
      000B1B F5 81            [12] 3025 	mov	sp,a
                                   3026 ;	src/main.c:695: break;
      000B1D 22               [24] 3027 	ret
                                   3028 ;	src/main.c:696: case 'u' :
      000B1E                       3029 00127$:
                                   3030 ;	src/main.c:697: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[*apu8LineFiAddr]);
      000B1E AD*0B            [24] 3031 	mov	r5,_act_by_one_key_PARM_3
      000B20 AE*0C            [24] 3032 	mov	r6,(_act_by_one_key_PARM_3 + 1)
      000B22 AF*0D            [24] 3033 	mov	r7,(_act_by_one_key_PARM_3 + 2)
      000B24 8D 82            [24] 3034 	mov	dpl,r5
      000B26 8E 83            [24] 3035 	mov	dph,r6
      000B28 8F F0            [24] 3036 	mov	b,r7
      000B2A 12r00r00         [24] 3037 	lcall	__gptrget
      000B2D 75 F0 04         [24] 3038 	mov	b,#0x04
      000B30 A4               [48] 3039 	mul	ab
      000B31 24r36            [12] 3040 	add	a,#_gpu32UartSpeed
      000B33 F5 82            [12] 3041 	mov	dpl,a
      000B35 74s00            [12] 3042 	mov	a,#(_gpu32UartSpeed >> 8)
      000B37 35 F0            [12] 3043 	addc	a,b
      000B39 F5 83            [12] 3044 	mov	dph,a
      000B3B E0               [24] 3045 	movx	a,@dptr
      000B3C F9               [12] 3046 	mov	r1,a
      000B3D A3               [24] 3047 	inc	dptr
      000B3E E0               [24] 3048 	movx	a,@dptr
      000B3F FA               [12] 3049 	mov	r2,a
      000B40 A3               [24] 3050 	inc	dptr
      000B41 E0               [24] 3051 	movx	a,@dptr
      000B42 FB               [12] 3052 	mov	r3,a
      000B43 A3               [24] 3053 	inc	dptr
      000B44 E0               [24] 3054 	movx	a,@dptr
      000B45 FC               [12] 3055 	mov	r4,a
      000B46 C0 07            [24] 3056 	push	ar7
      000B48 C0 06            [24] 3057 	push	ar6
      000B4A C0 05            [24] 3058 	push	ar5
      000B4C C0 01            [24] 3059 	push	ar1
      000B4E C0 02            [24] 3060 	push	ar2
      000B50 C0 03            [24] 3061 	push	ar3
      000B52 C0 04            [24] 3062 	push	ar4
      000B54 74rD9            [12] 3063 	mov	a,#___str_47
      000B56 C0 E0            [24] 3064 	push	acc
      000B58 74s02            [12] 3065 	mov	a,#(___str_47 >> 8)
      000B5A C0 E0            [24] 3066 	push	acc
      000B5C 12r00r00         [24] 3067 	lcall	_printf_fast_f
      000B5F E5 81            [12] 3068 	mov	a,sp
      000B61 24 FA            [12] 3069 	add	a,#0xfa
      000B63 F5 81            [12] 3070 	mov	sp,a
      000B65 D0 05            [24] 3071 	pop	ar5
      000B67 D0 06            [24] 3072 	pop	ar6
      000B69 D0 07            [24] 3073 	pop	ar7
                                   3074 ;	src/main.c:698: InitialUART1_Timer3(gpu32UartSpeed[*apu8LineFiAddr]);
      000B6B 8D 82            [24] 3075 	mov	dpl,r5
      000B6D 8E 83            [24] 3076 	mov	dph,r6
      000B6F 8F F0            [24] 3077 	mov	b,r7
      000B71 12r00r00         [24] 3078 	lcall	__gptrget
      000B74 75 F0 04         [24] 3079 	mov	b,#0x04
      000B77 A4               [48] 3080 	mul	ab
      000B78 24r36            [12] 3081 	add	a,#_gpu32UartSpeed
      000B7A F5 82            [12] 3082 	mov	dpl,a
      000B7C 74s00            [12] 3083 	mov	a,#(_gpu32UartSpeed >> 8)
      000B7E 35 F0            [12] 3084 	addc	a,b
      000B80 F5 83            [12] 3085 	mov	dph,a
      000B82 E0               [24] 3086 	movx	a,@dptr
      000B83 FC               [12] 3087 	mov	r4,a
      000B84 A3               [24] 3088 	inc	dptr
      000B85 E0               [24] 3089 	movx	a,@dptr
      000B86 FD               [12] 3090 	mov	r5,a
      000B87 A3               [24] 3091 	inc	dptr
      000B88 E0               [24] 3092 	movx	a,@dptr
      000B89 FE               [12] 3093 	mov	r6,a
      000B8A A3               [24] 3094 	inc	dptr
      000B8B E0               [24] 3095 	movx	a,@dptr
      000B8C 8C 82            [24] 3096 	mov	dpl,r4
      000B8E 8D 83            [24] 3097 	mov	dph,r5
      000B90 8E F0            [24] 3098 	mov	b,r6
                                   3099 ;	src/main.c:699: break;
      000B92 02r00r00         [24] 3100 	ljmp	_InitialUART1_Timer3
                                   3101 ;	src/main.c:701: case 'S' :
      000B95                       3102 00128$:
                                   3103 ;	src/main.c:702: send_octet_to_linefi(u8Data);
      000B95 90r00r6E         [24] 3104 	mov	dptr,#_act_by_one_key_u8Data_65536_96
      000B98 E0               [24] 3105 	movx	a,@dptr
      000B99 F5 82            [12] 3106 	mov	dpl,a
      000B9B 12r00r00         [24] 3107 	lcall	_send_octet_to_linefi
                                   3108 ;	src/main.c:703: printf_fast_f("LineFi Sending: %d(0x%x)\n\r", u8Data, u8Data);
      000B9E 90r00r6E         [24] 3109 	mov	dptr,#_act_by_one_key_u8Data_65536_96
      000BA1 E0               [24] 3110 	movx	a,@dptr
      000BA2 FF               [12] 3111 	mov	r7,a
      000BA3 7E 00            [12] 3112 	mov	r6,#0x00
      000BA5 C0 07            [24] 3113 	push	ar7
      000BA7 C0 06            [24] 3114 	push	ar6
      000BA9 C0 07            [24] 3115 	push	ar7
      000BAB C0 06            [24] 3116 	push	ar6
      000BAD 74r31            [12] 3117 	mov	a,#___str_52
      000BAF C0 E0            [24] 3118 	push	acc
      000BB1 74s03            [12] 3119 	mov	a,#(___str_52 >> 8)
      000BB3 C0 E0            [24] 3120 	push	acc
      000BB5 12r00r00         [24] 3121 	lcall	_printf_fast_f
      000BB8 E5 81            [12] 3122 	mov	a,sp
      000BBA 24 FA            [12] 3123 	add	a,#0xfa
      000BBC F5 81            [12] 3124 	mov	sp,a
                                   3125 ;	src/main.c:704: break;
                                   3126 ;	src/main.c:705: case '+' :
      000BBE 22               [24] 3127 	ret
      000BBF                       3128 00129$:
                                   3129 ;	src/main.c:706: u8Data++;
      000BBF 90r00r6E         [24] 3130 	mov	dptr,#_act_by_one_key_u8Data_65536_96
      000BC2 E0               [24] 3131 	movx	a,@dptr
      000BC3 24 01            [12] 3132 	add	a,#0x01
      000BC5 F0               [24] 3133 	movx	@dptr,a
                                   3134 ;	src/main.c:707: printf_fast_f("send data %d(0x%x)\n\r", u8Data, u8Data);
      000BC6 E0               [24] 3135 	movx	a,@dptr
      000BC7 FF               [12] 3136 	mov	r7,a
      000BC8 7E 00            [12] 3137 	mov	r6,#0x00
      000BCA C0 07            [24] 3138 	push	ar7
      000BCC C0 06            [24] 3139 	push	ar6
      000BCE C0 07            [24] 3140 	push	ar7
      000BD0 C0 06            [24] 3141 	push	ar6
      000BD2 74r4C            [12] 3142 	mov	a,#___str_53
      000BD4 C0 E0            [24] 3143 	push	acc
      000BD6 74s03            [12] 3144 	mov	a,#(___str_53 >> 8)
      000BD8 C0 E0            [24] 3145 	push	acc
      000BDA 12r00r00         [24] 3146 	lcall	_printf_fast_f
      000BDD E5 81            [12] 3147 	mov	a,sp
      000BDF 24 FA            [12] 3148 	add	a,#0xfa
      000BE1 F5 81            [12] 3149 	mov	sp,a
                                   3150 ;	src/main.c:708: break;
                                   3151 ;	src/main.c:709: case '-' :
      000BE3 22               [24] 3152 	ret
      000BE4                       3153 00130$:
                                   3154 ;	src/main.c:710: u8Data--;
      000BE4 90r00r6E         [24] 3155 	mov	dptr,#_act_by_one_key_u8Data_65536_96
      000BE7 E0               [24] 3156 	movx	a,@dptr
      000BE8 14               [12] 3157 	dec	a
      000BE9 F0               [24] 3158 	movx	@dptr,a
                                   3159 ;	src/main.c:711: printf_fast_f("send data %d(0x%x)\n\r", u8Data, u8Data);
      000BEA E0               [24] 3160 	movx	a,@dptr
      000BEB FF               [12] 3161 	mov	r7,a
      000BEC 7E 00            [12] 3162 	mov	r6,#0x00
      000BEE C0 07            [24] 3163 	push	ar7
      000BF0 C0 06            [24] 3164 	push	ar6
      000BF2 C0 07            [24] 3165 	push	ar7
      000BF4 C0 06            [24] 3166 	push	ar6
      000BF6 74r4C            [12] 3167 	mov	a,#___str_53
      000BF8 C0 E0            [24] 3168 	push	acc
      000BFA 74s03            [12] 3169 	mov	a,#(___str_53 >> 8)
      000BFC C0 E0            [24] 3170 	push	acc
      000BFE 12r00r00         [24] 3171 	lcall	_printf_fast_f
      000C01 E5 81            [12] 3172 	mov	a,sp
      000C03 24 FA            [12] 3173 	add	a,#0xfa
      000C05 F5 81            [12] 3174 	mov	sp,a
                                   3175 ;	src/main.c:712: break;
                                   3176 ;	src/main.c:714: case 'a' :
      000C07 22               [24] 3177 	ret
      000C08                       3178 00131$:
                                   3179 ;	src/main.c:715: send_octet_to_linefi(0x11);
      000C08 75 82 11         [24] 3180 	mov	dpl,#0x11
                                   3181 ;	src/main.c:716: break;
                                   3182 ;	src/main.c:717: case 'b' :
      000C0B 02r00r00         [24] 3183 	ljmp	_send_octet_to_linefi
      000C0E                       3184 00132$:
                                   3185 ;	src/main.c:718: send_octet_to_linefi(0x12);
      000C0E 75 82 12         [24] 3186 	mov	dpl,#0x12
                                   3187 ;	src/main.c:719: break;
                                   3188 ;	src/main.c:720: case 'c' :
      000C11 02r00r00         [24] 3189 	ljmp	_send_octet_to_linefi
      000C14                       3190 00133$:
                                   3191 ;	src/main.c:721: send_octet_to_linefi(0x13);
      000C14 75 82 13         [24] 3192 	mov	dpl,#0x13
                                   3193 ;	src/main.c:722: break;
                                   3194 ;	src/main.c:723: case 'H' :
                                   3195 ;	src/main.c:724: print_help();
                                   3196 ;	src/main.c:726: } //switch(au8RxUART)
                                   3197 ;	src/main.c:727: }
      000C17 02r00r00         [24] 3198 	ljmp	_send_octet_to_linefi
                                   3199 ;------------------------------------------------------------
                                   3200 ;Allocation info for local variables in function 'main'
                                   3201 ;------------------------------------------------------------
                                   3202 ;su8SW                     Allocated to registers 
                                   3203 ;u8EnCnt                   Allocated to registers 
                                   3204 ;u8RxUART                  Allocated with name '_main_u8RxUART_65536_105'
                                   3205 ;u16Cnt                    Allocated to registers r4 r5 
                                   3206 ;u8OutputState             Allocated to registers 
                                   3207 ;u8StateRxCSC              Allocated to registers 
                                   3208 ;u8LineFiAddr              Allocated with name '_main_u8LineFiAddr_65536_105'
                                   3209 ;u8LineFiSpeed             Allocated to registers 
                                   3210 ;u8LineFiCmd               Allocated with name '_main_u8LineFiCmd_65536_105'
                                   3211 ;u8PwrOnFirstFlag          Allocated to registers r7 
                                   3212 ;u8SwNum                   Allocated with name '_main_u8SwNum_65536_105'
                                   3213 ;u8StateUart0InputMode     Allocated to registers r6 
                                   3214 ;stLineFiPkt               Allocated with name '_main_stLineFiPkt_65536_105'
                                   3215 ;u8RxBufIdx                Allocated to registers 
                                   3216 ;u8Count2                  Allocated to registers 
                                   3217 ;u8RxPktCnt                Allocated to registers 
                                   3218 ;u8PreambleCnt             Allocated to registers 
                                   3219 ;i                         Allocated to registers r5 
                                   3220 ;pcBuf                     Allocated with name '_main_pcBuf_65536_105'
                                   3221 ;pu8Data                   Allocated with name '_main_pu8Data_65536_105'
                                   3222 ;u8DataIdx                 Allocated with name '_main_u8DataIdx_65536_105'
                                   3223 ;ucBufIdx                  Allocated with name '_main_ucBufIdx_65536_105'
                                   3224 ;pstLineFiPkt              Allocated with name '_main_pstLineFiPkt_65536_105'
                                   3225 ;------------------------------------------------------------
                                   3226 ;	src/main.c:732: void main (void)
                                   3227 ;	-----------------------------------------
                                   3228 ;	 function main
                                   3229 ;	-----------------------------------------
      000C1A                       3230 _main:
                                   3231 ;	src/main.c:740: UINT8 u8LineFiAddr = 1;
      000C1A 75*12 01         [24] 3232 	mov	_main_u8LineFiAddr_65536_105,#0x01
                                   3233 ;	src/main.c:742: UINT8 u8LineFiCmd = 1;
      000C1D 75*13 01         [24] 3234 	mov	_main_u8LineFiCmd_65536_105,#0x01
                                   3235 ;	src/main.c:743: UINT8 u8PwrOnFirstFlag = 1;
      000C20 7F 01            [12] 3236 	mov	r7,#0x01
                                   3237 ;	src/main.c:746: uint8 u8StateUart0InputMode = UART0_INPUT_MODE0;
      000C22 7E 00            [12] 3238 	mov	r6,#0x00
                                   3239 ;	src/main.c:750: unsigned char __xdata pu8Data[MAX_DATA] = {0,0,0,0,0,0,0,0,0,0};
      000C24 90r00rD3         [24] 3240 	mov	dptr,#_main_pu8Data_65536_105
      000C27 E4               [12] 3241 	clr	a
      000C28 F0               [24] 3242 	movx	@dptr,a
      000C29 90r00rD4         [24] 3243 	mov	dptr,#(_main_pu8Data_65536_105 + 0x0001)
      000C2C F0               [24] 3244 	movx	@dptr,a
      000C2D 90r00rD5         [24] 3245 	mov	dptr,#(_main_pu8Data_65536_105 + 0x0002)
      000C30 F0               [24] 3246 	movx	@dptr,a
      000C31 90r00rD6         [24] 3247 	mov	dptr,#(_main_pu8Data_65536_105 + 0x0003)
      000C34 F0               [24] 3248 	movx	@dptr,a
      000C35 90r00rD7         [24] 3249 	mov	dptr,#(_main_pu8Data_65536_105 + 0x0004)
      000C38 F0               [24] 3250 	movx	@dptr,a
      000C39 90r00rD8         [24] 3251 	mov	dptr,#(_main_pu8Data_65536_105 + 0x0005)
      000C3C F0               [24] 3252 	movx	@dptr,a
      000C3D 90r00rD9         [24] 3253 	mov	dptr,#(_main_pu8Data_65536_105 + 0x0006)
      000C40 F0               [24] 3254 	movx	@dptr,a
      000C41 90r00rDA         [24] 3255 	mov	dptr,#(_main_pu8Data_65536_105 + 0x0007)
      000C44 F0               [24] 3256 	movx	@dptr,a
      000C45 90r00rDB         [24] 3257 	mov	dptr,#(_main_pu8Data_65536_105 + 0x0008)
      000C48 F0               [24] 3258 	movx	@dptr,a
      000C49 90r00rDC         [24] 3259 	mov	dptr,#(_main_pu8Data_65536_105 + 0x0009)
      000C4C F0               [24] 3260 	movx	@dptr,a
                                   3261 ;	src/main.c:751: unsigned char __xdata u8DataIdx = 0;
      000C4D 90r00rDD         [24] 3262 	mov	dptr,#_main_u8DataIdx_65536_105
      000C50 F0               [24] 3263 	movx	@dptr,a
                                   3264 ;	src/main.c:752: uint8  __xdata ucBufIdx = 0;
      000C51 90r00rDE         [24] 3265 	mov	dptr,#_main_ucBufIdx_65536_105
      000C54 F0               [24] 3266 	movx	@dptr,a
                                   3267 ;	src/main.c:754: linefi_packet_t __xdata pstLineFiPkt[] = {
      000C55 90r00rDF         [24] 3268 	mov	dptr,#_main_pstLineFiPkt_65536_105
      000C58 04               [12] 3269 	inc	a
      000C59 F0               [24] 3270 	movx	@dptr,a
      000C5A 90r00rE0         [24] 3271 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0001)
      000C5D 04               [12] 3272 	inc	a
      000C5E F0               [24] 3273 	movx	@dptr,a
      000C5F 90r00rE1         [24] 3274 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0002)
      000C62 14               [12] 3275 	dec	a
      000C63 F0               [24] 3276 	movx	@dptr,a
      000C64 90r00rE2         [24] 3277 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0003)
      000C67 74 0A            [12] 3278 	mov	a,#0x0a
      000C69 F0               [24] 3279 	movx	@dptr,a
      000C6A 90r00rE3         [24] 3280 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0004)
      000C6D 03               [12] 3281 	rr	a
      000C6E F0               [24] 3282 	movx	@dptr,a
      000C6F 90r00rE4         [24] 3283 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0005)
      000C72 74r0C            [12] 3284 	mov	a,#_gpu8Data
      000C74 F0               [24] 3285 	movx	@dptr,a
      000C75 74s00            [12] 3286 	mov	a,#(_gpu8Data >> 8)
      000C77 A3               [24] 3287 	inc	dptr
      000C78 F0               [24] 3288 	movx	@dptr,a
      000C79 E4               [12] 3289 	clr	a
      000C7A A3               [24] 3290 	inc	dptr
      000C7B F0               [24] 3291 	movx	@dptr,a
      000C7C 90r00rE7         [24] 3292 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0008)
      000C7F 04               [12] 3293 	inc	a
      000C80 F0               [24] 3294 	movx	@dptr,a
      000C81 90r00rE8         [24] 3295 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0009)
      000C84 04               [12] 3296 	inc	a
      000C85 F0               [24] 3297 	movx	@dptr,a
      000C86 90r00rE9         [24] 3298 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x000a)
      000C89 F0               [24] 3299 	movx	@dptr,a
      000C8A 90r00rEA         [24] 3300 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x000b)
      000C8D 74 0A            [12] 3301 	mov	a,#0x0a
      000C8F F0               [24] 3302 	movx	@dptr,a
      000C90 90r00rEB         [24] 3303 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x000c)
      000C93 03               [12] 3304 	rr	a
      000C94 F0               [24] 3305 	movx	@dptr,a
      000C95 90r00rEC         [24] 3306 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x000d)
      000C98 74r0C            [12] 3307 	mov	a,#_gpu8Data
      000C9A F0               [24] 3308 	movx	@dptr,a
      000C9B 74s00            [12] 3309 	mov	a,#(_gpu8Data >> 8)
      000C9D A3               [24] 3310 	inc	dptr
      000C9E F0               [24] 3311 	movx	@dptr,a
      000C9F E4               [12] 3312 	clr	a
      000CA0 A3               [24] 3313 	inc	dptr
      000CA1 F0               [24] 3314 	movx	@dptr,a
      000CA2 90r00rEF         [24] 3315 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0010)
      000CA5 04               [12] 3316 	inc	a
      000CA6 F0               [24] 3317 	movx	@dptr,a
      000CA7 90r00rF0         [24] 3318 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0011)
      000CAA 04               [12] 3319 	inc	a
      000CAB F0               [24] 3320 	movx	@dptr,a
      000CAC 90r00rF1         [24] 3321 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0012)
      000CAF 04               [12] 3322 	inc	a
      000CB0 F0               [24] 3323 	movx	@dptr,a
      000CB1 90r00rF2         [24] 3324 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0013)
      000CB4 74 0A            [12] 3325 	mov	a,#0x0a
      000CB6 F0               [24] 3326 	movx	@dptr,a
      000CB7 90r00rF3         [24] 3327 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0014)
      000CBA 03               [12] 3328 	rr	a
      000CBB F0               [24] 3329 	movx	@dptr,a
      000CBC 90r00rF4         [24] 3330 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0015)
      000CBF 74r0C            [12] 3331 	mov	a,#_gpu8Data
      000CC1 F0               [24] 3332 	movx	@dptr,a
      000CC2 74s00            [12] 3333 	mov	a,#(_gpu8Data >> 8)
      000CC4 A3               [24] 3334 	inc	dptr
      000CC5 F0               [24] 3335 	movx	@dptr,a
      000CC6 E4               [12] 3336 	clr	a
      000CC7 A3               [24] 3337 	inc	dptr
      000CC8 F0               [24] 3338 	movx	@dptr,a
      000CC9 90r00rF7         [24] 3339 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0018)
      000CCC 04               [12] 3340 	inc	a
      000CCD F0               [24] 3341 	movx	@dptr,a
      000CCE 90r00rF8         [24] 3342 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0019)
      000CD1 04               [12] 3343 	inc	a
      000CD2 F0               [24] 3344 	movx	@dptr,a
      000CD3 90r00rF9         [24] 3345 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x001a)
      000CD6 23               [12] 3346 	rl	a
      000CD7 F0               [24] 3347 	movx	@dptr,a
      000CD8 90r00rFA         [24] 3348 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x001b)
      000CDB 74 0A            [12] 3349 	mov	a,#0x0a
      000CDD F0               [24] 3350 	movx	@dptr,a
      000CDE 90r00rFB         [24] 3351 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x001c)
      000CE1 03               [12] 3352 	rr	a
      000CE2 F0               [24] 3353 	movx	@dptr,a
      000CE3 90r00rFC         [24] 3354 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x001d)
      000CE6 74r0C            [12] 3355 	mov	a,#_gpu8Data
      000CE8 F0               [24] 3356 	movx	@dptr,a
      000CE9 74s00            [12] 3357 	mov	a,#(_gpu8Data >> 8)
      000CEB A3               [24] 3358 	inc	dptr
      000CEC F0               [24] 3359 	movx	@dptr,a
      000CED E4               [12] 3360 	clr	a
      000CEE A3               [24] 3361 	inc	dptr
      000CEF F0               [24] 3362 	movx	@dptr,a
      000CF0 90r00rFF         [24] 3363 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0020)
      000CF3 04               [12] 3364 	inc	a
      000CF4 F0               [24] 3365 	movx	@dptr,a
      000CF5 90r01r00         [24] 3366 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0021)
      000CF8 04               [12] 3367 	inc	a
      000CF9 F0               [24] 3368 	movx	@dptr,a
      000CFA 90r01r01         [24] 3369 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0022)
      000CFD 74 05            [12] 3370 	mov	a,#0x05
      000CFF F0               [24] 3371 	movx	@dptr,a
      000D00 90r01r02         [24] 3372 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0023)
      000D03 23               [12] 3373 	rl	a
      000D04 F0               [24] 3374 	movx	@dptr,a
      000D05 90r01r03         [24] 3375 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0024)
      000D08 03               [12] 3376 	rr	a
      000D09 F0               [24] 3377 	movx	@dptr,a
      000D0A 90r01r04         [24] 3378 	mov	dptr,#(_main_pstLineFiPkt_65536_105 + 0x0025)
      000D0D 74r0C            [12] 3379 	mov	a,#_gpu8Data
      000D0F F0               [24] 3380 	movx	@dptr,a
      000D10 74s00            [12] 3381 	mov	a,#(_gpu8Data >> 8)
      000D12 A3               [24] 3382 	inc	dptr
      000D13 F0               [24] 3383 	movx	@dptr,a
      000D14 E4               [12] 3384 	clr	a
      000D15 A3               [24] 3385 	inc	dptr
      000D16 F0               [24] 3386 	movx	@dptr,a
                                   3387 ;	src/main.c:762: linefi_packet_t stLineFiPkt = {
                                   3388 ;	1-genFromRTrack replaced	mov	_main_stLineFiPkt_65536_105,#0x01
      000D17 8F*15            [24] 3389 	mov	_main_stLineFiPkt_65536_105,r7
      000D19 75*16 02         [24] 3390 	mov	(_main_stLineFiPkt_65536_105 + 0x0001),#0x02
      000D1C 75*17 03         [24] 3391 	mov	(_main_stLineFiPkt_65536_105 + 0x0002),#0x03
      000D1F 75*18 0A         [24] 3392 	mov	(_main_stLineFiPkt_65536_105 + 0x0003),#0x0a
      000D22 75*19 05         [24] 3393 	mov	(_main_stLineFiPkt_65536_105 + 0x0004),#0x05
      000D25 75*1Ar0C         [24] 3394 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 0),#_gpu8Data
      000D28 75*1Bs00         [24] 3395 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 1),#(_gpu8Data >> 8)
                                   3396 ;	1-genFromRTrack replaced	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 2),#0x00
      000D2B F5*1C            [12] 3397 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 2),a
                                   3398 ;	src/main.c:771: gpio_setup();
      000D2D C0 07            [24] 3399 	push	ar7
      000D2F C0 06            [24] 3400 	push	ar6
      000D31 12r03rA5         [24] 3401 	lcall	_gpio_setup
                                   3402 ;	src/main.c:772: uart_setup();
      000D34 12r00r00         [24] 3403 	lcall	_uart_setup
                                   3404 ;	src/main.c:774: MODIFY_HIRC_166();
      000D37 12r02r2B         [24] 3405 	lcall	_MODIFY_HIRC_166
                                   3406 ;	src/main.c:776: clr_T0M;// 16/12 MHz
      000D3A 53 8E F7         [24] 3407 	anl	_CKCON,#0xf7
                                   3408 ;	src/main.c:779: set_ET0;                                    //enable Timer0 interrupt
                                   3409 ;	assignBit
      000D3D D2 A9            [12] 3410 	setb	_ET0
                                   3411 ;	src/main.c:780: set_TR0;                                    //Timer0 run
                                   3412 ;	assignBit
      000D3F D2 8C            [12] 3413 	setb	_TR0
                                   3414 ;	src/main.c:782: gu8UART = 0;
      000D41 75*00 00         [24] 3415 	mov	_gu8UART,#0x00
                                   3416 ;	src/main.c:783: printf_fast_f("This is UART0\n\r");
      000D44 74r61            [12] 3417 	mov	a,#___str_54
      000D46 C0 E0            [24] 3418 	push	acc
      000D48 74s03            [12] 3419 	mov	a,#(___str_54 >> 8)
      000D4A C0 E0            [24] 3420 	push	acc
      000D4C 12r00r00         [24] 3421 	lcall	_printf_fast_f
      000D4F 15 81            [12] 3422 	dec	sp
      000D51 15 81            [12] 3423 	dec	sp
                                   3424 ;	src/main.c:784: printf_fast_f("LineFi Master\n\r");
      000D53 74r71            [12] 3425 	mov	a,#___str_55
      000D55 C0 E0            [24] 3426 	push	acc
      000D57 74s03            [12] 3427 	mov	a,#(___str_55 >> 8)
      000D59 C0 E0            [24] 3428 	push	acc
      000D5B 12r00r00         [24] 3429 	lcall	_printf_fast_f
      000D5E 15 81            [12] 3430 	dec	sp
      000D60 15 81            [12] 3431 	dec	sp
                                   3432 ;	src/main.c:785: gu8UART = 1;
      000D62 75*00 01         [24] 3433 	mov	_gu8UART,#0x01
                                   3434 ;	src/main.c:786: printf_fast_f("This is UART1\n\r");
      000D65 74r81            [12] 3435 	mov	a,#___str_56
      000D67 C0 E0            [24] 3436 	push	acc
      000D69 74s03            [12] 3437 	mov	a,#(___str_56 >> 8)
      000D6B C0 E0            [24] 3438 	push	acc
      000D6D 12r00r00         [24] 3439 	lcall	_printf_fast_f
      000D70 15 81            [12] 3440 	dec	sp
      000D72 15 81            [12] 3441 	dec	sp
      000D74 D0 06            [24] 3442 	pop	ar6
      000D76 D0 07            [24] 3443 	pop	ar7
                                   3444 ;	src/main.c:793: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000D78 7C 30            [12] 3445 	mov	r4,#0x30
      000D7A 7D 75            [12] 3446 	mov	r5,#0x75
      000D7C                       3447 00197$:
                                   3448 ;	src/main.c:794: nop; nop; nop; nop; nop;
      000D7C 00               [12] 3449 	NOP
      000D7D 00               [12] 3450 	NOP
      000D7E 00               [12] 3451 	NOP
      000D7F 00               [12] 3452 	NOP
      000D80 00               [12] 3453 	NOP
      000D81 1C               [12] 3454 	dec	r4
      000D82 BC FF 01         [24] 3455 	cjne	r4,#0xff,00421$
      000D85 1D               [12] 3456 	dec	r5
      000D86                       3457 00421$:
                                   3458 ;	src/main.c:793: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000D86 EC               [12] 3459 	mov	a,r4
      000D87 4D               [12] 3460 	orl	a,r5
      000D88 70 F2            [24] 3461 	jnz	00197$
                                   3462 ;	src/main.c:796: LINEFI_TX = 1;
                                   3463 ;	assignBit
      000D8A D2 96            [12] 3464 	setb	_P16
                                   3465 ;	src/main.c:797: LINEFI_EN0 = 0;
                                   3466 ;	assignBit
      000D8C C2 90            [12] 3467 	clr	_P10
                                   3468 ;	src/main.c:798: gu8UART = 0;
      000D8E 75*00 00         [24] 3469 	mov	_gu8UART,#0x00
                                   3470 ;	src/main.c:802: InitialUART1_Timer3(gpu32UartSpeed[0]);
      000D91 90r00r36         [24] 3471 	mov	dptr,#_gpu32UartSpeed
      000D94 E0               [24] 3472 	movx	a,@dptr
      000D95 FA               [12] 3473 	mov	r2,a
      000D96 A3               [24] 3474 	inc	dptr
      000D97 E0               [24] 3475 	movx	a,@dptr
      000D98 FB               [12] 3476 	mov	r3,a
      000D99 A3               [24] 3477 	inc	dptr
      000D9A E0               [24] 3478 	movx	a,@dptr
      000D9B FC               [12] 3479 	mov	r4,a
      000D9C A3               [24] 3480 	inc	dptr
      000D9D E0               [24] 3481 	movx	a,@dptr
      000D9E 8A 82            [24] 3482 	mov	dpl,r2
      000DA0 8B 83            [24] 3483 	mov	dph,r3
      000DA2 8C F0            [24] 3484 	mov	b,r4
      000DA4 C0 07            [24] 3485 	push	ar7
      000DA6 C0 06            [24] 3486 	push	ar6
      000DA8 12r00r00         [24] 3487 	lcall	_InitialUART1_Timer3
                                   3488 ;	src/main.c:803: send_octet_to_linefi(((LINEFI_DEFAULT_RATE<<4)&0xF0) | (1)&0x0F);
      000DAB 75 82 31         [24] 3489 	mov	dpl,#0x31
      000DAE 12r00r00         [24] 3490 	lcall	_send_octet_to_linefi
      000DB1 D0 06            [24] 3491 	pop	ar6
      000DB3 D0 07            [24] 3492 	pop	ar7
                                   3493 ;	src/main.c:805: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000DB5 7C 30            [12] 3494 	mov	r4,#0x30
      000DB7 7D 75            [12] 3495 	mov	r5,#0x75
      000DB9                       3496 00200$:
                                   3497 ;	src/main.c:806: nop; nop; nop; nop; nop;
      000DB9 00               [12] 3498 	NOP
      000DBA 00               [12] 3499 	NOP
      000DBB 00               [12] 3500 	NOP
      000DBC 00               [12] 3501 	NOP
      000DBD 00               [12] 3502 	NOP
      000DBE 1C               [12] 3503 	dec	r4
      000DBF BC FF 01         [24] 3504 	cjne	r4,#0xff,00423$
      000DC2 1D               [12] 3505 	dec	r5
      000DC3                       3506 00423$:
                                   3507 ;	src/main.c:805: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000DC3 EC               [12] 3508 	mov	a,r4
      000DC4 4D               [12] 3509 	orl	a,r5
      000DC5 70 F2            [24] 3510 	jnz	00200$
                                   3511 ;	src/main.c:809: InitialUART1_Timer3(gpu32UartSpeed[LINEFI_DEFAULT_RATE]);
      000DC7 90r00r42         [24] 3512 	mov	dptr,#(_gpu32UartSpeed + 0x000c)
      000DCA E0               [24] 3513 	movx	a,@dptr
      000DCB FA               [12] 3514 	mov	r2,a
      000DCC A3               [24] 3515 	inc	dptr
      000DCD E0               [24] 3516 	movx	a,@dptr
      000DCE FB               [12] 3517 	mov	r3,a
      000DCF A3               [24] 3518 	inc	dptr
      000DD0 E0               [24] 3519 	movx	a,@dptr
      000DD1 FC               [12] 3520 	mov	r4,a
      000DD2 A3               [24] 3521 	inc	dptr
      000DD3 E0               [24] 3522 	movx	a,@dptr
      000DD4 8A 82            [24] 3523 	mov	dpl,r2
      000DD6 8B 83            [24] 3524 	mov	dph,r3
      000DD8 8C F0            [24] 3525 	mov	b,r4
      000DDA C0 07            [24] 3526 	push	ar7
      000DDC C0 06            [24] 3527 	push	ar6
      000DDE 12r00r00         [24] 3528 	lcall	_InitialUART1_Timer3
      000DE1 D0 06            [24] 3529 	pop	ar6
      000DE3 D0 07            [24] 3530 	pop	ar7
                                   3531 ;	src/main.c:811: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000DE5 7C 30            [12] 3532 	mov	r4,#0x30
      000DE7 7D 75            [12] 3533 	mov	r5,#0x75
      000DE9                       3534 00203$:
                                   3535 ;	src/main.c:812: nop; nop; nop; nop; nop;
      000DE9 00               [12] 3536 	NOP
      000DEA 00               [12] 3537 	NOP
      000DEB 00               [12] 3538 	NOP
      000DEC 00               [12] 3539 	NOP
      000DED 00               [12] 3540 	NOP
      000DEE 1C               [12] 3541 	dec	r4
      000DEF BC FF 01         [24] 3542 	cjne	r4,#0xff,00425$
      000DF2 1D               [12] 3543 	dec	r5
      000DF3                       3544 00425$:
                                   3545 ;	src/main.c:811: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000DF3 EC               [12] 3546 	mov	a,r4
      000DF4 4D               [12] 3547 	orl	a,r5
      000DF5 70 F2            [24] 3548 	jnz	00203$
                                   3549 ;	src/main.c:814: LINEFI_TX = 1;
                                   3550 ;	assignBit
      000DF7 D2 96            [12] 3551 	setb	_P16
                                   3552 ;	src/main.c:816: LINEFI_EN0 = 0;
                                   3553 ;	assignBit
      000DF9 C2 90            [12] 3554 	clr	_P10
                                   3555 ;	src/main.c:817: LINEFI_EN1 = 1;
                                   3556 ;	assignBit
      000DFB D2 91            [12] 3557 	setb	_P11
                                   3558 ;	src/main.c:818: LINEFI_EN2 = 0;
                                   3559 ;	assignBit
      000DFD C2 92            [12] 3560 	clr	_P12
                                   3561 ;	src/main.c:819: printf("%s\r\n", gcUartInputMode[u8StateUart0InputMode]);
      000DFF 90r00r00         [24] 3562 	mov	dptr,#_gcUartInputMode
      000E02 E0               [24] 3563 	movx	a,@dptr
      000E03 FB               [12] 3564 	mov	r3,a
      000E04 A3               [24] 3565 	inc	dptr
      000E05 E0               [24] 3566 	movx	a,@dptr
      000E06 FC               [12] 3567 	mov	r4,a
      000E07 A3               [24] 3568 	inc	dptr
      000E08 E0               [24] 3569 	movx	a,@dptr
      000E09 FD               [12] 3570 	mov	r5,a
      000E0A C0 07            [24] 3571 	push	ar7
      000E0C C0 06            [24] 3572 	push	ar6
      000E0E C0 03            [24] 3573 	push	ar3
      000E10 C0 04            [24] 3574 	push	ar4
      000E12 C0 05            [24] 3575 	push	ar5
      000E14 74r91            [12] 3576 	mov	a,#___str_57
      000E16 C0 E0            [24] 3577 	push	acc
      000E18 74s03            [12] 3578 	mov	a,#(___str_57 >> 8)
      000E1A C0 E0            [24] 3579 	push	acc
      000E1C 74 80            [12] 3580 	mov	a,#0x80
      000E1E C0 E0            [24] 3581 	push	acc
      000E20 12r00r00         [24] 3582 	lcall	_printf
      000E23 E5 81            [12] 3583 	mov	a,sp
      000E25 24 FA            [12] 3584 	add	a,#0xfa
      000E27 F5 81            [12] 3585 	mov	sp,a
      000E29 D0 06            [24] 3586 	pop	ar6
      000E2B D0 07            [24] 3587 	pop	ar7
                                   3588 ;	src/main.c:821: while(1) {
      000E2D                       3589 00193$:
                                   3590 ;	src/main.c:824: if (Receive_Data_From_UART0_nb(&u8RxUART)) { // 유아트 입력이 있을 때
      000E2D 90r00r11         [24] 3591 	mov	dptr,#_main_u8RxUART_65536_105
      000E30 75 F0 40         [24] 3592 	mov	b,#0x40
      000E33 C0 07            [24] 3593 	push	ar7
      000E35 C0 06            [24] 3594 	push	ar6
      000E37 12r00r00         [24] 3595 	lcall	_Receive_Data_From_UART0_nb
      000E3A E5 82            [12] 3596 	mov	a,dpl
      000E3C D0 06            [24] 3597 	pop	ar6
      000E3E D0 07            [24] 3598 	pop	ar7
      000E40 70 03            [24] 3599 	jnz	00427$
      000E42 02r10rEB         [24] 3600 	ljmp	00160$
      000E45                       3601 00427$:
                                   3602 ;	src/main.c:825: switch(u8RxUART) {
      000E45 74 1B            [12] 3603 	mov	a,#0x1b
      000E47 B5*11 43         [24] 3604 	cjne	a,_main_u8RxUART_65536_105,00107$
                                   3605 ;	src/main.c:827: u8StateUart0InputMode++;
      000E4A 0E               [12] 3606 	inc	r6
                                   3607 ;	src/main.c:828: if (u8StateUart0InputMode == MAX_STATE_UART0_INPUT) {
      000E4B BE 04 02         [24] 3608 	cjne	r6,#0x04,00106$
                                   3609 ;	src/main.c:829: u8StateUart0InputMode = 0;
      000E4E 7E 00            [12] 3610 	mov	r6,#0x00
      000E50                       3611 00106$:
                                   3612 ;	src/main.c:831: printf("%s\r\n", gcUartInputMode[u8StateUart0InputMode]);
      000E50 EE               [12] 3613 	mov	a,r6
      000E51 75 F0 03         [24] 3614 	mov	b,#0x03
      000E54 A4               [48] 3615 	mul	ab
      000E55 24r00            [12] 3616 	add	a,#_gcUartInputMode
      000E57 F5 82            [12] 3617 	mov	dpl,a
      000E59 74s00            [12] 3618 	mov	a,#(_gcUartInputMode >> 8)
      000E5B 35 F0            [12] 3619 	addc	a,b
      000E5D F5 83            [12] 3620 	mov	dph,a
      000E5F E0               [24] 3621 	movx	a,@dptr
      000E60 FB               [12] 3622 	mov	r3,a
      000E61 A3               [24] 3623 	inc	dptr
      000E62 E0               [24] 3624 	movx	a,@dptr
      000E63 FC               [12] 3625 	mov	r4,a
      000E64 A3               [24] 3626 	inc	dptr
      000E65 E0               [24] 3627 	movx	a,@dptr
      000E66 FD               [12] 3628 	mov	r5,a
      000E67 C0 07            [24] 3629 	push	ar7
      000E69 C0 06            [24] 3630 	push	ar6
      000E6B C0 03            [24] 3631 	push	ar3
      000E6D C0 04            [24] 3632 	push	ar4
      000E6F C0 05            [24] 3633 	push	ar5
      000E71 74r91            [12] 3634 	mov	a,#___str_57
      000E73 C0 E0            [24] 3635 	push	acc
      000E75 74s03            [12] 3636 	mov	a,#(___str_57 >> 8)
      000E77 C0 E0            [24] 3637 	push	acc
      000E79 74 80            [12] 3638 	mov	a,#0x80
      000E7B C0 E0            [24] 3639 	push	acc
      000E7D 12r00r00         [24] 3640 	lcall	_printf
      000E80 E5 81            [12] 3641 	mov	a,sp
      000E82 24 FA            [12] 3642 	add	a,#0xfa
      000E84 F5 81            [12] 3643 	mov	sp,a
      000E86 D0 06            [24] 3644 	pop	ar6
      000E88 D0 07            [24] 3645 	pop	ar7
                                   3646 ;	src/main.c:832: break;
      000E8A 02r11r33         [24] 3647 	ljmp	00161$
                                   3648 ;	src/main.c:833: default :
      000E8D                       3649 00107$:
                                   3650 ;	src/main.c:834: switch(u8StateUart0InputMode) {
      000E8D EE               [12] 3651 	mov	a,r6
      000E8E 24 FB            [12] 3652 	add	a,#0xff - 0x04
      000E90 50 03            [24] 3653 	jnc	00432$
      000E92 02r11r33         [24] 3654 	ljmp	00161$
      000E95                       3655 00432$:
      000E95 EE               [12] 3656 	mov	a,r6
      000E96 2E               [12] 3657 	add	a,r6
      000E97 2E               [12] 3658 	add	a,r6
      000E98 90r0Er9C         [24] 3659 	mov	dptr,#00433$
      000E9B 73               [24] 3660 	jmp	@a+dptr
      000E9C                       3661 00433$:
      000E9C 02r0ErAB         [24] 3662 	ljmp	00108$
      000E9F 02r0ErCE         [24] 3663 	ljmp	00109$
      000EA2 02r0ErEC         [24] 3664 	ljmp	00110$
      000EA5 02r0FrDD         [24] 3665 	ljmp	00131$
      000EA8 02r11r33         [24] 3666 	ljmp	00161$
                                   3667 ;	src/main.c:835: case UART0_INPUT_MODE0 :
      000EAB                       3668 00108$:
                                   3669 ;	src/main.c:836: act_by_one_key(u8RxUART, &u8LineFiCmd, &u8LineFiAddr);
      000EAB 75*08r13         [24] 3670 	mov	_act_by_one_key_PARM_2,#_main_u8LineFiCmd_65536_105
      000EAE 75*09 00         [24] 3671 	mov	(_act_by_one_key_PARM_2 + 1),#0x00
      000EB1 75*0A 40         [24] 3672 	mov	(_act_by_one_key_PARM_2 + 2),#0x40
      000EB4 75*0Br12         [24] 3673 	mov	_act_by_one_key_PARM_3,#_main_u8LineFiAddr_65536_105
      000EB7 75*0C 00         [24] 3674 	mov	(_act_by_one_key_PARM_3 + 1),#0x00
      000EBA 75*0D 40         [24] 3675 	mov	(_act_by_one_key_PARM_3 + 2),#0x40
      000EBD 85*11 82         [24] 3676 	mov	dpl,_main_u8RxUART_65536_105
      000EC0 C0 07            [24] 3677 	push	ar7
      000EC2 C0 06            [24] 3678 	push	ar6
      000EC4 12r06r1E         [24] 3679 	lcall	_act_by_one_key
      000EC7 D0 06            [24] 3680 	pop	ar6
      000EC9 D0 07            [24] 3681 	pop	ar7
                                   3682 ;	src/main.c:837: break;
      000ECB 02r11r33         [24] 3683 	ljmp	00161$
                                   3684 ;	src/main.c:838: case UART0_INPUT_MODE1 :
      000ECE                       3685 00109$:
                                   3686 ;	src/main.c:839: gu16TimeCnt = 0;
      000ECE 90r00r34         [24] 3687 	mov	dptr,#_gu16TimeCnt
      000ED1 E4               [12] 3688 	clr	a
      000ED2 F0               [24] 3689 	movx	@dptr,a
      000ED3 A3               [24] 3690 	inc	dptr
      000ED4 F0               [24] 3691 	movx	@dptr,a
                                   3692 ;	src/main.c:840: pcBuf[ucBufIdx++] = u8RxUART;
      000ED5 90r00rDE         [24] 3693 	mov	dptr,#_main_ucBufIdx_65536_105
      000ED8 E0               [24] 3694 	movx	a,@dptr
      000ED9 FD               [12] 3695 	mov	r5,a
      000EDA 04               [12] 3696 	inc	a
      000EDB F0               [24] 3697 	movx	@dptr,a
      000EDC ED               [12] 3698 	mov	a,r5
      000EDD 24r6F            [12] 3699 	add	a,#_main_pcBuf_65536_105
      000EDF F5 82            [12] 3700 	mov	dpl,a
      000EE1 E4               [12] 3701 	clr	a
      000EE2 34s00            [12] 3702 	addc	a,#(_main_pcBuf_65536_105 >> 8)
      000EE4 F5 83            [12] 3703 	mov	dph,a
      000EE6 E5*11            [12] 3704 	mov	a,_main_u8RxUART_65536_105
      000EE8 F0               [24] 3705 	movx	@dptr,a
                                   3706 ;	src/main.c:842: break;
      000EE9 02r11r33         [24] 3707 	ljmp	00161$
                                   3708 ;	src/main.c:843: case UART0_INPUT_MODE2 : // mimic 5keys on board
      000EEC                       3709 00110$:
                                   3710 ;	src/main.c:844: switch(u8RxUART) {
      000EEC 74 66            [12] 3711 	mov	a,#0x66
      000EEE B5*11 02         [24] 3712 	cjne	a,_main_u8RxUART_65536_105,00434$
      000EF1 80 1F            [24] 3713 	sjmp	00111$
      000EF3                       3714 00434$:
      000EF3 74 67            [12] 3715 	mov	a,#0x67
      000EF5 B5*11 02         [24] 3716 	cjne	a,_main_u8RxUART_65536_105,00435$
      000EF8 80 26            [24] 3717 	sjmp	00114$
      000EFA                       3718 00435$:
      000EFA 74 68            [12] 3719 	mov	a,#0x68
      000EFC B5*11 02         [24] 3720 	cjne	a,_main_u8RxUART_65536_105,00436$
      000EFF 80 27            [24] 3721 	sjmp	00117$
      000F01                       3722 00436$:
      000F01 74 6A            [12] 3723 	mov	a,#0x6a
      000F03 B5*11 02         [24] 3724 	cjne	a,_main_u8RxUART_65536_105,00437$
      000F06 80 3C            [24] 3725 	sjmp	00118$
      000F08                       3726 00437$:
      000F08 74 6B            [12] 3727 	mov	a,#0x6b
      000F0A B5*11 02         [24] 3728 	cjne	a,_main_u8RxUART_65536_105,00438$
      000F0D 80 62            [24] 3729 	sjmp	00121$
      000F0F                       3730 00438$:
      000F0F 02r0Fr9C         [24] 3731 	ljmp	00124$
                                   3732 ;	src/main.c:845: case 'f' : // down SW1
      000F12                       3733 00111$:
                                   3734 ;	src/main.c:846: u8LineFiAddr--;
      000F12 15*12            [12] 3735 	dec	_main_u8LineFiAddr_65536_105
                                   3736 ;	src/main.c:847: if (u8LineFiAddr == 0) {
      000F14 E5*12            [12] 3737 	mov	a,_main_u8LineFiAddr_65536_105
      000F16 60 03            [24] 3738 	jz	00439$
      000F18 02r0Fr9C         [24] 3739 	ljmp	00124$
      000F1B                       3740 00439$:
                                   3741 ;	src/main.c:848: u8LineFiAddr = 1;
      000F1B 75*12 01         [24] 3742 	mov	_main_u8LineFiAddr_65536_105,#0x01
                                   3743 ;	src/main.c:850: break;
                                   3744 ;	src/main.c:851: case 'g' : // right SW2
      000F1E 80 7C            [24] 3745 	sjmp	00124$
      000F20                       3746 00114$:
                                   3747 ;	src/main.c:852: u8LineFiCmd--;
                                   3748 ;	src/main.c:853: if (u8LineFiCmd == 0) {
      000F20 D5*13 79         [24] 3749 	djnz	_main_u8LineFiCmd_65536_105,00124$
                                   3750 ;	src/main.c:854: u8LineFiCmd = 1;
      000F23 75*13 01         [24] 3751 	mov	_main_u8LineFiCmd_65536_105,#0x01
                                   3752 ;	src/main.c:856: break;
                                   3753 ;	src/main.c:857: case 'h' : // center SW3
      000F26 80 74            [24] 3754 	sjmp	00124$
      000F28                       3755 00117$:
                                   3756 ;	src/main.c:858: stLineFiPkt.pu8Data = pu8Data;
      000F28 75*1ArD3         [24] 3757 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 0),#_main_pu8Data_65536_105
      000F2B 75*1Bs00         [24] 3758 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 1),#(_main_pu8Data_65536_105 >> 8)
      000F2E 75*1C 00         [24] 3759 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 2),#0x00
                                   3760 ;	src/main.c:859: send_linefi_packet(&stLineFiPkt);
      000F31 90r00r15         [24] 3761 	mov	dptr,#_main_stLineFiPkt_65536_105
      000F34 75 F0 40         [24] 3762 	mov	b,#0x40
      000F37 C0 07            [24] 3763 	push	ar7
      000F39 C0 06            [24] 3764 	push	ar6
      000F3B 12r00r00         [24] 3765 	lcall	_send_linefi_packet
      000F3E D0 06            [24] 3766 	pop	ar6
      000F40 D0 07            [24] 3767 	pop	ar7
                                   3768 ;	src/main.c:860: break;
                                   3769 ;	src/main.c:862: case 'j' : //  left SW4
      000F42 80 58            [24] 3770 	sjmp	00124$
      000F44                       3771 00118$:
                                   3772 ;	src/main.c:863: u8LineFiCmd++;
      000F44 05*13            [12] 3773 	inc	_main_u8LineFiCmd_65536_105
                                   3774 ;	src/main.c:864: if (u8LineFiCmd == 101) {
      000F46 74 65            [12] 3775 	mov	a,#0x65
      000F48 B5*13 03         [24] 3776 	cjne	a,_main_u8LineFiCmd_65536_105,00120$
                                   3777 ;	src/main.c:865: u8LineFiCmd = 100;
      000F4B 75*13 64         [24] 3778 	mov	_main_u8LineFiCmd_65536_105,#0x64
      000F4E                       3779 00120$:
                                   3780 ;	src/main.c:867: printf_fast_f("command: %d\n\r", u8LineFiCmd);
      000F4E AC*13            [24] 3781 	mov	r4,_main_u8LineFiCmd_65536_105
      000F50 7D 00            [12] 3782 	mov	r5,#0x00
      000F52 C0 07            [24] 3783 	push	ar7
      000F54 C0 06            [24] 3784 	push	ar6
      000F56 C0 04            [24] 3785 	push	ar4
      000F58 C0 05            [24] 3786 	push	ar5
      000F5A 74rFA            [12] 3787 	mov	a,#___str_49
      000F5C C0 E0            [24] 3788 	push	acc
      000F5E 74s02            [12] 3789 	mov	a,#(___str_49 >> 8)
      000F60 C0 E0            [24] 3790 	push	acc
      000F62 12r00r00         [24] 3791 	lcall	_printf_fast_f
      000F65 E5 81            [12] 3792 	mov	a,sp
      000F67 24 FC            [12] 3793 	add	a,#0xfc
      000F69 F5 81            [12] 3794 	mov	sp,a
      000F6B D0 06            [24] 3795 	pop	ar6
      000F6D D0 07            [24] 3796 	pop	ar7
                                   3797 ;	src/main.c:868: break;
                                   3798 ;	src/main.c:869: case 'k' : // up SW5
      000F6F 80 2B            [24] 3799 	sjmp	00124$
      000F71                       3800 00121$:
                                   3801 ;	src/main.c:870: u8LineFiAddr++;
      000F71 05*12            [12] 3802 	inc	_main_u8LineFiAddr_65536_105
                                   3803 ;	src/main.c:871: if (u8LineFiAddr == 16) {
      000F73 74 10            [12] 3804 	mov	a,#0x10
      000F75 B5*12 03         [24] 3805 	cjne	a,_main_u8LineFiAddr_65536_105,00123$
                                   3806 ;	src/main.c:872: u8LineFiAddr = 15;
      000F78 75*12 0F         [24] 3807 	mov	_main_u8LineFiAddr_65536_105,#0x0f
      000F7B                       3808 00123$:
                                   3809 ;	src/main.c:874: printf_fast_f("address: %d\n\r", u8LineFiAddr);
      000F7B AC*12            [24] 3810 	mov	r4,_main_u8LineFiAddr_65536_105
      000F7D 7D 00            [12] 3811 	mov	r5,#0x00
      000F7F C0 07            [24] 3812 	push	ar7
      000F81 C0 06            [24] 3813 	push	ar6
      000F83 C0 04            [24] 3814 	push	ar4
      000F85 C0 05            [24] 3815 	push	ar5
      000F87 74rEC            [12] 3816 	mov	a,#___str_48
      000F89 C0 E0            [24] 3817 	push	acc
      000F8B 74s02            [12] 3818 	mov	a,#(___str_48 >> 8)
      000F8D C0 E0            [24] 3819 	push	acc
      000F8F 12r00r00         [24] 3820 	lcall	_printf_fast_f
      000F92 E5 81            [12] 3821 	mov	a,sp
      000F94 24 FC            [12] 3822 	add	a,#0xfc
      000F96 F5 81            [12] 3823 	mov	sp,a
      000F98 D0 06            [24] 3824 	pop	ar6
      000F9A D0 07            [24] 3825 	pop	ar7
                                   3826 ;	src/main.c:876: }
      000F9C                       3827 00124$:
                                   3828 ;	src/main.c:878: switch(u8RxUART) {
      000F9C 74 66            [12] 3829 	mov	a,#0x66
      000F9E B5*11 02         [24] 3830 	cjne	a,_main_u8RxUART_65536_105,00445$
      000FA1 80 20            [24] 3831 	sjmp	00128$
      000FA3                       3832 00445$:
      000FA3 74 67            [12] 3833 	mov	a,#0x67
      000FA5 B5*11 02         [24] 3834 	cjne	a,_main_u8RxUART_65536_105,00446$
      000FA8 80 19            [24] 3835 	sjmp	00128$
      000FAA                       3836 00446$:
      000FAA 74 68            [12] 3837 	mov	a,#0x68
      000FAC B5*11 03         [24] 3838 	cjne	a,_main_u8RxUART_65536_105,00447$
      000FAF 02r11r33         [24] 3839 	ljmp	00161$
      000FB2                       3840 00447$:
      000FB2 74 6A            [12] 3841 	mov	a,#0x6a
      000FB4 B5*11 02         [24] 3842 	cjne	a,_main_u8RxUART_65536_105,00448$
      000FB7 80 0A            [24] 3843 	sjmp	00128$
      000FB9                       3844 00448$:
      000FB9 74 6B            [12] 3845 	mov	a,#0x6b
      000FBB B5*11 02         [24] 3846 	cjne	a,_main_u8RxUART_65536_105,00449$
      000FBE 80 03            [24] 3847 	sjmp	00450$
      000FC0                       3848 00449$:
      000FC0 02r11r33         [24] 3849 	ljmp	00161$
      000FC3                       3850 00450$:
                                   3851 ;	src/main.c:882: case 'k' : // up SW5
      000FC3                       3852 00128$:
                                   3853 ;	src/main.c:883: stLineFiPkt.u8Addr = u8LineFiAddr;
      000FC3 85*12*17         [24] 3854 	mov	(_main_stLineFiPkt_65536_105 + 0x0002),_main_u8LineFiAddr_65536_105
                                   3855 ;	src/main.c:884: stLineFiPkt.u8Type = u8LineFiCmd;
      000FC6 85*13*16         [24] 3856 	mov	(_main_stLineFiPkt_65536_105 + 0x0001),_main_u8LineFiCmd_65536_105
                                   3857 ;	src/main.c:885: print_linefipacket(&stLineFiPkt);
      000FC9 90r00r15         [24] 3858 	mov	dptr,#_main_stLineFiPkt_65536_105
      000FCC 75 F0 40         [24] 3859 	mov	b,#0x40
      000FCF C0 07            [24] 3860 	push	ar7
      000FD1 C0 06            [24] 3861 	push	ar6
      000FD3 12r00r00         [24] 3862 	lcall	_print_linefipacket
      000FD6 D0 06            [24] 3863 	pop	ar6
      000FD8 D0 07            [24] 3864 	pop	ar7
                                   3865 ;	src/main.c:886: break;
      000FDA 02r11r33         [24] 3866 	ljmp	00161$
                                   3867 ;	src/main.c:893: case UART0_INPUT_MODE3 : // slave gpio pin setting
      000FDD                       3868 00131$:
                                   3869 ;	src/main.c:894: switch(u8RxUART) {
      000FDD 74 68            [12] 3870 	mov	a,#0x68
      000FDF B5*11 02         [24] 3871 	cjne	a,_main_u8RxUART_65536_105,00451$
      000FE2 80 15            [24] 3872 	sjmp	00132$
      000FE4                       3873 00451$:
      000FE4 74 6A            [12] 3874 	mov	a,#0x6a
      000FE6 B5*11 02         [24] 3875 	cjne	a,_main_u8RxUART_65536_105,00452$
      000FE9 80 20            [24] 3876 	sjmp	00135$
      000FEB                       3877 00452$:
      000FEB 74 6B            [12] 3878 	mov	a,#0x6b
      000FED B5*11 02         [24] 3879 	cjne	a,_main_u8RxUART_65536_105,00453$
      000FF0 80 33            [24] 3880 	sjmp	00136$
      000FF2                       3881 00453$:
      000FF2 74 6C            [12] 3882 	mov	a,#0x6c
                                   3883 ;	src/main.c:895: case 'h' : // left
      000FF4 B5*11 5A         [24] 3884 	cjne	a,_main_u8RxUART_65536_105,00140$
      000FF7 80 46            [24] 3885 	sjmp	00137$
      000FF9                       3886 00132$:
                                   3887 ;	src/main.c:896: u8DataIdx--;
      000FF9 90r00rDD         [24] 3888 	mov	dptr,#_main_u8DataIdx_65536_105
      000FFC E0               [24] 3889 	movx	a,@dptr
      000FFD 14               [12] 3890 	dec	a
      000FFE F0               [24] 3891 	movx	@dptr,a
                                   3892 ;	src/main.c:897: if (u8DataIdx == 255) {
      000FFF E0               [24] 3893 	movx	a,@dptr
      001000 FD               [12] 3894 	mov	r5,a
      001001 BD FF 4D         [24] 3895 	cjne	r5,#0xff,00140$
                                   3896 ;	src/main.c:898: u8DataIdx = 0;
      001004 90r00rDD         [24] 3897 	mov	dptr,#_main_u8DataIdx_65536_105
      001007 E4               [12] 3898 	clr	a
      001008 F0               [24] 3899 	movx	@dptr,a
                                   3900 ;	src/main.c:900: break;
                                   3901 ;	src/main.c:901: case 'j' : // down 
      001009 80 46            [24] 3902 	sjmp	00140$
      00100B                       3903 00135$:
                                   3904 ;	src/main.c:902: pu8Data[u8DataIdx]--;
      00100B 90r00rDD         [24] 3905 	mov	dptr,#_main_u8DataIdx_65536_105
      00100E E0               [24] 3906 	movx	a,@dptr
      00100F 24rD3            [12] 3907 	add	a,#_main_pu8Data_65536_105
      001011 FD               [12] 3908 	mov	r5,a
      001012 E4               [12] 3909 	clr	a
      001013 34s00            [12] 3910 	addc	a,#(_main_pu8Data_65536_105 >> 8)
      001015 FC               [12] 3911 	mov	r4,a
      001016 8D 82            [24] 3912 	mov	dpl,r5
      001018 8C 83            [24] 3913 	mov	dph,r4
      00101A E0               [24] 3914 	movx	a,@dptr
      00101B FB               [12] 3915 	mov	r3,a
      00101C 1B               [12] 3916 	dec	r3
      00101D 8D 82            [24] 3917 	mov	dpl,r5
      00101F 8C 83            [24] 3918 	mov	dph,r4
      001021 EB               [12] 3919 	mov	a,r3
      001022 F0               [24] 3920 	movx	@dptr,a
                                   3921 ;	src/main.c:903: break;
                                   3922 ;	src/main.c:904: case 'k' : // up 
      001023 80 2C            [24] 3923 	sjmp	00140$
      001025                       3924 00136$:
                                   3925 ;	src/main.c:905: pu8Data[u8DataIdx]++;
      001025 90r00rDD         [24] 3926 	mov	dptr,#_main_u8DataIdx_65536_105
      001028 E0               [24] 3927 	movx	a,@dptr
      001029 24rD3            [12] 3928 	add	a,#_main_pu8Data_65536_105
      00102B FD               [12] 3929 	mov	r5,a
      00102C E4               [12] 3930 	clr	a
      00102D 34s00            [12] 3931 	addc	a,#(_main_pu8Data_65536_105 >> 8)
      00102F FC               [12] 3932 	mov	r4,a
      001030 8D 82            [24] 3933 	mov	dpl,r5
      001032 8C 83            [24] 3934 	mov	dph,r4
      001034 E0               [24] 3935 	movx	a,@dptr
      001035 FB               [12] 3936 	mov	r3,a
      001036 0B               [12] 3937 	inc	r3
      001037 8D 82            [24] 3938 	mov	dpl,r5
      001039 8C 83            [24] 3939 	mov	dph,r4
      00103B EB               [12] 3940 	mov	a,r3
      00103C F0               [24] 3941 	movx	@dptr,a
                                   3942 ;	src/main.c:906: break;
                                   3943 ;	src/main.c:907: case 'l' : // right 
      00103D 80 12            [24] 3944 	sjmp	00140$
      00103F                       3945 00137$:
                                   3946 ;	src/main.c:908: u8DataIdx++;
      00103F 90r00rDD         [24] 3947 	mov	dptr,#_main_u8DataIdx_65536_105
      001042 E0               [24] 3948 	movx	a,@dptr
      001043 24 01            [12] 3949 	add	a,#0x01
      001045 F0               [24] 3950 	movx	@dptr,a
                                   3951 ;	src/main.c:909: if (u8DataIdx == MAX_DATA) {
      001046 E0               [24] 3952 	movx	a,@dptr
      001047 FD               [12] 3953 	mov	r5,a
      001048 BD 0A 06         [24] 3954 	cjne	r5,#0x0a,00140$
                                   3955 ;	src/main.c:910: u8DataIdx--;;
      00104B ED               [12] 3956 	mov	a,r5
      00104C 14               [12] 3957 	dec	a
      00104D 90r00rDD         [24] 3958 	mov	dptr,#_main_u8DataIdx_65536_105
      001050 F0               [24] 3959 	movx	@dptr,a
                                   3960 ;	src/main.c:913: }
      001051                       3961 00140$:
                                   3962 ;	src/main.c:914: switch(u8RxUART) {
      001051 74 68            [12] 3963 	mov	a,#0x68
      001053 B5*11 02         [24] 3964 	cjne	a,_main_u8RxUART_65536_105,00459$
      001056 80 18            [24] 3965 	sjmp	00142$
      001058                       3966 00459$:
      001058 74 6A            [12] 3967 	mov	a,#0x6a
      00105A B5*11 02         [24] 3968 	cjne	a,_main_u8RxUART_65536_105,00460$
      00105D 80 38            [24] 3969 	sjmp	00240$
      00105F                       3970 00460$:
      00105F 74 6B            [12] 3971 	mov	a,#0x6b
      001061 B5*11 02         [24] 3972 	cjne	a,_main_u8RxUART_65536_105,00461$
      001064 80 31            [24] 3973 	sjmp	00240$
      001066                       3974 00461$:
      001066 74 6C            [12] 3975 	mov	a,#0x6c
      001068 B5*11 02         [24] 3976 	cjne	a,_main_u8RxUART_65536_105,00462$
      00106B 80 03            [24] 3977 	sjmp	00463$
      00106D                       3978 00462$:
      00106D 02r11r33         [24] 3979 	ljmp	00161$
      001070                       3980 00463$:
                                   3981 ;	src/main.c:916: case 'l' : // right
      001070                       3982 00142$:
                                   3983 ;	src/main.c:917: printf_fast_f("DataIdx:%d\r\n", u8DataIdx);
      001070 90r00rDD         [24] 3984 	mov	dptr,#_main_u8DataIdx_65536_105
      001073 E0               [24] 3985 	movx	a,@dptr
      001074 FD               [12] 3986 	mov	r5,a
      001075 7C 00            [12] 3987 	mov	r4,#0x00
      001077 C0 07            [24] 3988 	push	ar7
      001079 C0 06            [24] 3989 	push	ar6
      00107B C0 05            [24] 3990 	push	ar5
      00107D C0 04            [24] 3991 	push	ar4
      00107F 74r96            [12] 3992 	mov	a,#___str_58
      001081 C0 E0            [24] 3993 	push	acc
      001083 74s03            [12] 3994 	mov	a,#(___str_58 >> 8)
      001085 C0 E0            [24] 3995 	push	acc
      001087 12r00r00         [24] 3996 	lcall	_printf_fast_f
      00108A E5 81            [12] 3997 	mov	a,sp
      00108C 24 FC            [12] 3998 	add	a,#0xfc
      00108E F5 81            [12] 3999 	mov	sp,a
      001090 D0 06            [24] 4000 	pop	ar6
      001092 D0 07            [24] 4001 	pop	ar7
                                   4002 ;	src/main.c:918: break;
      001094 02r11r33         [24] 4003 	ljmp	00161$
                                   4004 ;	src/main.c:923: for (i=0;i<MAX_DATA;i++) {
      001097                       4005 00240$:
      001097 7D 00            [12] 4006 	mov	r5,#0x00
      001099                       4007 00204$:
                                   4008 ;	src/main.c:924: printf("0x%x ", pu8Data[i]);
      001099 ED               [12] 4009 	mov	a,r5
      00109A 24rD3            [12] 4010 	add	a,#_main_pu8Data_65536_105
      00109C F5 82            [12] 4011 	mov	dpl,a
      00109E E4               [12] 4012 	clr	a
      00109F 34s00            [12] 4013 	addc	a,#(_main_pu8Data_65536_105 >> 8)
      0010A1 F5 83            [12] 4014 	mov	dph,a
      0010A3 E0               [24] 4015 	movx	a,@dptr
      0010A4 FC               [12] 4016 	mov	r4,a
      0010A5 7B 00            [12] 4017 	mov	r3,#0x00
      0010A7 C0 07            [24] 4018 	push	ar7
      0010A9 C0 06            [24] 4019 	push	ar6
      0010AB C0 05            [24] 4020 	push	ar5
      0010AD C0 04            [24] 4021 	push	ar4
      0010AF C0 03            [24] 4022 	push	ar3
      0010B1 74rA3            [12] 4023 	mov	a,#___str_59
      0010B3 C0 E0            [24] 4024 	push	acc
      0010B5 74s03            [12] 4025 	mov	a,#(___str_59 >> 8)
      0010B7 C0 E0            [24] 4026 	push	acc
      0010B9 74 80            [12] 4027 	mov	a,#0x80
      0010BB C0 E0            [24] 4028 	push	acc
      0010BD 12r00r00         [24] 4029 	lcall	_printf
      0010C0 E5 81            [12] 4030 	mov	a,sp
      0010C2 24 FB            [12] 4031 	add	a,#0xfb
      0010C4 F5 81            [12] 4032 	mov	sp,a
      0010C6 D0 05            [24] 4033 	pop	ar5
      0010C8 D0 06            [24] 4034 	pop	ar6
      0010CA D0 07            [24] 4035 	pop	ar7
                                   4036 ;	src/main.c:923: for (i=0;i<MAX_DATA;i++) {
      0010CC 0D               [12] 4037 	inc	r5
      0010CD BD 0A 00         [24] 4038 	cjne	r5,#0x0a,00464$
      0010D0                       4039 00464$:
      0010D0 40 C7            [24] 4040 	jc	00204$
                                   4041 ;	src/main.c:926: printf_fast_f("\r\n");
      0010D2 C0 07            [24] 4042 	push	ar7
      0010D4 C0 06            [24] 4043 	push	ar6
      0010D6 74r2E            [12] 4044 	mov	a,#___str_5
      0010D8 C0 E0            [24] 4045 	push	acc
      0010DA 74s00            [12] 4046 	mov	a,#(___str_5 >> 8)
      0010DC C0 E0            [24] 4047 	push	acc
      0010DE 12r00r00         [24] 4048 	lcall	_printf_fast_f
      0010E1 15 81            [12] 4049 	dec	sp
      0010E3 15 81            [12] 4050 	dec	sp
      0010E5 D0 06            [24] 4051 	pop	ar6
      0010E7 D0 07            [24] 4052 	pop	ar7
                                   4053 ;	src/main.c:934: } //switch(u8RxUART)
      0010E9 80 48            [24] 4054 	sjmp	00161$
      0010EB                       4055 00160$:
                                   4056 ;	src/main.c:937: switch(u8StateUart0InputMode) {
      0010EB EE               [12] 4057 	mov	a,r6
      0010EC 24 FB            [12] 4058 	add	a,#0xff - 0x04
      0010EE 40 43            [24] 4059 	jc	00161$
      0010F0 EE               [12] 4060 	mov	a,r6
      0010F1 2E               [12] 4061 	add	a,r6
                                   4062 ;	src/main.c:940: case UART0_INPUT_MODE1 :
      0010F2 90r10rF6         [24] 4063 	mov	dptr,#00467$
      0010F5 73               [24] 4064 	jmp	@a+dptr
      0010F6                       4065 00467$:
      0010F6 80 3B            [24] 4066 	sjmp	00161$
      0010F8 80 06            [24] 4067 	sjmp	00151$
      0010FA 80 37            [24] 4068 	sjmp	00161$
      0010FC 80 35            [24] 4069 	sjmp	00161$
      0010FE 80 33            [24] 4070 	sjmp	00161$
      001100                       4071 00151$:
                                   4072 ;	src/main.c:941: if (gu16TimeCnt > 10 && ucBufIdx != 0) {
      001100 90r00r34         [24] 4073 	mov	dptr,#_gu16TimeCnt
      001103 E0               [24] 4074 	movx	a,@dptr
      001104 FC               [12] 4075 	mov	r4,a
      001105 A3               [24] 4076 	inc	dptr
      001106 E0               [24] 4077 	movx	a,@dptr
      001107 FD               [12] 4078 	mov	r5,a
      001108 C3               [12] 4079 	clr	c
      001109 74 0A            [12] 4080 	mov	a,#0x0a
      00110B 9C               [12] 4081 	subb	a,r4
      00110C E4               [12] 4082 	clr	a
      00110D 9D               [12] 4083 	subb	a,r5
      00110E 50 23            [24] 4084 	jnc	00161$
      001110 90r00rDE         [24] 4085 	mov	dptr,#_main_ucBufIdx_65536_105
      001113 E0               [24] 4086 	movx	a,@dptr
      001114 FD               [12] 4087 	mov	r5,a
      001115 E0               [24] 4088 	movx	a,@dptr
      001116 60 1B            [24] 4089 	jz	00161$
                                   4090 ;	src/main.c:942: printoutbuf(ucBufIdx, pcBuf);
      001118 75*05r6F         [24] 4091 	mov	_printoutbuf_PARM_2,#_main_pcBuf_65536_105
      00111B 75*06s00         [24] 4092 	mov	(_printoutbuf_PARM_2 + 1),#(_main_pcBuf_65536_105 >> 8)
      00111E 75*07 00         [24] 4093 	mov	(_printoutbuf_PARM_2 + 2),#0x00
      001121 8D 82            [24] 4094 	mov	dpl,r5
      001123 C0 07            [24] 4095 	push	ar7
      001125 C0 06            [24] 4096 	push	ar6
      001127 12r04rED         [24] 4097 	lcall	_printoutbuf
      00112A D0 06            [24] 4098 	pop	ar6
      00112C D0 07            [24] 4099 	pop	ar7
                                   4100 ;	src/main.c:943: ucBufIdx = 0;
      00112E 90r00rDE         [24] 4101 	mov	dptr,#_main_ucBufIdx_65536_105
      001131 E4               [12] 4102 	clr	a
      001132 F0               [24] 4103 	movx	@dptr,a
                                   4104 ;	src/main.c:952: } //switch(u8StateUart0InputMode)
      001133                       4105 00161$:
                                   4106 ;	src/main.c:960: if (u8PwrOnFirstFlag) { // 전원 켜진 후, 한 번만 동작
      001133 EF               [12] 4107 	mov	a,r7
      001134 70 03            [24] 4108 	jnz	00470$
      001136 02r12r1F         [24] 4109 	ljmp	00190$
      001139                       4110 00470$:
                                   4111 ;	src/main.c:961: switch (state_switches((SW_U<<0)| (SW_R<<1)| (SW_L<<2)| (SW_D<<3) | (SW_C<<4), &u8SwNum)) {
      001139 A2 95            [12] 4112 	mov	c,_P15
      00113B E4               [12] 4113 	clr	a
      00113C 33               [12] 4114 	rlc	a
      00113D FD               [12] 4115 	mov	r5,a
      00113E A2 B0            [12] 4116 	mov	c,_P30
      001140 E4               [12] 4117 	clr	a
      001141 33               [12] 4118 	rlc	a
      001142 25 E0            [12] 4119 	add	a,acc
      001144 42 05            [12] 4120 	orl	ar5,a
      001146 A2 80            [12] 4121 	mov	c,_P00
      001148 E4               [12] 4122 	clr	a
      001149 33               [12] 4123 	rlc	a
      00114A 25 E0            [12] 4124 	add	a,acc
      00114C 25 E0            [12] 4125 	add	a,acc
      00114E 42 05            [12] 4126 	orl	ar5,a
      001150 A2 93            [12] 4127 	mov	c,_P13
      001152 E4               [12] 4128 	clr	a
      001153 33               [12] 4129 	rlc	a
      001154 C4               [12] 4130 	swap	a
      001155 03               [12] 4131 	rr	a
      001156 54 F8            [12] 4132 	anl	a,#0xf8
      001158 42 05            [12] 4133 	orl	ar5,a
      00115A A2 97            [12] 4134 	mov	c,_P17
      00115C E4               [12] 4135 	clr	a
      00115D 33               [12] 4136 	rlc	a
      00115E C4               [12] 4137 	swap	a
      00115F 54 F0            [12] 4138 	anl	a,#0xf0
      001161 4D               [12] 4139 	orl	a,r5
      001162 F5 82            [12] 4140 	mov	dpl,a
      001164 75*00r14         [24] 4141 	mov	_state_switches_PARM_2,#_main_u8SwNum_65536_105
      001167 75*01 00         [24] 4142 	mov	(_state_switches_PARM_2 + 1),#0x00
      00116A 75*02 40         [24] 4143 	mov	(_state_switches_PARM_2 + 2),#0x40
      00116D C0 07            [24] 4144 	push	ar7
      00116F C0 06            [24] 4145 	push	ar6
      001171 12r03rFA         [24] 4146 	lcall	_state_switches
      001174 AD 82            [24] 4147 	mov	r5,dpl
      001176 D0 06            [24] 4148 	pop	ar6
      001178 D0 07            [24] 4149 	pop	ar7
      00117A BD 01 02         [24] 4150 	cjne	r5,#0x01,00471$
      00117D 80 03            [24] 4151 	sjmp	00472$
      00117F                       4152 00471$:
      00117F 02r0Er2D         [24] 4153 	ljmp	00193$
      001182                       4154 00472$:
                                   4155 ;	src/main.c:963: switch(u8PwrOnFirstFlag) {
      001182 EF               [12] 4156 	mov	a,r7
      001183 24 FA            [12] 4157 	add	a,#0xff - 0x05
      001185 50 03            [24] 4158 	jnc	00473$
      001187 02r0Er2D         [24] 4159 	ljmp	00193$
      00118A                       4160 00473$:
      00118A EF               [12] 4161 	mov	a,r7
      00118B 2F               [12] 4162 	add	a,r7
      00118C 2F               [12] 4163 	add	a,r7
      00118D 90r11r91         [24] 4164 	mov	dptr,#00474$
      001190 73               [24] 4165 	jmp	@a+dptr
      001191                       4166 00474$:
      001191 02r0Er2D         [24] 4167 	ljmp	00193$
      001194 02r11rA3         [24] 4168 	ljmp	00163$
      001197 02r11rAB         [24] 4169 	ljmp	00164$
      00119A 02r12r13         [24] 4170 	ljmp	00165$
      00119D 02r12r17         [24] 4171 	ljmp	00166$
      0011A0 02r12r1B         [24] 4172 	ljmp	00167$
                                   4173 ;	src/main.c:964: case 1 :
      0011A3                       4174 00163$:
                                   4175 ;	src/main.c:965: LINEFI_TX = 1;
                                   4176 ;	assignBit
      0011A3 D2 96            [12] 4177 	setb	_P16
                                   4178 ;	src/main.c:966: LINEFI_EN0 = 1;
                                   4179 ;	assignBit
      0011A5 D2 90            [12] 4180 	setb	_P10
                                   4181 ;	src/main.c:967: u8PwrOnFirstFlag++;
      0011A7 0F               [12] 4182 	inc	r7
                                   4183 ;	src/main.c:968: break;
      0011A8 02r0Er2D         [24] 4184 	ljmp	00193$
                                   4185 ;	src/main.c:969: case 2 :
      0011AB                       4186 00164$:
                                   4187 ;	src/main.c:970: InitialUART1_Timer3(gpu32UartSpeed[0]);
      0011AB 90r00r36         [24] 4188 	mov	dptr,#_gpu32UartSpeed
      0011AE E0               [24] 4189 	movx	a,@dptr
      0011AF FA               [12] 4190 	mov	r2,a
      0011B0 A3               [24] 4191 	inc	dptr
      0011B1 E0               [24] 4192 	movx	a,@dptr
      0011B2 FB               [12] 4193 	mov	r3,a
      0011B3 A3               [24] 4194 	inc	dptr
      0011B4 E0               [24] 4195 	movx	a,@dptr
      0011B5 FC               [12] 4196 	mov	r4,a
      0011B6 A3               [24] 4197 	inc	dptr
      0011B7 E0               [24] 4198 	movx	a,@dptr
      0011B8 8A 82            [24] 4199 	mov	dpl,r2
      0011BA 8B 83            [24] 4200 	mov	dph,r3
      0011BC 8C F0            [24] 4201 	mov	b,r4
      0011BE C0 06            [24] 4202 	push	ar6
      0011C0 12r00r00         [24] 4203 	lcall	_InitialUART1_Timer3
                                   4204 ;	src/main.c:971: send_octet_to_linefi(((LINEFI_DEFAULT_RATE<<4)&0xF0) | (1)&0x0F);
      0011C3 75 82 31         [24] 4205 	mov	dpl,#0x31
      0011C6 12r00r00         [24] 4206 	lcall	_send_octet_to_linefi
                                   4207 ;	src/main.c:972: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[LINEFI_DEFAULT_RATE]);
      0011C9 90r00r42         [24] 4208 	mov	dptr,#(_gpu32UartSpeed + 0x000c)
      0011CC E0               [24] 4209 	movx	a,@dptr
      0011CD FA               [12] 4210 	mov	r2,a
      0011CE A3               [24] 4211 	inc	dptr
      0011CF E0               [24] 4212 	movx	a,@dptr
      0011D0 FB               [12] 4213 	mov	r3,a
      0011D1 A3               [24] 4214 	inc	dptr
      0011D2 E0               [24] 4215 	movx	a,@dptr
      0011D3 FC               [12] 4216 	mov	r4,a
      0011D4 A3               [24] 4217 	inc	dptr
      0011D5 E0               [24] 4218 	movx	a,@dptr
      0011D6 FD               [12] 4219 	mov	r5,a
      0011D7 C0 02            [24] 4220 	push	ar2
      0011D9 C0 03            [24] 4221 	push	ar3
      0011DB C0 04            [24] 4222 	push	ar4
      0011DD C0 05            [24] 4223 	push	ar5
      0011DF 74rD9            [12] 4224 	mov	a,#___str_47
      0011E1 C0 E0            [24] 4225 	push	acc
      0011E3 74s02            [12] 4226 	mov	a,#(___str_47 >> 8)
      0011E5 C0 E0            [24] 4227 	push	acc
      0011E7 12r00r00         [24] 4228 	lcall	_printf_fast_f
      0011EA E5 81            [12] 4229 	mov	a,sp
      0011EC 24 FA            [12] 4230 	add	a,#0xfa
      0011EE F5 81            [12] 4231 	mov	sp,a
                                   4232 ;	src/main.c:973: InitialUART1_Timer3(gpu32UartSpeed[LINEFI_DEFAULT_RATE]);
      0011F0 90r00r42         [24] 4233 	mov	dptr,#(_gpu32UartSpeed + 0x000c)
      0011F3 E0               [24] 4234 	movx	a,@dptr
      0011F4 FA               [12] 4235 	mov	r2,a
      0011F5 A3               [24] 4236 	inc	dptr
      0011F6 E0               [24] 4237 	movx	a,@dptr
      0011F7 FB               [12] 4238 	mov	r3,a
      0011F8 A3               [24] 4239 	inc	dptr
      0011F9 E0               [24] 4240 	movx	a,@dptr
      0011FA FC               [12] 4241 	mov	r4,a
      0011FB A3               [24] 4242 	inc	dptr
      0011FC E0               [24] 4243 	movx	a,@dptr
      0011FD 8A 82            [24] 4244 	mov	dpl,r2
      0011FF 8B 83            [24] 4245 	mov	dph,r3
      001201 8C F0            [24] 4246 	mov	b,r4
      001203 12r00r00         [24] 4247 	lcall	_InitialUART1_Timer3
      001206 D0 06            [24] 4248 	pop	ar6
                                   4249 ;	src/main.c:975: u8LineFiCmd = 2;
      001208 75*13 02         [24] 4250 	mov	_main_u8LineFiCmd_65536_105,#0x02
                                   4251 ;	src/main.c:976: u8LineFiAddr = 1;
      00120B 75*12 01         [24] 4252 	mov	_main_u8LineFiAddr_65536_105,#0x01
                                   4253 ;	src/main.c:977: u8PwrOnFirstFlag = 0;
      00120E 7F 00            [12] 4254 	mov	r7,#0x00
                                   4255 ;	src/main.c:978: break;
      001210 02r0Er2D         [24] 4256 	ljmp	00193$
                                   4257 ;	src/main.c:979: case 3 :
      001213                       4258 00165$:
                                   4259 ;	src/main.c:980: u8PwrOnFirstFlag++;
      001213 0F               [12] 4260 	inc	r7
                                   4261 ;	src/main.c:981: break;
      001214 02r0Er2D         [24] 4262 	ljmp	00193$
                                   4263 ;	src/main.c:982: case 4 :
      001217                       4264 00166$:
                                   4265 ;	src/main.c:983: u8PwrOnFirstFlag++;
      001217 0F               [12] 4266 	inc	r7
                                   4267 ;	src/main.c:984: break;
      001218 02r0Er2D         [24] 4268 	ljmp	00193$
                                   4269 ;	src/main.c:985: case 5 :
      00121B                       4270 00167$:
                                   4271 ;	src/main.c:986: u8PwrOnFirstFlag++;
      00121B 0F               [12] 4272 	inc	r7
                                   4273 ;	src/main.c:1018: } //switch (state_switches((SW1<<0)| (SW2<<1)| (SW3<<2)| (SW4<<3) | (SW5<<4), &u8SwNum))
      00121C 02r0Er2D         [24] 4274 	ljmp	00193$
      00121F                       4275 00190$:
                                   4276 ;	src/main.c:1021: switch (state_switches((SW_U<<0)| (SW_R<<1)| (SW_L<<2)| (SW_D<<3) | (SW_C<<4), &u8SwNum)) {
      00121F A2 95            [12] 4277 	mov	c,_P15
      001221 E4               [12] 4278 	clr	a
      001222 33               [12] 4279 	rlc	a
      001223 FD               [12] 4280 	mov	r5,a
      001224 A2 B0            [12] 4281 	mov	c,_P30
      001226 E4               [12] 4282 	clr	a
      001227 33               [12] 4283 	rlc	a
      001228 25 E0            [12] 4284 	add	a,acc
      00122A 42 05            [12] 4285 	orl	ar5,a
      00122C A2 80            [12] 4286 	mov	c,_P00
      00122E E4               [12] 4287 	clr	a
      00122F 33               [12] 4288 	rlc	a
      001230 25 E0            [12] 4289 	add	a,acc
      001232 25 E0            [12] 4290 	add	a,acc
      001234 42 05            [12] 4291 	orl	ar5,a
      001236 A2 93            [12] 4292 	mov	c,_P13
      001238 E4               [12] 4293 	clr	a
      001239 33               [12] 4294 	rlc	a
      00123A C4               [12] 4295 	swap	a
      00123B 03               [12] 4296 	rr	a
      00123C 54 F8            [12] 4297 	anl	a,#0xf8
      00123E 42 05            [12] 4298 	orl	ar5,a
      001240 A2 97            [12] 4299 	mov	c,_P17
      001242 E4               [12] 4300 	clr	a
      001243 33               [12] 4301 	rlc	a
      001244 C4               [12] 4302 	swap	a
      001245 54 F0            [12] 4303 	anl	a,#0xf0
      001247 4D               [12] 4304 	orl	a,r5
      001248 F5 82            [12] 4305 	mov	dpl,a
      00124A 75*00r14         [24] 4306 	mov	_state_switches_PARM_2,#_main_u8SwNum_65536_105
      00124D 75*01 00         [24] 4307 	mov	(_state_switches_PARM_2 + 1),#0x00
      001250 75*02 40         [24] 4308 	mov	(_state_switches_PARM_2 + 2),#0x40
      001253 C0 07            [24] 4309 	push	ar7
      001255 C0 06            [24] 4310 	push	ar6
      001257 12r03rFA         [24] 4311 	lcall	_state_switches
      00125A AD 82            [24] 4312 	mov	r5,dpl
      00125C D0 06            [24] 4313 	pop	ar6
      00125E D0 07            [24] 4314 	pop	ar7
      001260 BD 01 02         [24] 4315 	cjne	r5,#0x01,00475$
      001263 80 03            [24] 4316 	sjmp	00476$
      001265                       4317 00475$:
      001265 02r0Er2D         [24] 4318 	ljmp	00193$
      001268                       4319 00476$:
                                   4320 ;	src/main.c:1104: switch(u8SwNum) {
      001268 AD*14            [24] 4321 	mov	r5,_main_u8SwNum_65536_105
      00126A BD 01 03         [24] 4322 	cjne	r5,#0x01,00477$
      00126D 02r13r45         [24] 4323 	ljmp	00184$
      001270                       4324 00477$:
      001270 74 02            [12] 4325 	mov	a,#0x02
      001272 B5*14 02         [24] 4326 	cjne	a,_main_u8SwNum_65536_105,00478$
      001275 80 43            [24] 4327 	sjmp	00174$
      001277                       4328 00478$:
      001277 74 04            [12] 4329 	mov	a,#0x04
      001279 B5*14 03         [24] 4330 	cjne	a,_main_u8SwNum_65536_105,00479$
      00127C 02r13r17         [24] 4331 	ljmp	00181$
      00127F                       4332 00479$:
      00127F 74 08            [12] 4333 	mov	a,#0x08
      001281 B5*14 02         [24] 4334 	cjne	a,_main_u8SwNum_65536_105,00480$
      001284 80 0A            [24] 4335 	sjmp	00171$
      001286                       4336 00480$:
      001286 74 10            [12] 4337 	mov	a,#0x10
      001288 B5*14 02         [24] 4338 	cjne	a,_main_u8SwNum_65536_105,00481$
      00128B 80 57            [24] 4339 	sjmp	00177$
      00128D                       4340 00481$:
      00128D 02r0Er2D         [24] 4341 	ljmp	00193$
                                   4342 ;	src/main.c:1105: case (1<<3) : // down SW1
      001290                       4343 00171$:
                                   4344 ;	src/main.c:1106: u8LineFiAddr--;
                                   4345 ;	src/main.c:1107: if (u8LineFiAddr == 0) {
      001290 D5*12 03         [24] 4346 	djnz	_main_u8LineFiAddr_65536_105,00173$
                                   4347 ;	src/main.c:1108: u8LineFiAddr = 1;
      001293 75*12 01         [24] 4348 	mov	_main_u8LineFiAddr_65536_105,#0x01
      001296                       4349 00173$:
                                   4350 ;	src/main.c:1111: printf_fast_f("address: %d\n\r", u8LineFiAddr);
      001296 AC*12            [24] 4351 	mov	r4,_main_u8LineFiAddr_65536_105
      001298 7D 00            [12] 4352 	mov	r5,#0x00
      00129A C0 07            [24] 4353 	push	ar7
      00129C C0 06            [24] 4354 	push	ar6
      00129E C0 04            [24] 4355 	push	ar4
      0012A0 C0 05            [24] 4356 	push	ar5
      0012A2 74rEC            [12] 4357 	mov	a,#___str_48
      0012A4 C0 E0            [24] 4358 	push	acc
      0012A6 74s02            [12] 4359 	mov	a,#(___str_48 >> 8)
      0012A8 C0 E0            [24] 4360 	push	acc
      0012AA 12r00r00         [24] 4361 	lcall	_printf_fast_f
      0012AD E5 81            [12] 4362 	mov	a,sp
      0012AF 24 FC            [12] 4363 	add	a,#0xfc
      0012B1 F5 81            [12] 4364 	mov	sp,a
      0012B3 D0 06            [24] 4365 	pop	ar6
      0012B5 D0 07            [24] 4366 	pop	ar7
                                   4367 ;	src/main.c:1112: break;
      0012B7 02r0Er2D         [24] 4368 	ljmp	00193$
                                   4369 ;	src/main.c:1113: case (1<<1) : // right SW2
      0012BA                       4370 00174$:
                                   4371 ;	src/main.c:1114: u8LineFiCmd--;
                                   4372 ;	src/main.c:1115: if (u8LineFiCmd == 0) {
      0012BA D5*13 03         [24] 4373 	djnz	_main_u8LineFiCmd_65536_105,00176$
                                   4374 ;	src/main.c:1116: u8LineFiCmd = 1;
      0012BD 75*13 01         [24] 4375 	mov	_main_u8LineFiCmd_65536_105,#0x01
      0012C0                       4376 00176$:
                                   4377 ;	src/main.c:1120: printf_fast_f("command: %d\n\r", u8LineFiCmd);
      0012C0 AC*13            [24] 4378 	mov	r4,_main_u8LineFiCmd_65536_105
      0012C2 7D 00            [12] 4379 	mov	r5,#0x00
      0012C4 C0 07            [24] 4380 	push	ar7
      0012C6 C0 06            [24] 4381 	push	ar6
      0012C8 C0 04            [24] 4382 	push	ar4
      0012CA C0 05            [24] 4383 	push	ar5
      0012CC 74rFA            [12] 4384 	mov	a,#___str_49
      0012CE C0 E0            [24] 4385 	push	acc
      0012D0 74s02            [12] 4386 	mov	a,#(___str_49 >> 8)
      0012D2 C0 E0            [24] 4387 	push	acc
      0012D4 12r00r00         [24] 4388 	lcall	_printf_fast_f
      0012D7 E5 81            [12] 4389 	mov	a,sp
      0012D9 24 FC            [12] 4390 	add	a,#0xfc
      0012DB F5 81            [12] 4391 	mov	sp,a
      0012DD D0 06            [24] 4392 	pop	ar6
      0012DF D0 07            [24] 4393 	pop	ar7
                                   4394 ;	src/main.c:1121: break;
      0012E1 02r0Er2D         [24] 4395 	ljmp	00193$
                                   4396 ;	src/main.c:1123: case (1<<4) : // center SW3
      0012E4                       4397 00177$:
                                   4398 ;	src/main.c:1124: stLineFiPkt.u8Addr = u8LineFiAddr;
      0012E4 85*12*17         [24] 4399 	mov	(_main_stLineFiPkt_65536_105 + 0x0002),_main_u8LineFiAddr_65536_105
                                   4400 ;	src/main.c:1125: stLineFiPkt.u8Type = u8LineFiCmd;
      0012E7 85*13*16         [24] 4401 	mov	(_main_stLineFiPkt_65536_105 + 0x0001),_main_u8LineFiCmd_65536_105
                                   4402 ;	src/main.c:1126: if (u8LineFiAddr&1) {
      0012EA E5*12            [12] 4403 	mov	a,_main_u8LineFiAddr_65536_105
      0012EC 30 E0 0B         [24] 4404 	jnb	acc.0,00179$
                                   4405 ;	src/main.c:1127: stLineFiPkt.pu8Data = gpu8Data;
      0012EF 75*1Ar0C         [24] 4406 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 0),#_gpu8Data
      0012F2 75*1Bs00         [24] 4407 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 1),#(_gpu8Data >> 8)
      0012F5 75*1C 00         [24] 4408 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 2),#0x00
      0012F8 80 09            [24] 4409 	sjmp	00180$
      0012FA                       4410 00179$:
                                   4411 ;	src/main.c:1130: stLineFiPkt.pu8Data = gpu8Data2;
      0012FA 75*1Ar20         [24] 4412 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 0),#_gpu8Data2
      0012FD 75*1Bs00         [24] 4413 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 1),#(_gpu8Data2 >> 8)
      001300 75*1C 00         [24] 4414 	mov	((_main_stLineFiPkt_65536_105 + 0x0005) + 2),#0x00
      001303                       4415 00180$:
                                   4416 ;	src/main.c:1132: send_linefi_packet(&stLineFiPkt);
      001303 90r00r15         [24] 4417 	mov	dptr,#_main_stLineFiPkt_65536_105
      001306 75 F0 40         [24] 4418 	mov	b,#0x40
      001309 C0 07            [24] 4419 	push	ar7
      00130B C0 06            [24] 4420 	push	ar6
      00130D 12r00r00         [24] 4421 	lcall	_send_linefi_packet
      001310 D0 06            [24] 4422 	pop	ar6
      001312 D0 07            [24] 4423 	pop	ar7
                                   4424 ;	src/main.c:1133: break;
      001314 02r0Er2D         [24] 4425 	ljmp	00193$
                                   4426 ;	src/main.c:1135: case (1<<2) : //  left SW4
      001317                       4427 00181$:
                                   4428 ;	src/main.c:1136: u8LineFiCmd++;
      001317 05*13            [12] 4429 	inc	_main_u8LineFiCmd_65536_105
                                   4430 ;	src/main.c:1137: if (u8LineFiCmd == 101) {
      001319 74 65            [12] 4431 	mov	a,#0x65
      00131B B5*13 03         [24] 4432 	cjne	a,_main_u8LineFiCmd_65536_105,00183$
                                   4433 ;	src/main.c:1138: u8LineFiCmd = 100;
      00131E 75*13 64         [24] 4434 	mov	_main_u8LineFiCmd_65536_105,#0x64
      001321                       4435 00183$:
                                   4436 ;	src/main.c:1140: printf_fast_f("command: %d\n\r", u8LineFiCmd);
      001321 AC*13            [24] 4437 	mov	r4,_main_u8LineFiCmd_65536_105
      001323 7D 00            [12] 4438 	mov	r5,#0x00
      001325 C0 07            [24] 4439 	push	ar7
      001327 C0 06            [24] 4440 	push	ar6
      001329 C0 04            [24] 4441 	push	ar4
      00132B C0 05            [24] 4442 	push	ar5
      00132D 74rFA            [12] 4443 	mov	a,#___str_49
      00132F C0 E0            [24] 4444 	push	acc
      001331 74s02            [12] 4445 	mov	a,#(___str_49 >> 8)
      001333 C0 E0            [24] 4446 	push	acc
      001335 12r00r00         [24] 4447 	lcall	_printf_fast_f
      001338 E5 81            [12] 4448 	mov	a,sp
      00133A 24 FC            [12] 4449 	add	a,#0xfc
      00133C F5 81            [12] 4450 	mov	sp,a
      00133E D0 06            [24] 4451 	pop	ar6
      001340 D0 07            [24] 4452 	pop	ar7
                                   4453 ;	src/main.c:1143: break;
      001342 02r0Er2D         [24] 4454 	ljmp	00193$
                                   4455 ;	src/main.c:1144: case (1<<0) : // up SW5
      001345                       4456 00184$:
                                   4457 ;	src/main.c:1145: u8LineFiAddr++;
      001345 05*12            [12] 4458 	inc	_main_u8LineFiAddr_65536_105
                                   4459 ;	src/main.c:1146: if (u8LineFiAddr == 16) {
      001347 74 10            [12] 4460 	mov	a,#0x10
      001349 B5*12 03         [24] 4461 	cjne	a,_main_u8LineFiAddr_65536_105,00186$
                                   4462 ;	src/main.c:1147: u8LineFiAddr = 15;
      00134C 75*12 0F         [24] 4463 	mov	_main_u8LineFiAddr_65536_105,#0x0f
      00134F                       4464 00186$:
                                   4465 ;	src/main.c:1149: printf_fast_f("address: %d\n\r", u8LineFiAddr);
      00134F AC*12            [24] 4466 	mov	r4,_main_u8LineFiAddr_65536_105
      001351 7D 00            [12] 4467 	mov	r5,#0x00
      001353 C0 07            [24] 4468 	push	ar7
      001355 C0 06            [24] 4469 	push	ar6
      001357 C0 04            [24] 4470 	push	ar4
      001359 C0 05            [24] 4471 	push	ar5
      00135B 74rEC            [12] 4472 	mov	a,#___str_48
      00135D C0 E0            [24] 4473 	push	acc
      00135F 74s02            [12] 4474 	mov	a,#(___str_48 >> 8)
      001361 C0 E0            [24] 4475 	push	acc
      001363 12r00r00         [24] 4476 	lcall	_printf_fast_f
      001366 E5 81            [12] 4477 	mov	a,sp
      001368 24 FC            [12] 4478 	add	a,#0xfc
      00136A F5 81            [12] 4479 	mov	sp,a
      00136C D0 06            [24] 4480 	pop	ar6
      00136E D0 07            [24] 4481 	pop	ar7
                                   4482 ;	src/main.c:1153: } //switch (state_switches((SW_U<<0)| (SW_R<<1)| (SW_L<<2)| (SW_D<<3) | (SW_C<<4), &u8SwNum))
                                   4483 ;	src/main.c:1179: }
      001370 02r0Er2D         [24] 4484 	ljmp	00193$
                                   4485 	.area CSEG    (CODE)
                                   4486 	.area CONST   (CODE)
                                   4487 	.area CONST   (CODE)
      000000                       4488 ___str_0:
      000000 0A                    4489 	.db 0x0a
      000001 0D                    4490 	.db 0x0d
      000002 00                    4491 	.db 0x00
                                   4492 	.area CSEG    (CODE)
                                   4493 	.area CONST   (CODE)
      000003                       4494 ___str_1:
      000003 73 65 6C 66 20        4495 	.ascii "self "
      000008 00                    4496 	.db 0x00
                                   4497 	.area CSEG    (CODE)
                                   4498 	.area CONST   (CODE)
      000009                       4499 ___str_2:
      000009 63 72 6F 73 73        4500 	.ascii "cross"
      00000E 00                    4501 	.db 0x00
                                   4502 	.area CSEG    (CODE)
                                   4503 	.area CONST   (CODE)
      00000F                       4504 ___str_3:
      00000F 62 6F 74 68 20        4505 	.ascii "both "
      000014 00                    4506 	.db 0x00
                                   4507 	.area CSEG    (CODE)
                                   4508 	.area CONST   (CODE)
      000015                       4509 ___str_4:
      000015 20 6F 75 74 70 75 74  4510 	.ascii " output:This is UART%d"
             3A 54 68 69 73 20 69
             73 20 55 41 52 54 25
             64
      00002B 0A                    4511 	.db 0x0a
      00002C 0D                    4512 	.db 0x0d
      00002D 00                    4513 	.db 0x00
                                   4514 	.area CSEG    (CODE)
                                   4515 	.area CONST   (CODE)
      00002E                       4516 ___str_5:
      00002E 0D                    4517 	.db 0x0d
      00002F 0A                    4518 	.db 0x0a
      000030 00                    4519 	.db 0x00
                                   4520 	.area CSEG    (CODE)
                                   4521 	.area CONST   (CODE)
      000031                       4522 ___str_6:
      000031 25 63                 4523 	.ascii "%c"
      000033 00                    4524 	.db 0x00
                                   4525 	.area CSEG    (CODE)
                                   4526 	.area CONST   (CODE)
      000034                       4527 ___str_7:
      000034 0D                    4528 	.db 0x0d
      000035 0A                    4529 	.db 0x0a
      000036 69 6E 70 75 74 3A 54  4530 	.ascii "input:This is UART%d"
             68 69 73 20 69 73 20
             55 41 52 54 25 64
      00004A 00                    4531 	.db 0x00
                                   4532 	.area CSEG    (CODE)
                                   4533 	.area CONST   (CODE)
      00004B                       4534 ___str_8:
      00004B 49 64 6C 65 20 70 72  4535 	.ascii "Idle preamble on/off"
             65 61 6D 62 6C 65 20
             6F 6E 2F 6F 66 66
      00005F 0D                    4536 	.db 0x0d
      000060 0A                    4537 	.db 0x0a
      000061 00                    4538 	.db 0x00
                                   4539 	.area CSEG    (CODE)
                                   4540 	.area CONST   (CODE)
      000062                       4541 ___str_9:
      000062 4C 69 6E 65 46 69 20  4542 	.ascii "LineFi Power Off"
             50 6F 77 65 72 20 4F
             66 66
      000072 0D                    4543 	.db 0x0d
      000073 0A                    4544 	.db 0x0a
      000074 00                    4545 	.db 0x00
                                   4546 	.area CSEG    (CODE)
                                   4547 	.area CONST   (CODE)
      000075                       4548 ___str_10:
      000075 4C 69 6E 65 46 69 20  4549 	.ascii "LineFi Power On"
             50 6F 77 65 72 20 4F
             6E
      000084 0D                    4550 	.db 0x0d
      000085 0A                    4551 	.db 0x0a
      000086 00                    4552 	.db 0x00
                                   4553 	.area CSEG    (CODE)
                                   4554 	.area CONST   (CODE)
      000087                       4555 ___str_11:
      000087 4C 69 6E 65 46 69 20  4556 	.ascii "LineFi Uart Tx Low"
             55 61 72 74 20 54 78
             20 4C 6F 77
      000099 0D                    4557 	.db 0x0d
      00009A 0A                    4558 	.db 0x0a
      00009B 00                    4559 	.db 0x00
                                   4560 	.area CSEG    (CODE)
                                   4561 	.area CONST   (CODE)
      00009C                       4562 ___str_12:
      00009C 4C 69 6E 65 46 69 20  4563 	.ascii "LineFi Uart Tx High"
             55 61 72 74 20 54 78
             20 48 69 67 68
      0000AF 0D                    4564 	.db 0x0d
      0000B0 0A                    4565 	.db 0x0a
      0000B1 00                    4566 	.db 0x00
                                   4567 	.area CSEG    (CODE)
                                   4568 	.area CONST   (CODE)
      0000B2                       4569 ___str_13:
      0000B2 4C 69 6E 65 46 69 20  4570 	.ascii "LineFi CSC rx FSM Off"
             43 53 43 20 72 78 20
             46 53 4D 20 4F 66 66
      0000C7 0D                    4571 	.db 0x0d
      0000C8 0A                    4572 	.db 0x0a
      0000C9 00                    4573 	.db 0x00
                                   4574 	.area CSEG    (CODE)
                                   4575 	.area CONST   (CODE)
      0000CA                       4576 ___str_14:
      0000CA 4C 69 6E 65 46 69 20  4577 	.ascii "LineFi CSC rx FSM ON"
             43 53 43 20 72 78 20
             46 53 4D 20 4F 4E
      0000DE 0D                    4578 	.db 0x0d
      0000DF 0A                    4579 	.db 0x0a
      0000E0 00                    4580 	.db 0x00
                                   4581 	.area CSEG    (CODE)
                                   4582 	.area CONST   (CODE)
      0000E1                       4583 ___str_15:
      0000E1 56 65 72 73 69 6F 6E  4584 	.ascii "Version 1.4 on 20231026"
             20 31 2E 34 20 6F 6E
             20 32 30 32 33 31 30
             32 36
      0000F8 0D                    4585 	.db 0x0d
      0000F9 0A                    4586 	.db 0x0a
      0000FA 00                    4587 	.db 0x00
                                   4588 	.area CSEG    (CODE)
                                   4589 	.area CONST   (CODE)
      0000FB                       4590 ___str_16:
      0000FB 31 3A 20 64 6F 77 6E  4591 	.ascii "1: downlink packet 1"
             6C 69 6E 6B 20 70 61
             63 6B 65 74 20 31
      00010F 0D                    4592 	.db 0x0d
      000110 0A                    4593 	.db 0x0a
      000111 00                    4594 	.db 0x00
                                   4595 	.area CSEG    (CODE)
                                   4596 	.area CONST   (CODE)
      000112                       4597 ___str_17:
      000112 32 3A 20 64 6F 77 6E  4598 	.ascii "2: downlink packet 2"
             6C 69 6E 6B 20 70 61
             63 6B 65 74 20 32
      000126 0D                    4599 	.db 0x0d
      000127 0A                    4600 	.db 0x0a
      000128 00                    4601 	.db 0x00
                                   4602 	.area CSEG    (CODE)
                                   4603 	.area CONST   (CODE)
      000129                       4604 ___str_18:
      000129 33 3A 20 75 70 6C 69  4605 	.ascii "3: uplink idle preamble on/off"
             6E 6B 20 69 64 6C 65
             20 70 72 65 61 6D 62
             6C 65 20 6F 6E 2F 6F
             66 66
      000147 0D                    4606 	.db 0x0d
      000148 0A                    4607 	.db 0x0a
      000149 00                    4608 	.db 0x00
                                   4609 	.area CSEG    (CODE)
                                   4610 	.area CONST   (CODE)
      00014A                       4611 ___str_19:
      00014A 70 2F 50 3A 20 4C 69  4612 	.ascii "p/P: LineFi Power off/on"
             6E 65 46 69 20 50 6F
             77 65 72 20 6F 66 66
             2F 6F 6E
      000162 0D                    4613 	.db 0x0d
      000163 0A                    4614 	.db 0x0a
      000164 00                    4615 	.db 0x00
                                   4616 	.area CSEG    (CODE)
                                   4617 	.area CONST   (CODE)
      000165                       4618 ___str_20:
      000165 74 2F 54 3A 20 4C 69  4619 	.ascii "t/T: LineFi Uart Tx Low/High"
             6E 65 46 69 20 55 61
             72 74 20 54 78 20 4C
             6F 77 2F 48 69 67 68
      000181 0D                    4620 	.db 0x0d
      000182 0A                    4621 	.db 0x0a
      000183 00                    4622 	.db 0x00
                                   4623 	.area CSEG    (CODE)
                                   4624 	.area CONST   (CODE)
      000184                       4625 ___str_21:
      000184 73 2F 53 3A 20 4C 69  4626 	.ascii "s/S: LineFie CSC Rx FSM off/on"
             6E 65 46 69 65 20 43
             53 43 20 52 78 20 46
             53 4D 20 6F 66 66 2F
             6F 6E
      0001A2 0D                    4627 	.db 0x0d
      0001A3 0A                    4628 	.db 0x0a
      0001A4 00                    4629 	.db 0x00
                                   4630 	.area CSEG    (CODE)
                                   4631 	.area CONST   (CODE)
      0001A5                       4632 ___str_22:
      0001A5 74 65 73 74 20 70 72  4633 	.ascii "test procedure: p -> P -> T -> S -> 1 or 2"
             6F 63 65 64 75 72 65
             3A 20 70 20 2D 3E 20
             50 20 2D 3E 20 54 20
             2D 3E 20 53 20 2D 3E
             20 31 20 6F 72 20 32
      0001CF 0D                    4634 	.db 0x0d
      0001D0 0A                    4635 	.db 0x0a
      0001D1 00                    4636 	.db 0x00
                                   4637 	.area CSEG    (CODE)
                                   4638 	.area CONST   (CODE)
      0001D2                       4639 ___str_23:
      0001D2 74 3A 20 74 69 6D 65  4640 	.ascii "t: timer"
             72
      0001DA 0D                    4641 	.db 0x0d
      0001DB 0A                    4642 	.db 0x0a
      0001DC 00                    4643 	.db 0x00
                                   4644 	.area CSEG    (CODE)
                                   4645 	.area CONST   (CODE)
      0001DD                       4646 ___str_24:
      0001DD 30 3A 20 4C 69 6E 65  4647 	.ascii "0: LineFi EN0,1,2 off"
             46 69 20 45 4E 30 2C
             31 2C 32 20 6F 66 66
      0001F2 0D                    4648 	.db 0x0d
      0001F3 0A                    4649 	.db 0x0a
      0001F4 00                    4650 	.db 0x00
                                   4651 	.area CSEG    (CODE)
                                   4652 	.area CONST   (CODE)
      0001F5                       4653 ___str_25:
      0001F5 31 3A 20 4C 69 6E 65  4654 	.ascii "1: LineFi EN0 = 1"
             46 69 20 45 4E 30 20
             3D 20 31
      000206 0D                    4655 	.db 0x0d
      000207 0A                    4656 	.db 0x0a
      000208 00                    4657 	.db 0x00
                                   4658 	.area CSEG    (CODE)
                                   4659 	.area CONST   (CODE)
      000209                       4660 ___str_26:
      000209 32 3A                 4661 	.ascii "2:"
      00020B 0D                    4662 	.db 0x0d
      00020C 0A                    4663 	.db 0x0a
      00020D 00                    4664 	.db 0x00
                                   4665 	.area CSEG    (CODE)
                                   4666 	.area CONST   (CODE)
      00020E                       4667 ___str_27:
      00020E 33 3A                 4668 	.ascii "3:"
      000210 0D                    4669 	.db 0x0d
      000211 0A                    4670 	.db 0x0a
      000212 00                    4671 	.db 0x00
                                   4672 	.area CSEG    (CODE)
                                   4673 	.area CONST   (CODE)
      000213                       4674 ___str_28:
      000213 34 3A                 4675 	.ascii "4:"
      000215 0D                    4676 	.db 0x0d
      000216 0A                    4677 	.db 0x0a
      000217 00                    4678 	.db 0x00
                                   4679 	.area CSEG    (CODE)
                                   4680 	.area CONST   (CODE)
      000218                       4681 ___str_29:
      000218 35 3A                 4682 	.ascii "5:"
      00021A 0D                    4683 	.db 0x0d
      00021B 0A                    4684 	.db 0x0a
      00021C 00                    4685 	.db 0x00
                                   4686 	.area CSEG    (CODE)
                                   4687 	.area CONST   (CODE)
      00021D                       4688 ___str_30:
      00021D 36 3A                 4689 	.ascii "6:"
      00021F 0D                    4690 	.db 0x0d
      000220 0A                    4691 	.db 0x0a
      000221 00                    4692 	.db 0x00
                                   4693 	.area CSEG    (CODE)
                                   4694 	.area CONST   (CODE)
      000222                       4695 ___str_31:
      000222 37 3A                 4696 	.ascii "7:"
      000224 0D                    4697 	.db 0x0d
      000225 0A                    4698 	.db 0x0a
      000226 00                    4699 	.db 0x00
                                   4700 	.area CSEG    (CODE)
                                   4701 	.area CONST   (CODE)
      000227                       4702 ___str_32:
      000227 68 3A 20 41 64 64 72  4703 	.ascii "h: Addr--"
             2D 2D
      000230 0D                    4704 	.db 0x0d
      000231 0A                    4705 	.db 0x0a
      000232 00                    4706 	.db 0x00
                                   4707 	.area CSEG    (CODE)
                                   4708 	.area CONST   (CODE)
      000233                       4709 ___str_33:
      000233 6A 3A 20 43 6D 64 2D  4710 	.ascii "j: Cmd--"
             2D
      00023B 0D                    4711 	.db 0x0d
      00023C 0A                    4712 	.db 0x0a
      00023D 00                    4713 	.db 0x00
                                   4714 	.area CSEG    (CODE)
                                   4715 	.area CONST   (CODE)
      00023E                       4716 ___str_34:
      00023E 6B 3A 20 43 6D 64 2B  4717 	.ascii "k: Cmd++"
             2B
      000246 0D                    4718 	.db 0x0d
      000247 0A                    4719 	.db 0x0a
      000248 00                    4720 	.db 0x00
                                   4721 	.area CSEG    (CODE)
                                   4722 	.area CONST   (CODE)
      000249                       4723 ___str_35:
      000249 6C 3A 20 41 64 64 72  4724 	.ascii "l: Addr++"
             2B 2B
      000252 0D                    4725 	.db 0x0d
      000253 0A                    4726 	.db 0x0a
      000254 00                    4727 	.db 0x00
                                   4728 	.area CSEG    (CODE)
                                   4729 	.area CONST   (CODE)
      000255                       4730 ___str_36:
      000255 73 3A 20 73 65 6E 64  4731 	.ascii "s: sending"
             69 6E 67
      00025F 0D                    4732 	.db 0x0d
      000260 0A                    4733 	.db 0x0a
      000261 00                    4734 	.db 0x00
                                   4735 	.area CSEG    (CODE)
                                   4736 	.area CONST   (CODE)
      000262                       4737 ___str_37:
      000262 25 75                 4738 	.ascii "%u"
      000264 0A                    4739 	.db 0x0a
      000265 0D                    4740 	.db 0x0d
      000266 00                    4741 	.db 0x00
                                   4742 	.area CSEG    (CODE)
                                   4743 	.area CONST   (CODE)
      000267                       4744 ___str_38:
      000267 4C 49 4E 45 46 49 5F  4745 	.ascii "LINEFI_EN0=0"
             45 4E 30 3D 30
      000273 0A                    4746 	.db 0x0a
      000274 0D                    4747 	.db 0x0d
      000275 00                    4748 	.db 0x00
                                   4749 	.area CSEG    (CODE)
                                   4750 	.area CONST   (CODE)
      000276                       4751 ___str_39:
      000276 4C 49 4E 45 46 49 5F  4752 	.ascii "LINEFI_EN0=1"
             45 4E 30 3D 31
      000282 0A                    4753 	.db 0x0a
      000283 0D                    4754 	.db 0x0d
      000284 00                    4755 	.db 0x00
                                   4756 	.area CSEG    (CODE)
                                   4757 	.area CONST   (CODE)
      000285                       4758 ___str_40:
      000285 4C 49 4E 45 46 49 5F  4759 	.ascii "LINEFI_TX=0"
             54 58 3D 30
      000290 0A                    4760 	.db 0x0a
      000291 0D                    4761 	.db 0x0d
      000292 00                    4762 	.db 0x00
                                   4763 	.area CSEG    (CODE)
                                   4764 	.area CONST   (CODE)
      000293                       4765 ___str_41:
      000293 4C 49 4E 45 46 49 5F  4766 	.ascii "LINEFI_TX=1"
             54 58 3D 31
      00029E 0A                    4767 	.db 0x0a
      00029F 0D                    4768 	.db 0x0d
      0002A0 00                    4769 	.db 0x00
                                   4770 	.area CSEG    (CODE)
                                   4771 	.area CONST   (CODE)
      0002A1                       4772 ___str_42:
      0002A1 4C 49 4E 45 46 49 5F  4773 	.ascii "LINEFI_TX=%d"
             54 58 3D 25 64
      0002AD 0A                    4774 	.db 0x0a
      0002AE 0D                    4775 	.db 0x0d
      0002AF 00                    4776 	.db 0x00
                                   4777 	.area CSEG    (CODE)
                                   4778 	.area CONST   (CODE)
      0002B0                       4779 ___str_43:
      0002B0 4C 49 4E 45 46 49 5F  4780 	.ascii "LINEFI_EN0="
             45 4E 30 3D
      0002BB 00                    4781 	.db 0x00
                                   4782 	.area CSEG    (CODE)
                                   4783 	.area CONST   (CODE)
      0002BC                       4784 ___str_44:
      0002BC 25 64                 4785 	.ascii "%d"
      0002BE 0A                    4786 	.db 0x0a
      0002BF 0D                    4787 	.db 0x0d
      0002C0 00                    4788 	.db 0x00
                                   4789 	.area CSEG    (CODE)
                                   4790 	.area CONST   (CODE)
      0002C1                       4791 ___str_45:
      0002C1 4C 49 4E 45 46 49 5F  4792 	.ascii "LINEFI_EN1="
             45 4E 31 3D
      0002CC 00                    4793 	.db 0x00
                                   4794 	.area CSEG    (CODE)
                                   4795 	.area CONST   (CODE)
      0002CD                       4796 ___str_46:
      0002CD 4C 49 4E 45 46 49 5F  4797 	.ascii "LINEFI_EN2="
             45 4E 32 3D
      0002D8 00                    4798 	.db 0x00
                                   4799 	.area CSEG    (CODE)
                                   4800 	.area CONST   (CODE)
      0002D9                       4801 ___str_47:
      0002D9 75 61 72 74 20 73 70  4802 	.ascii "uart speed: %lu:"
             65 65 64 3A 20 25 6C
             75 3A
      0002E9 0A                    4803 	.db 0x0a
      0002EA 0D                    4804 	.db 0x0d
      0002EB 00                    4805 	.db 0x00
                                   4806 	.area CSEG    (CODE)
                                   4807 	.area CONST   (CODE)
      0002EC                       4808 ___str_48:
      0002EC 61 64 64 72 65 73 73  4809 	.ascii "address: %d"
             3A 20 25 64
      0002F7 0A                    4810 	.db 0x0a
      0002F8 0D                    4811 	.db 0x0d
      0002F9 00                    4812 	.db 0x00
                                   4813 	.area CSEG    (CODE)
                                   4814 	.area CONST   (CODE)
      0002FA                       4815 ___str_49:
      0002FA 63 6F 6D 6D 61 6E 64  4816 	.ascii "command: %d"
             3A 20 25 64
      000305 0A                    4817 	.db 0x0a
      000306 0D                    4818 	.db 0x0d
      000307 00                    4819 	.db 0x00
                                   4820 	.area CSEG    (CODE)
                                   4821 	.area CONST   (CODE)
      000308                       4822 ___str_50:
      000308 4C 69 6E 65 46 69 20  4823 	.ascii "LineFi Sending: 0x%x:"
             53 65 6E 64 69 6E 67
             3A 20 30 78 25 78 3A
      00031D 0A                    4824 	.db 0x0a
      00031E 0D                    4825 	.db 0x0d
      00031F 00                    4826 	.db 0x00
                                   4827 	.area CSEG    (CODE)
                                   4828 	.area CONST   (CODE)
      000320                       4829 ___str_51:
      000320 61 64 64 72 65 73 73  4830 	.ascii "address: 0x%d:"
             3A 20 30 78 25 64 3A
      00032E 0A                    4831 	.db 0x0a
      00032F 0D                    4832 	.db 0x0d
      000330 00                    4833 	.db 0x00
                                   4834 	.area CSEG    (CODE)
                                   4835 	.area CONST   (CODE)
      000331                       4836 ___str_52:
      000331 4C 69 6E 65 46 69 20  4837 	.ascii "LineFi Sending: %d(0x%x)"
             53 65 6E 64 69 6E 67
             3A 20 25 64 28 30 78
             25 78 29
      000349 0A                    4838 	.db 0x0a
      00034A 0D                    4839 	.db 0x0d
      00034B 00                    4840 	.db 0x00
                                   4841 	.area CSEG    (CODE)
                                   4842 	.area CONST   (CODE)
      00034C                       4843 ___str_53:
      00034C 73 65 6E 64 20 64 61  4844 	.ascii "send data %d(0x%x)"
             74 61 20 25 64 28 30
             78 25 78 29
      00035E 0A                    4845 	.db 0x0a
      00035F 0D                    4846 	.db 0x0d
      000360 00                    4847 	.db 0x00
                                   4848 	.area CSEG    (CODE)
                                   4849 	.area CONST   (CODE)
      000361                       4850 ___str_54:
      000361 54 68 69 73 20 69 73  4851 	.ascii "This is UART0"
             20 55 41 52 54 30
      00036E 0A                    4852 	.db 0x0a
      00036F 0D                    4853 	.db 0x0d
      000370 00                    4854 	.db 0x00
                                   4855 	.area CSEG    (CODE)
                                   4856 	.area CONST   (CODE)
      000371                       4857 ___str_55:
      000371 4C 69 6E 65 46 69 20  4858 	.ascii "LineFi Master"
             4D 61 73 74 65 72
      00037E 0A                    4859 	.db 0x0a
      00037F 0D                    4860 	.db 0x0d
      000380 00                    4861 	.db 0x00
                                   4862 	.area CSEG    (CODE)
                                   4863 	.area CONST   (CODE)
      000381                       4864 ___str_56:
      000381 54 68 69 73 20 69 73  4865 	.ascii "This is UART1"
             20 55 41 52 54 31
      00038E 0A                    4866 	.db 0x0a
      00038F 0D                    4867 	.db 0x0d
      000390 00                    4868 	.db 0x00
                                   4869 	.area CSEG    (CODE)
                                   4870 	.area CONST   (CODE)
      000391                       4871 ___str_57:
      000391 25 73                 4872 	.ascii "%s"
      000393 0D                    4873 	.db 0x0d
      000394 0A                    4874 	.db 0x0a
      000395 00                    4875 	.db 0x00
                                   4876 	.area CSEG    (CODE)
                                   4877 	.area CONST   (CODE)
      000396                       4878 ___str_58:
      000396 44 61 74 61 49 64 78  4879 	.ascii "DataIdx:%d"
             3A 25 64
      0003A0 0D                    4880 	.db 0x0d
      0003A1 0A                    4881 	.db 0x0a
      0003A2 00                    4882 	.db 0x00
                                   4883 	.area CSEG    (CODE)
                                   4884 	.area CONST   (CODE)
      0003A3                       4885 ___str_59:
      0003A3 30 78 25 78 20        4886 	.ascii "0x%x "
      0003A8 00                    4887 	.db 0x00
                                   4888 	.area CSEG    (CODE)
                                   4889 	.area CONST   (CODE)
      0003A9                       4890 ___str_60:
      0003A9 55 41 52 54 30 5F 49  4891 	.ascii "UART0_INPUT_MODE0:one key control"
             4E 50 55 54 5F 4D 4F
             44 45 30 3A 6F 6E 65
             20 6B 65 79 20 63 6F
             6E 74 72 6F 6C
      0003CA 00                    4892 	.db 0x00
                                   4893 	.area CSEG    (CODE)
                                   4894 	.area CONST   (CODE)
      0003CB                       4895 ___str_61:
      0003CB 55 41 52 54 30 5F 49  4896 	.ascii "UART0_INPUT_MODE1:string input"
             4E 50 55 54 5F 4D 4F
             44 45 31 3A 73 74 72
             69 6E 67 20 69 6E 70
             75 74
      0003E9 00                    4897 	.db 0x00
                                   4898 	.area CSEG    (CODE)
                                   4899 	.area CONST   (CODE)
      0003EA                       4900 ___str_62:
      0003EA 55 41 52 54 30 5F 49  4901 	.ascii "UART0_INPUT_MODE2:mimic 5keys on board"
             4E 50 55 54 5F 4D 4F
             44 45 32 3A 6D 69 6D
             69 63 20 35 6B 65 79
             73 20 6F 6E 20 62 6F
             61 72 64
      000410 00                    4902 	.db 0x00
                                   4903 	.area CSEG    (CODE)
                                   4904 	.area CONST   (CODE)
      000411                       4905 ___str_63:
      000411 55 41 52 54 30 5F 49  4906 	.ascii "UART0_INPUT_MODE3:data setting"
             4E 50 55 54 5F 4D 4F
             44 45 33 3A 64 61 74
             61 20 73 65 74 74 69
             6E 67
      00042F 00                    4907 	.db 0x00
                                   4908 	.area CSEG    (CODE)
                                   4909 	.area CABS    (ABS,CODE)
